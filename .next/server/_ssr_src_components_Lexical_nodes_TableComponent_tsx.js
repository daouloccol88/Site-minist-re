"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_components_Lexical_nodes_TableComponent_tsx";
exports.ids = ["_ssr_src_components_Lexical_nodes_TableComponent_tsx"];
exports.modules = {

/***/ "(ssr)/./src/components/Lexical/nodes/TableComponent.tsx":
/*!*********************************************************!*\
  !*** ./src/components/Lexical/nodes/TableComponent.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TableComponent)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lexical_clipboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lexical/clipboard */ \"(ssr)/./node_modules/@lexical/clipboard/LexicalClipboard.js\");\n/* harmony import */ var _lexical_clipboard__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lexical_clipboard__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lexical_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lexical/html */ \"(ssr)/./node_modules/@lexical/html/LexicalHtml.js\");\n/* harmony import */ var _lexical_html__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_lexical_html__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\n/* harmony import */ var _lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _lexical_react_LexicalNestedComposer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lexical/react/LexicalNestedComposer */ \"(ssr)/./node_modules/@lexical/react/LexicalNestedComposer.js\");\n/* harmony import */ var _lexical_react_LexicalNestedComposer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_lexical_react_LexicalNestedComposer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _lexical_react_useLexicalNodeSelection__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lexical/react/useLexicalNodeSelection */ \"(ssr)/./node_modules/@lexical/react/useLexicalNodeSelection.js\");\n/* harmony import */ var _lexical_react_useLexicalNodeSelection__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_lexical_react_useLexicalNodeSelection__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_lexical_utils__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n/* harmony import */ var lexical__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lexical__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _shared_environment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../shared/environment */ \"(ssr)/./src/components/Lexical/shared/environment.ts\");\n/* harmony import */ var _plugins_TablePlugin__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../plugins/TablePlugin */ \"(ssr)/./src/components/Lexical/plugins/TablePlugin.tsx\");\n/* harmony import */ var _TableNode__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./TableNode */ \"(ssr)/./src/components/Lexical/nodes/TableNode.tsx\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ \n\n\n\n\n\n\n\n\n\n\n\n\n\nconst NO_CELLS = [];\nfunction $createSelectAll() {\n    const sel = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$createRangeSelection)();\n    sel.focus.set(\"root\", (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getRoot)().getChildrenSize(), \"element\");\n    return sel;\n}\nfunction createEmptyParagraphHTML(theme) {\n    return `<p class=\"${theme.paragraph}\"><br></p>`;\n}\nfunction focusCell(tableElem, id) {\n    const cellElem = tableElem.querySelector(`[data-id=${id}]`);\n    if (cellElem == null) {\n        return;\n    }\n    cellElem.focus();\n}\nfunction isStartingResize(target) {\n    return target.nodeType === 1 && target.hasAttribute(\"data-table-resize\");\n}\nfunction generateHTMLFromJSON(editorStateJSON, cellEditor) {\n    const editorState = cellEditor.parseEditorState(editorStateJSON);\n    let html = _TableNode__WEBPACK_IMPORTED_MODULE_12__.cellHTMLCache.get(editorStateJSON);\n    if (html === undefined) {\n        html = editorState.read(()=>(0,_lexical_html__WEBPACK_IMPORTED_MODULE_2__.$generateHtmlFromNodes)(cellEditor, null));\n        const textContent = editorState.read(()=>(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getRoot)().getTextContent());\n        _TableNode__WEBPACK_IMPORTED_MODULE_12__.cellHTMLCache.set(editorStateJSON, html);\n        _TableNode__WEBPACK_IMPORTED_MODULE_12__.cellTextContentCache.set(editorStateJSON, textContent);\n    }\n    return html;\n}\nfunction getCurrentDocument(editor) {\n    const rootElement = editor.getRootElement();\n    return rootElement !== null ? rootElement.ownerDocument : document;\n}\nfunction isCopy(keyCode, shiftKey, metaKey, ctrlKey) {\n    if (shiftKey) {\n        return false;\n    }\n    if (keyCode === 67) {\n        return _shared_environment__WEBPACK_IMPORTED_MODULE_10__.IS_APPLE ? metaKey : ctrlKey;\n    }\n    return false;\n}\nfunction isCut(keyCode, shiftKey, metaKey, ctrlKey) {\n    if (shiftKey) {\n        return false;\n    }\n    if (keyCode === 88) {\n        return _shared_environment__WEBPACK_IMPORTED_MODULE_10__.IS_APPLE ? metaKey : ctrlKey;\n    }\n    return false;\n}\nfunction isPaste(keyCode, shiftKey, metaKey, ctrlKey) {\n    if (shiftKey) {\n        return false;\n    }\n    if (keyCode === 86) {\n        return _shared_environment__WEBPACK_IMPORTED_MODULE_10__.IS_APPLE ? metaKey : ctrlKey;\n    }\n    return false;\n}\nfunction getCellID(domElement) {\n    let node = domElement;\n    while(node !== null){\n        const possibleID = node.getAttribute(\"data-id\");\n        if (possibleID != null) {\n            return possibleID;\n        }\n        node = node.parentElement;\n    }\n    return null;\n}\nfunction getTableCellWidth(domElement) {\n    let node = domElement;\n    while(node !== null){\n        if (node.nodeName === \"TH\" || node.nodeName === \"TD\") {\n            return node.getBoundingClientRect().width;\n        }\n        node = node.parentElement;\n    }\n    return 0;\n}\nfunction $updateCells(rows, ids, cellCoordMap, cellEditor, updateTableNode, fn) {\n    for (const id of ids){\n        const cell = getCell(rows, id, cellCoordMap);\n        if (cell !== null && cellEditor !== null) {\n            const editorState = cellEditor.parseEditorState(cell.json);\n            cellEditor._headless = true;\n            cellEditor.setEditorState(editorState);\n            cellEditor.update(fn, {\n                discrete: true\n            });\n            cellEditor._headless = false;\n            const newJSON = JSON.stringify(cellEditor.getEditorState());\n            updateTableNode((tableNode)=>{\n                const [x, y] = cellCoordMap.get(id);\n                (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                tableNode.updateCellJSON(x, y, newJSON);\n            });\n        }\n    }\n}\nfunction isTargetOnPossibleUIControl(target) {\n    let node = target;\n    while(node !== null){\n        const nodeName = node.nodeName;\n        if (nodeName === \"BUTTON\" || nodeName === \"INPUT\" || nodeName === \"TEXTAREA\") {\n            return true;\n        }\n        node = node.parentElement;\n    }\n    return false;\n}\nfunction getSelectedRect(startID, endID, cellCoordMap) {\n    const startCoords = cellCoordMap.get(startID);\n    const endCoords = cellCoordMap.get(endID);\n    if (startCoords === undefined || endCoords === undefined) {\n        return null;\n    }\n    const startX = Math.min(startCoords[0], endCoords[0]);\n    const endX = Math.max(startCoords[0], endCoords[0]);\n    const startY = Math.min(startCoords[1], endCoords[1]);\n    const endY = Math.max(startCoords[1], endCoords[1]);\n    return {\n        endX,\n        endY,\n        startX,\n        startY\n    };\n}\nfunction getSelectedIDs(rows, startID, endID, cellCoordMap) {\n    const rect = getSelectedRect(startID, endID, cellCoordMap);\n    if (rect === null) {\n        return [];\n    }\n    const { startX, endY, endX, startY } = rect;\n    const ids = [];\n    for(let x = startX; x <= endX; x++){\n        for(let y = startY; y <= endY; y++){\n            ids.push(rows[y].cells[x].id);\n        }\n    }\n    return ids;\n}\nfunction extractCellsFromRows(rows, rect) {\n    const { startX, endY, endX, startY } = rect;\n    const newRows = [];\n    for(let y = startY; y <= endY; y++){\n        const row = rows[y];\n        const newRow = (0,_TableNode__WEBPACK_IMPORTED_MODULE_12__.createRow)();\n        for(let x = startX; x <= endX; x++){\n            const cellClone = {\n                ...row.cells[x]\n            };\n            cellClone.id = (0,_TableNode__WEBPACK_IMPORTED_MODULE_12__.createUID)();\n            newRow.cells.push(cellClone);\n        }\n        newRows.push(newRow);\n    }\n    return newRows;\n}\nfunction TableCellEditor({ cellEditor }) {\n    const { cellEditorConfig, cellEditorPlugins } = (0,react__WEBPACK_IMPORTED_MODULE_8__.useContext)(_plugins_TablePlugin__WEBPACK_IMPORTED_MODULE_11__.CellContext);\n    if (cellEditorPlugins === null || cellEditorConfig === null) {\n        return null;\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_lexical_react_LexicalNestedComposer__WEBPACK_IMPORTED_MODULE_4__.LexicalNestedComposer, {\n        initialEditor: cellEditor,\n        initialTheme: cellEditorConfig.theme,\n        initialNodes: cellEditorConfig.nodes,\n        skipCollabChecks: true,\n        children: cellEditorPlugins\n    }, void 0, false, {\n        fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n        lineNumber: 307,\n        columnNumber: 5\n    }, this);\n}\nfunction getCell(rows, cellID, cellCoordMap) {\n    const coords = cellCoordMap.get(cellID);\n    if (coords === undefined) {\n        return null;\n    }\n    const [x, y] = coords;\n    const row = rows[y];\n    return row.cells[x];\n}\nfunction TableActionMenu({ cell, rows, cellCoordMap, menuElem, updateCellsByID, onClose, updateTableNode, setSortingOptions, sortingOptions }) {\n    const dropDownRef = (0,react__WEBPACK_IMPORTED_MODULE_8__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        const dropdownElem = dropDownRef.current;\n        if (dropdownElem !== null) {\n            const rect = menuElem.getBoundingClientRect();\n            dropdownElem.style.top = `${rect.y}px`;\n            dropdownElem.style.left = `${rect.x}px`;\n        }\n    }, [\n        menuElem\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        const handleClickOutside = (event)=>{\n            const dropdownElem = dropDownRef.current;\n            if (dropdownElem !== null && !dropdownElem.contains(event.target)) {\n                event.stopPropagation();\n            }\n        };\n        window.addEventListener(\"click\", handleClickOutside);\n        return ()=>window.removeEventListener(\"click\", handleClickOutside);\n    }, [\n        onClose\n    ]);\n    const coords = cellCoordMap.get(cell.id);\n    if (coords === undefined) {\n        return null;\n    }\n    const [x, y] = coords;\n    return(// eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"dropdown\",\n        ref: dropDownRef,\n        onPointerMove: (e)=>{\n            e.stopPropagation();\n        },\n        onPointerDown: (e)=>{\n            e.stopPropagation();\n        },\n        onPointerUp: (e)=>{\n            e.stopPropagation();\n        },\n        onClick: (e)=>{\n            e.stopPropagation();\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                className: \"item\",\n                onClick: ()=>{\n                    updateTableNode((tableNode)=>{\n                        (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                        tableNode.updateCellType(x, y, cell.type === \"normal\" ? \"header\" : \"normal\");\n                    });\n                    onClose();\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"text\",\n                    children: cell.type === \"normal\" ? \"Make header\" : \"Remove header\"\n                }, void 0, false, {\n                    fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                    lineNumber: 417,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 403,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                className: \"item\",\n                onClick: ()=>{\n                    updateCellsByID([\n                        cell.id\n                    ], ()=>{\n                        const root = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getRoot)();\n                        root.clear();\n                        root.append((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$createParagraphNode)());\n                    });\n                    onClose();\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"text\",\n                    children: \"Clear cell\"\n                }, void 0, false, {\n                    fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                    lineNumber: 432,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 421,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"hr\", {}, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 434,\n                columnNumber: 7\n            }, this),\n            cell.type === \"header\" && y === 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    sortingOptions !== null && sortingOptions.x === x && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"item\",\n                        onClick: ()=>{\n                            setSortingOptions(null);\n                            onClose();\n                        },\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text\",\n                            children: \"Remove sorting\"\n                        }, void 0, false, {\n                            fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                            lineNumber: 445,\n                            columnNumber: 15\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                        lineNumber: 438,\n                        columnNumber: 13\n                    }, this),\n                    (sortingOptions === null || sortingOptions.x !== x || sortingOptions.type === \"descending\") && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"item\",\n                        onClick: ()=>{\n                            setSortingOptions({\n                                type: \"ascending\",\n                                x\n                            });\n                            onClose();\n                        },\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text\",\n                            children: \"Sort ascending\"\n                        }, void 0, false, {\n                            fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                            lineNumber: 458,\n                            columnNumber: 15\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                        lineNumber: 451,\n                        columnNumber: 13\n                    }, this),\n                    (sortingOptions === null || sortingOptions.x !== x || sortingOptions.type === \"ascending\") && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"item\",\n                        onClick: ()=>{\n                            setSortingOptions({\n                                type: \"descending\",\n                                x\n                            });\n                            onClose();\n                        },\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text\",\n                            children: \"Sort descending\"\n                        }, void 0, false, {\n                            fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                            lineNumber: 471,\n                            columnNumber: 15\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                        lineNumber: 464,\n                        columnNumber: 13\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"hr\", {}, void 0, false, {\n                        fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                        lineNumber: 474,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                className: \"item\",\n                onClick: ()=>{\n                    updateTableNode((tableNode)=>{\n                        (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                        tableNode.insertRowAt(y);\n                    });\n                    onClose();\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"text\",\n                    children: \"Insert row above\"\n                }, void 0, false, {\n                    fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                    lineNumber: 487,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 477,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                className: \"item\",\n                onClick: ()=>{\n                    updateTableNode((tableNode)=>{\n                        (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                        tableNode.insertRowAt(y + 1);\n                    });\n                    onClose();\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"text\",\n                    children: \"Insert row below\"\n                }, void 0, false, {\n                    fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                    lineNumber: 499,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 489,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"hr\", {}, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 501,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                className: \"item\",\n                onClick: ()=>{\n                    updateTableNode((tableNode)=>{\n                        (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                        tableNode.insertColumnAt(x);\n                    });\n                    onClose();\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"text\",\n                    children: \"Insert column left\"\n                }, void 0, false, {\n                    fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                    lineNumber: 512,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 502,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                className: \"item\",\n                onClick: ()=>{\n                    updateTableNode((tableNode)=>{\n                        (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                        tableNode.insertColumnAt(x + 1);\n                    });\n                    onClose();\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"text\",\n                    children: \"Insert column right\"\n                }, void 0, false, {\n                    fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                    lineNumber: 524,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 514,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"hr\", {}, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 526,\n                columnNumber: 7\n            }, this),\n            rows[0].cells.length !== 1 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                className: \"item\",\n                onClick: ()=>{\n                    updateTableNode((tableNode)=>{\n                        (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                        tableNode.deleteColumnAt(x);\n                    });\n                    onClose();\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"text\",\n                    children: \"Delete column\"\n                }, void 0, false, {\n                    fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                    lineNumber: 538,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 528,\n                columnNumber: 9\n            }, this),\n            rows.length !== 1 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                className: \"item\",\n                onClick: ()=>{\n                    updateTableNode((tableNode)=>{\n                        (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                        tableNode.deleteRowAt(y);\n                    });\n                    onClose();\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"text\",\n                    children: \"Delete row\"\n                }, void 0, false, {\n                    fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                    lineNumber: 552,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 542,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                className: \"item\",\n                onClick: ()=>{\n                    updateTableNode((tableNode)=>{\n                        (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                        tableNode.selectNext();\n                        tableNode.remove();\n                    });\n                    onClose();\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                    className: \"text\",\n                    children: \"Delete table\"\n                }, void 0, false, {\n                    fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                    lineNumber: 566,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 555,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n        lineNumber: 387,\n        columnNumber: 5\n    }, this));\n}\nfunction TableCell({ cell, cellCoordMap, cellEditor, isEditing, isSelected, isPrimarySelected, theme, updateCellsByID, updateTableNode, rows, setSortingOptions, sortingOptions }) {\n    const [showMenu, setShowMenu] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(false);\n    const menuRootRef = (0,react__WEBPACK_IMPORTED_MODULE_8__.useRef)(null);\n    const isHeader = cell.type !== \"normal\";\n    const editorStateJSON = cell.json;\n    const CellComponent = isHeader ? \"th\" : \"td\";\n    const cellWidth = cell.width;\n    const menuElem = menuRootRef.current;\n    const coords = cellCoordMap.get(cell.id);\n    const isSorted = sortingOptions !== null && coords !== undefined && coords[0] === sortingOptions.x && coords[1] === 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        if (isEditing || !isPrimarySelected) {\n            setShowMenu(false);\n        }\n    }, [\n        isEditing,\n        isPrimarySelected\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(CellComponent, {\n        className: `${theme.tableCell} ${isHeader ? theme.tableCellHeader : \"\"} ${isSelected ? theme.tableCellSelected : \"\"}`,\n        \"data-id\": cell.id,\n        tabIndex: -1,\n        style: {\n            width: cellWidth !== null ? cellWidth : undefined\n        },\n        children: [\n            isPrimarySelected && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: `${theme.tableCellPrimarySelected} ${isEditing ? theme.tableCellEditing : \"\"}`\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 629,\n                columnNumber: 9\n            }, this),\n            isPrimarySelected && isEditing ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(TableCellEditor, {\n                cellEditor: cellEditor\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 636,\n                columnNumber: 9\n            }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        dangerouslySetInnerHTML: {\n                            __html: editorStateJSON === \"\" ? createEmptyParagraphHTML(theme) : generateHTMLFromJSON(editorStateJSON, cellEditor)\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                        lineNumber: 639,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: theme.tableCellResizer,\n                        \"data-table-resize\": \"true\"\n                    }, void 0, false, {\n                        fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                        lineNumber: 647,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true),\n            isPrimarySelected && !isEditing && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: theme.tableCellActionButtonContainer,\n                ref: menuRootRef,\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    className: theme.tableCellActionButton,\n                    onClick: (e)=>{\n                        setShowMenu(!showMenu);\n                        e.stopPropagation();\n                    },\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"i\", {\n                        className: \"chevron-down\"\n                    }, void 0, false, {\n                        fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                        lineNumber: 659,\n                        columnNumber: 13\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                    lineNumber: 652,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 651,\n                columnNumber: 9\n            }, this),\n            showMenu && menuElem !== null && /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_9__.createPortal)(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(TableActionMenu, {\n                cell: cell,\n                menuElem: menuElem,\n                updateCellsByID: updateCellsByID,\n                onClose: ()=>setShowMenu(false),\n                updateTableNode: updateTableNode,\n                cellCoordMap: cellCoordMap,\n                rows: rows,\n                setSortingOptions: setSortingOptions,\n                sortingOptions: sortingOptions\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 666,\n                columnNumber: 11\n            }, this), document.body),\n            isSorted && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: theme.tableCellSortedIndicator\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 679,\n                columnNumber: 20\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n        lineNumber: 620,\n        columnNumber: 5\n    }, this);\n}\nfunction TableComponent({ nodeKey, rows: rawRows, theme }) {\n    const [isSelected, setSelected, clearSelection] = (0,_lexical_react_useLexicalNodeSelection__WEBPACK_IMPORTED_MODULE_5__.useLexicalNodeSelection)(nodeKey);\n    const resizeMeasureRef = (0,react__WEBPACK_IMPORTED_MODULE_8__.useRef)({\n        point: 0,\n        size: 0\n    });\n    const [sortingOptions, setSortingOptions] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(null);\n    const addRowsRef = (0,react__WEBPACK_IMPORTED_MODULE_8__.useRef)(null);\n    const lastCellIDRef = (0,react__WEBPACK_IMPORTED_MODULE_8__.useRef)(null);\n    const tableResizerRulerRef = (0,react__WEBPACK_IMPORTED_MODULE_8__.useRef)(null);\n    const { cellEditorConfig } = (0,react__WEBPACK_IMPORTED_MODULE_8__.useContext)(_plugins_TablePlugin__WEBPACK_IMPORTED_MODULE_11__.CellContext);\n    const [isEditing, setIsEditing] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(false);\n    const [showAddColumns, setShowAddColumns] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(false);\n    const [showAddRows, setShowAddRows] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(false);\n    const [editor] = (0,_lexical_react_LexicalComposerContext__WEBPACK_IMPORTED_MODULE_3__.useLexicalComposerContext)();\n    const mouseDownRef = (0,react__WEBPACK_IMPORTED_MODULE_8__.useRef)(false);\n    const [resizingID, setResizingID] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(null);\n    const tableRef = (0,react__WEBPACK_IMPORTED_MODULE_8__.useRef)(null);\n    const cellCoordMap = (0,react__WEBPACK_IMPORTED_MODULE_8__.useMemo)(()=>{\n        const map = new Map();\n        for(let y = 0; y < rawRows.length; y++){\n            const row = rawRows[y];\n            const cells = row.cells;\n            for(let x = 0; x < cells.length; x++){\n                const cell = cells[x];\n                map.set(cell.id, [\n                    x,\n                    y\n                ]);\n            }\n        }\n        return map;\n    }, [\n        rawRows\n    ]);\n    const rows = (0,react__WEBPACK_IMPORTED_MODULE_8__.useMemo)(()=>{\n        if (sortingOptions === null) {\n            return rawRows;\n        }\n        const _rows = rawRows.slice(1);\n        _rows.sort((a, b)=>{\n            const aCells = a.cells;\n            const bCells = b.cells;\n            const x = sortingOptions.x;\n            const aContent = _TableNode__WEBPACK_IMPORTED_MODULE_12__.cellTextContentCache.get(aCells[x].json) || \"\";\n            const bContent = _TableNode__WEBPACK_IMPORTED_MODULE_12__.cellTextContentCache.get(bCells[x].json) || \"\";\n            if (aContent === \"\" || bContent === \"\") {\n                return 1;\n            }\n            if (sortingOptions.type === \"ascending\") {\n                return aContent.localeCompare(bContent);\n            }\n            return bContent.localeCompare(aContent);\n        });\n        _rows.unshift(rawRows[0]);\n        return _rows;\n    }, [\n        rawRows,\n        sortingOptions\n    ]);\n    const [primarySelectedCellID, setPrimarySelectedCellID] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)(null);\n    const cellEditor = (0,react__WEBPACK_IMPORTED_MODULE_8__.useMemo)(()=>{\n        if (cellEditorConfig === null) {\n            return null;\n        }\n        const _cellEditor = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.createEditor)({\n            namespace: cellEditorConfig.namespace,\n            nodes: cellEditorConfig.nodes,\n            onError: (error)=>cellEditorConfig.onError(error, _cellEditor),\n            theme: cellEditorConfig.theme\n        });\n        return _cellEditor;\n    }, [\n        cellEditorConfig\n    ]);\n    const [selectedCellIDs, setSelectedCellIDs] = (0,react__WEBPACK_IMPORTED_MODULE_8__.useState)([]);\n    const selectedCellSet = (0,react__WEBPACK_IMPORTED_MODULE_8__.useMemo)(()=>new Set(selectedCellIDs), [\n        selectedCellIDs\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        const tableElem = tableRef.current;\n        if (isSelected && document.activeElement === document.body && tableElem !== null) {\n            tableElem.focus();\n        }\n    }, [\n        isSelected\n    ]);\n    const updateTableNode = (0,react__WEBPACK_IMPORTED_MODULE_8__.useCallback)((fn)=>{\n        editor.update(()=>{\n            const tableNode = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getNodeByKey)(nodeKey);\n            if ((0,_TableNode__WEBPACK_IMPORTED_MODULE_12__.$isTableNode)(tableNode)) {\n                fn(tableNode);\n            }\n        });\n    }, [\n        editor,\n        nodeKey\n    ]);\n    const addColumns = ()=>{\n        updateTableNode((tableNode)=>{\n            (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n            tableNode.addColumns(1);\n        });\n    };\n    const addRows = ()=>{\n        updateTableNode((tableNode)=>{\n            (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n            tableNode.addRows(1);\n        });\n    };\n    const modifySelectedCells = (0,react__WEBPACK_IMPORTED_MODULE_8__.useCallback)((x, y, extend)=>{\n        const id = rows[y].cells[x].id;\n        lastCellIDRef.current = id;\n        if (extend) {\n            const selectedIDs = getSelectedIDs(rows, primarySelectedCellID, id, cellCoordMap);\n            setSelectedCellIDs(selectedIDs);\n        } else {\n            setPrimarySelectedCellID(id);\n            setSelectedCellIDs(NO_CELLS);\n            focusCell(tableRef.current, id);\n        }\n    }, [\n        cellCoordMap,\n        primarySelectedCellID,\n        rows\n    ]);\n    const saveEditorToJSON = (0,react__WEBPACK_IMPORTED_MODULE_8__.useCallback)(()=>{\n        if (cellEditor !== null && primarySelectedCellID !== null) {\n            const json = JSON.stringify(cellEditor.getEditorState());\n            updateTableNode((tableNode)=>{\n                const coords = cellCoordMap.get(primarySelectedCellID);\n                if (coords === undefined) {\n                    return;\n                }\n                (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                const [x, y] = coords;\n                tableNode.updateCellJSON(x, y, json);\n            });\n        }\n    }, [\n        cellCoordMap,\n        cellEditor,\n        primarySelectedCellID,\n        updateTableNode\n    ]);\n    const selectTable = (0,react__WEBPACK_IMPORTED_MODULE_8__.useCallback)(()=>{\n        setTimeout(()=>{\n            const parentRootElement = editor.getRootElement();\n            if (parentRootElement !== null) {\n                parentRootElement.focus({\n                    preventScroll: true\n                });\n                window.getSelection()?.removeAllRanges();\n            }\n        }, 20);\n    }, [\n        editor\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        const tableElem = tableRef.current;\n        if (tableElem === null) {\n            return;\n        }\n        const doc = getCurrentDocument(editor);\n        const isAtEdgeOfTable = (event)=>{\n            const x = event.clientX - tableRect.x;\n            const y = event.clientY - tableRect.y;\n            return x < 5 || y < 5;\n        };\n        const handlePointerDown = (event)=>{\n            const possibleID = getCellID(event.target);\n            if (possibleID !== null && editor.isEditable() && tableElem.contains(event.target)) {\n                if (isAtEdgeOfTable(event)) {\n                    setSelected(true);\n                    setPrimarySelectedCellID(null);\n                    selectTable();\n                    return;\n                }\n                setSelected(false);\n                if (isStartingResize(event.target)) {\n                    setResizingID(possibleID);\n                    tableElem.style.userSelect = \"none\";\n                    resizeMeasureRef.current = {\n                        point: event.clientX,\n                        size: getTableCellWidth(event.target)\n                    };\n                    return;\n                }\n                mouseDownRef.current = true;\n                if (primarySelectedCellID !== possibleID) {\n                    if (isEditing) {\n                        saveEditorToJSON();\n                    }\n                    setPrimarySelectedCellID(possibleID);\n                    setIsEditing(false);\n                    lastCellIDRef.current = possibleID;\n                } else {\n                    lastCellIDRef.current = null;\n                }\n                setSelectedCellIDs(NO_CELLS);\n            } else if (primarySelectedCellID !== null && !isTargetOnPossibleUIControl(event.target)) {\n                setSelected(false);\n                mouseDownRef.current = false;\n                if (isEditing) {\n                    saveEditorToJSON();\n                }\n                setPrimarySelectedCellID(null);\n                setSelectedCellIDs(NO_CELLS);\n                setIsEditing(false);\n                lastCellIDRef.current = null;\n            }\n        };\n        const tableRect = tableElem.getBoundingClientRect();\n        const handlePointerMove = (event)=>{\n            if (resizingID !== null) {\n                const tableResizerRulerElem = tableResizerRulerRef.current;\n                if (tableResizerRulerElem !== null) {\n                    const { size, point } = resizeMeasureRef.current;\n                    const diff = event.clientX - point;\n                    const newWidth = size + diff;\n                    let x = event.clientX - tableRect.x;\n                    if (x < 10) {\n                        x = 10;\n                    } else if (x > tableRect.width - 10) {\n                        x = tableRect.width - 10;\n                    } else if (newWidth < 20) {\n                        x = point - size + 20 - tableRect.x;\n                    }\n                    tableResizerRulerElem.style.left = `${x}px`;\n                }\n                return;\n            }\n            if (!isEditing) {\n                const { clientX, clientY } = event;\n                const { width, x, y, height } = tableRect;\n                const isOnRightEdge = clientX > x + width * 0.9 && clientX < x + width + 40 && !mouseDownRef.current;\n                setShowAddColumns(isOnRightEdge);\n                const isOnBottomEdge = event.target === addRowsRef.current || clientY > y + height * 0.85 && clientY < y + height + 5 && !mouseDownRef.current;\n                setShowAddRows(isOnBottomEdge);\n            }\n            if (isEditing || !mouseDownRef.current || primarySelectedCellID === null) {\n                return;\n            }\n            const possibleID = getCellID(event.target);\n            if (possibleID !== null && possibleID !== lastCellIDRef.current) {\n                if (selectedCellIDs.length === 0) {\n                    tableElem.style.userSelect = \"none\";\n                }\n                const selectedIDs = getSelectedIDs(rows, primarySelectedCellID, possibleID, cellCoordMap);\n                if (selectedIDs.length === 1) {\n                    setSelectedCellIDs(NO_CELLS);\n                } else {\n                    setSelectedCellIDs(selectedIDs);\n                }\n                lastCellIDRef.current = possibleID;\n            }\n        };\n        const handlePointerUp = (event)=>{\n            if (resizingID !== null) {\n                const { size, point } = resizeMeasureRef.current;\n                const diff = event.clientX - point;\n                let newWidth = size + diff;\n                if (newWidth < 10) {\n                    newWidth = 10;\n                }\n                updateTableNode((tableNode)=>{\n                    const [x] = cellCoordMap.get(resizingID);\n                    (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                    tableNode.updateColumnWidth(x, newWidth);\n                });\n                setResizingID(null);\n            }\n            if (tableElem !== null && selectedCellIDs.length > 1 && mouseDownRef.current) {\n                tableElem.style.userSelect = \"text\";\n                window.getSelection()?.removeAllRanges();\n            }\n            mouseDownRef.current = false;\n        };\n        doc.addEventListener(\"pointerdown\", handlePointerDown);\n        doc.addEventListener(\"pointermove\", handlePointerMove);\n        doc.addEventListener(\"pointerup\", handlePointerUp);\n        return ()=>{\n            doc.removeEventListener(\"pointerdown\", handlePointerDown);\n            doc.removeEventListener(\"pointermove\", handlePointerMove);\n            doc.removeEventListener(\"pointerup\", handlePointerUp);\n        };\n    }, [\n        cellEditor,\n        editor,\n        isEditing,\n        rows,\n        saveEditorToJSON,\n        primarySelectedCellID,\n        selectedCellSet,\n        selectedCellIDs,\n        cellCoordMap,\n        resizingID,\n        updateTableNode,\n        setSelected,\n        selectTable\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        if (!isEditing && primarySelectedCellID !== null) {\n            const doc = getCurrentDocument(editor);\n            const loadContentIntoCell = (cell)=>{\n                if (cell !== null && cellEditor !== null) {\n                    const editorStateJSON = cell.json;\n                    const editorState = cellEditor.parseEditorState(editorStateJSON);\n                    cellEditor.setEditorState(editorState);\n                }\n            };\n            const handleDblClick = (event)=>{\n                const possibleID = getCellID(event.target);\n                if (possibleID === primarySelectedCellID && editor.isEditable()) {\n                    const cell = getCell(rows, possibleID, cellCoordMap);\n                    loadContentIntoCell(cell);\n                    setIsEditing(true);\n                    setSelectedCellIDs(NO_CELLS);\n                }\n            };\n            const handleKeyDown = (event)=>{\n                // Ignore arrow keys, escape or tab\n                const keyCode = event.keyCode;\n                if (keyCode === 16 || keyCode === 27 || keyCode === 9 || keyCode === 37 || keyCode === 38 || keyCode === 39 || keyCode === 40 || keyCode === 8 || keyCode === 46 || !editor.isEditable()) {\n                    return;\n                }\n                if (keyCode === 13) {\n                    event.preventDefault();\n                }\n                if (!isEditing && primarySelectedCellID !== null && editor.getEditorState().read(()=>(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)() === null) && event.target.contentEditable !== \"true\") {\n                    if (isCopy(keyCode, event.shiftKey, event.metaKey, event.ctrlKey)) {\n                        editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.COPY_COMMAND, event);\n                        return;\n                    }\n                    if (isCut(keyCode, event.shiftKey, event.metaKey, event.ctrlKey)) {\n                        editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.CUT_COMMAND, event);\n                        return;\n                    }\n                    if (isPaste(keyCode, event.shiftKey, event.metaKey, event.ctrlKey)) {\n                        editor.dispatchCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.PASTE_COMMAND, event);\n                        return;\n                    }\n                }\n                if (event.metaKey || event.ctrlKey || event.altKey) {\n                    return;\n                }\n                const cell = getCell(rows, primarySelectedCellID, cellCoordMap);\n                loadContentIntoCell(cell);\n                setIsEditing(true);\n                setSelectedCellIDs(NO_CELLS);\n            };\n            doc.addEventListener(\"dblclick\", handleDblClick);\n            doc.addEventListener(\"keydown\", handleKeyDown);\n            return ()=>{\n                doc.removeEventListener(\"dblclick\", handleDblClick);\n                doc.removeEventListener(\"keydown\", handleKeyDown);\n            };\n        }\n    }, [\n        cellEditor,\n        editor,\n        isEditing,\n        rows,\n        primarySelectedCellID,\n        cellCoordMap\n    ]);\n    const updateCellsByID = (0,react__WEBPACK_IMPORTED_MODULE_8__.useCallback)((ids, fn)=>{\n        $updateCells(rows, ids, cellCoordMap, cellEditor, updateTableNode, fn);\n    }, [\n        cellCoordMap,\n        cellEditor,\n        rows,\n        updateTableNode\n    ]);\n    const clearCellsCommand = (0,react__WEBPACK_IMPORTED_MODULE_8__.useCallback)(()=>{\n        if (primarySelectedCellID !== null && !isEditing) {\n            updateCellsByID([\n                primarySelectedCellID,\n                ...selectedCellIDs\n            ], ()=>{\n                const root = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getRoot)();\n                root.clear();\n                root.append((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$createParagraphNode)());\n            });\n            return true;\n        } else if (isSelected) {\n            updateTableNode((tableNode)=>{\n                (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                tableNode.selectNext();\n                tableNode.remove();\n            });\n        }\n        return false;\n    }, [\n        isEditing,\n        isSelected,\n        primarySelectedCellID,\n        selectedCellIDs,\n        updateCellsByID,\n        updateTableNode\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{\n        const tableElem = tableRef.current;\n        if (tableElem === null) {\n            return;\n        }\n        const copyDataToClipboard = (event, htmlString, lexicalString, plainTextString)=>{\n            const clipboardData = event instanceof KeyboardEvent ? null : event.clipboardData;\n            event.preventDefault();\n            if (clipboardData != null) {\n                clipboardData.setData(\"text/html\", htmlString);\n                clipboardData.setData(\"text/plain\", plainTextString);\n                clipboardData.setData(\"application/x-lexical-editor\", lexicalString);\n            } else {\n                const clipboard = navigator.clipboard;\n                if (clipboard != null) {\n                    // Most browsers only support a single item in the clipboard at one time.\n                    // So we optimize by only putting in HTML.\n                    const data = [\n                        new ClipboardItem({\n                            \"text/html\": new Blob([\n                                htmlString\n                            ], {\n                                type: \"text/html\"\n                            })\n                        })\n                    ];\n                    clipboard.write(data);\n                }\n            }\n        };\n        const getTypeFromObject = async (clipboardData, type)=>{\n            try {\n                return clipboardData instanceof DataTransfer ? clipboardData.getData(type) : clipboardData instanceof ClipboardItem ? await (await clipboardData.getType(type)).text() : \"\";\n            } catch  {\n                return \"\";\n            }\n        };\n        const pasteContent = async (event)=>{\n            let clipboardData = (event instanceof InputEvent ? null : event.clipboardData) || null;\n            if (primarySelectedCellID !== null && cellEditor !== null) {\n                event.preventDefault();\n                if (clipboardData === null) {\n                    try {\n                        const items = await navigator.clipboard.read();\n                        clipboardData = items[0];\n                    } catch  {\n                    // NO-OP\n                    }\n                }\n                const lexicalString = clipboardData !== null ? await getTypeFromObject(clipboardData, \"application/x-lexical-editor\") : \"\";\n                if (lexicalString) {\n                    try {\n                        const payload = JSON.parse(lexicalString);\n                        if (payload.namespace === editor._config.namespace && Array.isArray(payload.nodes)) {\n                            $updateCells(rows, [\n                                primarySelectedCellID\n                            ], cellCoordMap, cellEditor, updateTableNode, ()=>{\n                                const root = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getRoot)();\n                                root.clear();\n                                root.append((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$createParagraphNode)());\n                                root.selectEnd();\n                                const nodes = (0,_lexical_clipboard__WEBPACK_IMPORTED_MODULE_1__.$generateNodesFromSerializedNodes)(payload.nodes);\n                                const sel = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n                                if ((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isRangeSelection)(sel)) {\n                                    (0,_lexical_clipboard__WEBPACK_IMPORTED_MODULE_1__.$insertGeneratedNodes)(cellEditor, nodes, sel);\n                                }\n                            });\n                            return;\n                        }\n                    // eslint-disable-next-line no-empty\n                    } catch  {}\n                }\n                const htmlString = clipboardData !== null ? await getTypeFromObject(clipboardData, \"text/html\") : \"\";\n                if (htmlString) {\n                    try {\n                        const parser = new DOMParser();\n                        const dom = parser.parseFromString(htmlString, \"text/html\");\n                        const possibleTableElement = dom.querySelector(\"table\");\n                        if (possibleTableElement != null) {\n                            const pasteRows = (0,_TableNode__WEBPACK_IMPORTED_MODULE_12__.extractRowsFromHTML)(possibleTableElement);\n                            updateTableNode((tableNode)=>{\n                                const [x, y] = cellCoordMap.get(primarySelectedCellID);\n                                (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$addUpdateTag)(\"history-push\");\n                                tableNode.mergeRows(x, y, pasteRows);\n                            });\n                            return;\n                        }\n                        $updateCells(rows, [\n                            primarySelectedCellID\n                        ], cellCoordMap, cellEditor, updateTableNode, ()=>{\n                            const root = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getRoot)();\n                            root.clear();\n                            root.append((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$createParagraphNode)());\n                            root.selectEnd();\n                            const nodes = (0,_lexical_html__WEBPACK_IMPORTED_MODULE_2__.$generateNodesFromDOM)(editor, dom);\n                            const sel = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n                            if ((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isRangeSelection)(sel)) {\n                                (0,_lexical_clipboard__WEBPACK_IMPORTED_MODULE_1__.$insertGeneratedNodes)(cellEditor, nodes, sel);\n                            }\n                        });\n                        return;\n                    // eslint-disable-next-line no-empty\n                    } catch  {}\n                }\n                // Multi-line plain text in rich text mode pasted as separate paragraphs\n                // instead of single paragraph with linebreaks.\n                const text = clipboardData !== null ? await getTypeFromObject(clipboardData, \"text/plain\") : \"\";\n                if (text != null) {\n                    $updateCells(rows, [\n                        primarySelectedCellID\n                    ], cellCoordMap, cellEditor, updateTableNode, ()=>{\n                        const root = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getRoot)();\n                        root.clear();\n                        root.selectEnd();\n                        const sel = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n                        if (sel !== null) {\n                            sel.insertRawText(text);\n                        }\n                    });\n                }\n            }\n        };\n        const copyPrimaryCell = (event)=>{\n            if (primarySelectedCellID !== null && cellEditor !== null) {\n                const cell = getCell(rows, primarySelectedCellID, cellCoordMap);\n                const json = cell.json;\n                const htmlString = _TableNode__WEBPACK_IMPORTED_MODULE_12__.cellHTMLCache.get(json) || null;\n                if (htmlString === null) {\n                    return;\n                }\n                const editorState = cellEditor.parseEditorState(json);\n                const plainTextString = editorState.read(()=>(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getRoot)().getTextContent());\n                const lexicalString = editorState.read(()=>{\n                    return JSON.stringify((0,_lexical_clipboard__WEBPACK_IMPORTED_MODULE_1__.$generateJSONFromSelectedNodes)(cellEditor, null));\n                });\n                copyDataToClipboard(event, htmlString, lexicalString, plainTextString);\n            }\n        };\n        const copyCellRange = (event)=>{\n            const lastCellID = lastCellIDRef.current;\n            if (primarySelectedCellID !== null && cellEditor !== null && lastCellID !== null) {\n                const rect = getSelectedRect(primarySelectedCellID, lastCellID, cellCoordMap);\n                if (rect === null) {\n                    return;\n                }\n                const dom = (0,_TableNode__WEBPACK_IMPORTED_MODULE_12__.exportTableCellsToHTML)(rows, rect);\n                const htmlString = dom.outerHTML;\n                const plainTextString = dom.outerText;\n                const tableNodeJSON = editor.getEditorState().read(()=>{\n                    const tableNode = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getNodeByKey)(nodeKey);\n                    return tableNode.exportJSON();\n                });\n                tableNodeJSON.rows = extractCellsFromRows(rows, rect);\n                const lexicalJSON = {\n                    namespace: cellEditor._config.namespace,\n                    nodes: [\n                        tableNodeJSON\n                    ]\n                };\n                const lexicalString = JSON.stringify(lexicalJSON);\n                copyDataToClipboard(event, htmlString, lexicalString, plainTextString);\n            }\n        };\n        const handlePaste = (event, activeEditor)=>{\n            const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n            if (primarySelectedCellID !== null && !isEditing && selection === null && activeEditor === editor) {\n                pasteContent(event);\n                mouseDownRef.current = false;\n                setSelectedCellIDs(NO_CELLS);\n                return true;\n            }\n            return false;\n        };\n        const handleCopy = (event, activeEditor)=>{\n            const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n            if (primarySelectedCellID !== null && !isEditing && selection === null && activeEditor === editor) {\n                if (selectedCellIDs.length === 0) {\n                    copyPrimaryCell(event);\n                } else {\n                    copyCellRange(event);\n                }\n                return true;\n            }\n            return false;\n        };\n        return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_6__.mergeRegister)(editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.CLICK_COMMAND, (payload)=>{\n            const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n            if ((0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isNodeSelection)(selection)) {\n                return true;\n            }\n            return false;\n        }, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.PASTE_COMMAND, handlePaste, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.COPY_COMMAND, handleCopy, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.CUT_COMMAND, (event, activeEditor)=>{\n            if (handleCopy(event, activeEditor)) {\n                clearCellsCommand();\n                return true;\n            }\n            return false;\n        }, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_BACKSPACE_COMMAND, clearCellsCommand, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_DELETE_COMMAND, clearCellsCommand, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.FORMAT_TEXT_COMMAND, (payload)=>{\n            if (primarySelectedCellID !== null && !isEditing) {\n                $updateCells(rows, [\n                    primarySelectedCellID,\n                    ...selectedCellIDs\n                ], cellCoordMap, cellEditor, updateTableNode, ()=>{\n                    const sel = $createSelectAll();\n                    sel.formatText(payload);\n                });\n                return true;\n            }\n            return false;\n        }, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_ENTER_COMMAND, (event, targetEditor)=>{\n            const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n            if (primarySelectedCellID === null && !isEditing && (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isNodeSelection)(selection) && selection.has(nodeKey) && selection.getNodes().length === 1 && targetEditor === editor) {\n                const firstCellID = rows[0].cells[0].id;\n                setPrimarySelectedCellID(firstCellID);\n                focusCell(tableElem, firstCellID);\n                event.preventDefault();\n                event.stopPropagation();\n                clearSelection();\n                return true;\n            }\n            return false;\n        }, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_TAB_COMMAND, (event)=>{\n            const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n            if (!isEditing && selection === null && primarySelectedCellID !== null) {\n                const isBackward = event.shiftKey;\n                const [x, y] = cellCoordMap.get(primarySelectedCellID);\n                event.preventDefault();\n                let nextX = null;\n                let nextY = null;\n                if (x === 0 && isBackward) {\n                    if (y !== 0) {\n                        nextY = y - 1;\n                        nextX = rows[nextY].cells.length - 1;\n                    }\n                } else if (x === rows[y].cells.length - 1 && !isBackward) {\n                    if (y !== rows.length - 1) {\n                        nextY = y + 1;\n                        nextX = 0;\n                    }\n                } else if (!isBackward) {\n                    nextX = x + 1;\n                    nextY = y;\n                } else {\n                    nextX = x - 1;\n                    nextY = y;\n                }\n                if (nextX !== null && nextY !== null) {\n                    modifySelectedCells(nextX, nextY, false);\n                    return true;\n                }\n            }\n            return false;\n        }, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_ARROW_UP_COMMAND, (event, targetEditor)=>{\n            const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n            if (!isEditing && selection === null) {\n                const extend = event.shiftKey;\n                const cellID = extend ? lastCellIDRef.current || primarySelectedCellID : primarySelectedCellID;\n                if (cellID !== null) {\n                    const [x, y] = cellCoordMap.get(cellID);\n                    if (y !== 0) {\n                        modifySelectedCells(x, y - 1, extend);\n                        return true;\n                    }\n                }\n            }\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isRangeSelection)(selection) || targetEditor !== cellEditor) {\n                return false;\n            }\n            if (selection.isCollapsed() && selection.anchor.getNode().getTopLevelElementOrThrow().getPreviousSibling() === null) {\n                event.preventDefault();\n                return true;\n            }\n            return false;\n        }, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_ARROW_DOWN_COMMAND, (event, targetEditor)=>{\n            const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n            if (!isEditing && selection === null) {\n                const extend = event.shiftKey;\n                const cellID = extend ? lastCellIDRef.current || primarySelectedCellID : primarySelectedCellID;\n                if (cellID !== null) {\n                    const [x, y] = cellCoordMap.get(cellID);\n                    if (y !== rows.length - 1) {\n                        modifySelectedCells(x, y + 1, extend);\n                        return true;\n                    }\n                }\n            }\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isRangeSelection)(selection) || targetEditor !== cellEditor) {\n                return false;\n            }\n            if (selection.isCollapsed() && selection.anchor.getNode().getTopLevelElementOrThrow().getNextSibling() === null) {\n                event.preventDefault();\n                return true;\n            }\n            return false;\n        }, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_ARROW_LEFT_COMMAND, (event, targetEditor)=>{\n            const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n            if (!isEditing && selection === null) {\n                const extend = event.shiftKey;\n                const cellID = extend ? lastCellIDRef.current || primarySelectedCellID : primarySelectedCellID;\n                if (cellID !== null) {\n                    const [x, y] = cellCoordMap.get(cellID);\n                    if (x !== 0) {\n                        modifySelectedCells(x - 1, y, extend);\n                        return true;\n                    }\n                }\n            }\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isRangeSelection)(selection) || targetEditor !== cellEditor) {\n                return false;\n            }\n            if (selection.isCollapsed() && selection.anchor.offset === 0) {\n                event.preventDefault();\n                return true;\n            }\n            return false;\n        }, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_ARROW_RIGHT_COMMAND, (event, targetEditor)=>{\n            const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n            if (!isEditing && selection === null) {\n                const extend = event.shiftKey;\n                const cellID = extend ? lastCellIDRef.current || primarySelectedCellID : primarySelectedCellID;\n                if (cellID !== null) {\n                    const [x, y] = cellCoordMap.get(cellID);\n                    if (x !== rows[y].cells.length - 1) {\n                        modifySelectedCells(x + 1, y, extend);\n                        return true;\n                    }\n                }\n            }\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isRangeSelection)(selection) || targetEditor !== cellEditor) {\n                return false;\n            }\n            if (selection.isCollapsed()) {\n                const anchor = selection.anchor;\n                if (anchor.type === \"text\" && anchor.offset === anchor.getNode().getTextContentSize() || anchor.type === \"element\" && anchor.offset === anchor.getNode().getChildrenSize()) {\n                    event.preventDefault();\n                    return true;\n                }\n            }\n            return false;\n        }, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical__WEBPACK_IMPORTED_MODULE_7__.KEY_ESCAPE_COMMAND, (event, targetEditor)=>{\n            const selection = (0,lexical__WEBPACK_IMPORTED_MODULE_7__.$getSelection)();\n            if (!isEditing && selection === null && targetEditor === editor) {\n                setSelected(true);\n                setPrimarySelectedCellID(null);\n                selectTable();\n                return true;\n            }\n            if (!(0,lexical__WEBPACK_IMPORTED_MODULE_7__.$isRangeSelection)(selection)) {\n                return false;\n            }\n            if (isEditing) {\n                saveEditorToJSON();\n                setIsEditing(false);\n                if (primarySelectedCellID !== null) {\n                    setTimeout(()=>{\n                        focusCell(tableElem, primarySelectedCellID);\n                    }, 20);\n                }\n                return true;\n            }\n            return false;\n        }, lexical__WEBPACK_IMPORTED_MODULE_7__.COMMAND_PRIORITY_LOW));\n    }, [\n        cellCoordMap,\n        cellEditor,\n        clearCellsCommand,\n        clearSelection,\n        editor,\n        isEditing,\n        modifySelectedCells,\n        nodeKey,\n        primarySelectedCellID,\n        rows,\n        saveEditorToJSON,\n        selectTable,\n        selectedCellIDs,\n        setSelected,\n        updateTableNode\n    ]);\n    if (cellEditor === null) {\n        return;\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            position: \"relative\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"table\", {\n                className: `${theme.table} ${isSelected ? theme.tableSelected : \"\"}`,\n                ref: tableRef,\n                tabIndex: -1,\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tbody\", {\n                    children: rows.map((row)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                            className: theme.tableRow,\n                            children: row.cells.map((cell)=>{\n                                const { id } = cell;\n                                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(TableCell, {\n                                    cell: cell,\n                                    theme: theme,\n                                    isSelected: selectedCellSet.has(id),\n                                    isPrimarySelected: primarySelectedCellID === id,\n                                    isEditing: isEditing,\n                                    sortingOptions: sortingOptions,\n                                    cellEditor: cellEditor,\n                                    updateCellsByID: updateCellsByID,\n                                    updateTableNode: updateTableNode,\n                                    cellCoordMap: cellCoordMap,\n                                    rows: rows,\n                                    setSortingOptions: setSortingOptions\n                                }, id, false, {\n                                    fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                                    lineNumber: 1747,\n                                    columnNumber: 19\n                                }, this);\n                            })\n                        }, row.id, false, {\n                            fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                            lineNumber: 1743,\n                            columnNumber: 13\n                        }, this))\n                }, void 0, false, {\n                    fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                    lineNumber: 1741,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 1736,\n                columnNumber: 7\n            }, this),\n            showAddColumns && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                className: theme.tableAddColumns,\n                onClick: addColumns\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 1769,\n                columnNumber: 9\n            }, this),\n            showAddRows && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                className: theme.tableAddRows,\n                onClick: addRows,\n                ref: addRowsRef\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 1772,\n                columnNumber: 9\n            }, this),\n            resizingID !== null && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: theme.tableResizeRuler,\n                ref: tableResizerRulerRef\n            }, void 0, false, {\n                fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n                lineNumber: 1779,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/saheliandev/Desktop/Personnal/Site-minist-re/src/components/Lexical/nodes/TableComponent.tsx\",\n        lineNumber: 1735,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/components/Lexical/nodes/TableComponent.tsx\n");

/***/ })

};
;