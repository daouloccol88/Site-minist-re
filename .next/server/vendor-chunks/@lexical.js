"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@lexical";
exports.ids = ["vendor-chunks/@lexical"];
exports.modules = {

/***/ "(ssr)/./node_modules/@lexical/clipboard/LexicalClipboard.dev.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@lexical/clipboard/LexicalClipboard.dev.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar html = __webpack_require__(/*! @lexical/html */ \"(ssr)/./node_modules/@lexical/html/LexicalHtml.js\");\nvar selection = __webpack_require__(/*! @lexical/selection */ \"(ssr)/./node_modules/@lexical/selection/LexicalSelection.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $getHtmlContent(editor) {\n  const selection = lexical.$getSelection();\n\n  if (selection == null) {\n    {\n      throw Error(`Expected valid LexicalSelection`);\n    }\n  } // If we haven't selected anything\n\n\n  if (lexical.$isRangeSelection(selection) && selection.isCollapsed() || selection.getNodes().length === 0) {\n    return '';\n  }\n\n  return html.$generateHtmlFromNodes(editor, selection);\n} // TODO 0.6.0 Return a blank string instead\n// TODO 0.6.0 Rename to $getJSON\n\nfunction $getLexicalContent(editor) {\n  const selection = lexical.$getSelection();\n\n  if (selection == null) {\n    {\n      throw Error(`Expected valid LexicalSelection`);\n    }\n  } // If we haven't selected anything\n\n\n  if (lexical.$isRangeSelection(selection) && selection.isCollapsed() || selection.getNodes().length === 0) {\n    return null;\n  }\n\n  return JSON.stringify($generateJSONFromSelectedNodes(editor, selection));\n}\nfunction $insertDataTransferForPlainText(dataTransfer, selection) {\n  const text = dataTransfer.getData('text/plain');\n\n  if (text != null) {\n    selection.insertRawText(text);\n  }\n}\nfunction $insertDataTransferForRichText(dataTransfer, selection, editor) {\n  const lexicalString = dataTransfer.getData('application/x-lexical-editor');\n\n  if (lexicalString) {\n    try {\n      const payload = JSON.parse(lexicalString);\n\n      if (payload.namespace === editor._config.namespace && Array.isArray(payload.nodes)) {\n        const nodes = $generateNodesFromSerializedNodes(payload.nodes);\n        return $insertGeneratedNodes(editor, nodes, selection);\n      }\n    } catch {// Fail silently.\n    }\n  }\n\n  const htmlString = dataTransfer.getData('text/html');\n\n  if (htmlString) {\n    try {\n      const parser = new DOMParser();\n      const dom = parser.parseFromString(htmlString, 'text/html');\n      const nodes = html.$generateNodesFromDOM(editor, dom);\n      return $insertGeneratedNodes(editor, nodes, selection);\n    } catch {// Fail silently.\n    }\n  } // Multi-line plain text in rich text mode pasted as separate paragraphs\n  // instead of single paragraph with linebreaks.\n\n\n  const text = dataTransfer.getData('text/plain');\n\n  if (text != null) {\n    if (lexical.$isRangeSelection(selection)) {\n      const lines = text.split(/\\r?\\n/);\n      const linesLength = lines.length;\n\n      for (let i = 0; i < linesLength; i++) {\n        selection.insertText(lines[i]);\n\n        if (i < linesLength - 1) {\n          selection.insertParagraph();\n        }\n      }\n    } else {\n      selection.insertRawText(text);\n    }\n  }\n}\nfunction $insertGeneratedNodes(editor, nodes, selection) {\n  const isSelectionInsideOfGrid = lexical.DEPRECATED_$isGridSelection(selection) || utils.$findMatchingParent(selection.anchor.getNode(), n => lexical.DEPRECATED_$isGridCellNode(n)) !== null && utils.$findMatchingParent(selection.focus.getNode(), n => lexical.DEPRECATED_$isGridCellNode(n)) !== null;\n\n  if (isSelectionInsideOfGrid && nodes.length === 1 && lexical.DEPRECATED_$isGridNode(nodes[0])) {\n    $mergeGridNodesStrategy(nodes, selection, false, editor);\n    return;\n  }\n\n  $basicInsertStrategy(nodes, selection);\n  return;\n}\n\nfunction $basicInsertStrategy(nodes, selection) {\n  // Wrap text and inline nodes in paragraph nodes so we have all blocks at the top-level\n  const topLevelBlocks = [];\n  let currentBlock = null;\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const isLineBreakNode = lexical.$isLineBreakNode(node);\n\n    if (isLineBreakNode || lexical.$isDecoratorNode(node) && node.isInline() || lexical.$isElementNode(node) && node.isInline() || lexical.$isTextNode(node) || node.isParentRequired()) {\n      if (currentBlock === null) {\n        currentBlock = node.createParentElementNode();\n        topLevelBlocks.push(currentBlock); // In the case of LineBreakNode, we just need to\n        // add an empty ParagraphNode to the topLevelBlocks.\n\n        if (isLineBreakNode) {\n          continue;\n        }\n      }\n\n      if (currentBlock !== null) {\n        currentBlock.append(node);\n      }\n    } else {\n      topLevelBlocks.push(node);\n      currentBlock = null;\n    }\n  }\n\n  if (lexical.$isRangeSelection(selection)) {\n    selection.insertNodes(topLevelBlocks);\n  } else if (lexical.DEPRECATED_$isGridSelection(selection)) {\n    // If there's an active grid selection and a non grid is pasted, add to the anchor.\n    const anchorCell = selection.anchor.getNode();\n\n    if (!lexical.DEPRECATED_$isGridCellNode(anchorCell)) {\n      {\n        throw Error(`Expected Grid Cell in Grid Selection`);\n      }\n    }\n\n    anchorCell.append(...topLevelBlocks);\n  }\n}\n\nfunction $mergeGridNodesStrategy(nodes, selection, isFromLexical, editor) {\n  if (nodes.length !== 1 || !lexical.DEPRECATED_$isGridNode(nodes[0])) {\n    {\n      throw Error(`$mergeGridNodesStrategy: Expected Grid insertion.`);\n    }\n  }\n\n  const newGrid = nodes[0];\n  const newGridRows = newGrid.getChildren();\n  const newColumnCount = newGrid.getFirstChildOrThrow().getChildrenSize();\n  const newRowCount = newGrid.getChildrenSize();\n  const gridCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => lexical.DEPRECATED_$isGridCellNode(n));\n  const gridRowNode = gridCellNode && utils.$findMatchingParent(gridCellNode, n => lexical.DEPRECATED_$isGridRowNode(n));\n  const gridNode = gridRowNode && utils.$findMatchingParent(gridRowNode, n => lexical.DEPRECATED_$isGridNode(n));\n\n  if (!lexical.DEPRECATED_$isGridCellNode(gridCellNode) || !lexical.DEPRECATED_$isGridRowNode(gridRowNode) || !lexical.DEPRECATED_$isGridNode(gridNode)) {\n    {\n      throw Error(`$mergeGridNodesStrategy: Expected selection to be inside of a Grid.`);\n    }\n  }\n\n  const startY = gridRowNode.getIndexWithinParent();\n  const stopY = Math.min(gridNode.getChildrenSize() - 1, startY + newRowCount - 1);\n  const startX = gridCellNode.getIndexWithinParent();\n  const stopX = Math.min(gridRowNode.getChildrenSize() - 1, startX + newColumnCount - 1);\n  const fromX = Math.min(startX, stopX);\n  const fromY = Math.min(startY, stopY);\n  const toX = Math.max(startX, stopX);\n  const toY = Math.max(startY, stopY);\n  const gridRowNodes = gridNode.getChildren();\n  let newRowIdx = 0;\n  let newAnchorCellKey;\n  let newFocusCellKey;\n\n  for (let r = fromY; r <= toY; r++) {\n    const currentGridRowNode = gridRowNodes[r];\n\n    if (!lexical.DEPRECATED_$isGridRowNode(currentGridRowNode)) {\n      {\n        throw Error(`getNodes: expected to find GridRowNode`);\n      }\n    }\n\n    const newGridRowNode = newGridRows[newRowIdx];\n\n    if (!lexical.DEPRECATED_$isGridRowNode(newGridRowNode)) {\n      {\n        throw Error(`getNodes: expected to find GridRowNode`);\n      }\n    }\n\n    const gridCellNodes = currentGridRowNode.getChildren();\n    const newGridCellNodes = newGridRowNode.getChildren();\n    let newColumnIdx = 0;\n\n    for (let c = fromX; c <= toX; c++) {\n      const currentGridCellNode = gridCellNodes[c];\n\n      if (!lexical.DEPRECATED_$isGridCellNode(currentGridCellNode)) {\n        {\n          throw Error(`getNodes: expected to find GridCellNode`);\n        }\n      }\n\n      const newGridCellNode = newGridCellNodes[newColumnIdx];\n\n      if (!lexical.DEPRECATED_$isGridCellNode(newGridCellNode)) {\n        {\n          throw Error(`getNodes: expected to find GridCellNode`);\n        }\n      }\n\n      if (r === fromY && c === fromX) {\n        newAnchorCellKey = currentGridCellNode.getKey();\n      } else if (r === toY && c === toX) {\n        newFocusCellKey = currentGridCellNode.getKey();\n      }\n\n      const originalChildren = currentGridCellNode.getChildren();\n      newGridCellNode.getChildren().forEach(child => {\n        if (lexical.$isTextNode(child)) {\n          const paragraphNode = lexical.$createParagraphNode();\n          paragraphNode.append(child);\n          currentGridCellNode.append(child);\n        } else {\n          currentGridCellNode.append(child);\n        }\n      });\n      originalChildren.forEach(n => n.remove());\n      newColumnIdx++;\n    }\n\n    newRowIdx++;\n  }\n\n  if (newAnchorCellKey && newFocusCellKey) {\n    const newGridSelection = lexical.DEPRECATED_$createGridSelection();\n    newGridSelection.set(gridNode.getKey(), newAnchorCellKey, newFocusCellKey);\n    lexical.$setSelection(newGridSelection);\n    editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n  }\n}\n\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor; // @ts-expect-error TODO Replace Class utility type with InstanceType\n\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .exportJSON().`);\n    }\n  } // @ts-expect-error TODO Replace Class utility type with InstanceType\n\n\n  const serializedChildren = serializedNode.children;\n\n  if (lexical.$isElementNode(node)) {\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n  }\n\n  return serializedNode;\n}\n\nfunction $appendNodesToJSON(editor, selection$1, currentNode, targetArray = []) {\n  let shouldInclude = selection$1 != null ? currentNode.isSelected(selection$1) : true;\n  const shouldExclude = lexical.$isElementNode(currentNode) && currentNode.excludeFromCopy('html');\n  let target = currentNode;\n\n  if (selection$1 !== null) {\n    let clone = selection.$cloneWithProperties(currentNode);\n    clone = lexical.$isTextNode(clone) && selection$1 != null ? selection.$sliceSelectedTextNodeContent(selection$1, clone) : clone;\n    target = clone;\n  }\n\n  const children = lexical.$isElementNode(target) ? target.getChildren() : [];\n  const serializedNode = exportNodeToJSON(target); // TODO: TextNode calls getTextContent() (NOT node.__text) within it's exportJSON method\n  // which uses getLatest() to get the text from the original node with the same key.\n  // This is a deeper issue with the word \"clone\" here, it's still a reference to the\n  // same node as far as the LexicalEditor is concerned since it shares a key.\n  // We need a way to create a clone of a Node in memory with it's own key, but\n  // until then this hack will work for the selected text extract use case.\n\n  if (lexical.$isTextNode(target)) {\n    const text = target.__text; // If an uncollapsed selection ends or starts at the end of a line of specialized,\n    // TextNodes, such as code tokens, we will get a 'blank' TextNode here, i.e., one\n    // with text of length 0. We don't want this, it makes a confusing mess. Reset!\n\n    if (text.length > 0) {\n      serializedNode.text = text;\n    } else {\n      shouldInclude = false;\n    }\n  }\n\n  for (let i = 0; i < children.length; i++) {\n    const childNode = children[i];\n    const shouldIncludeChild = $appendNodesToJSON(editor, selection$1, childNode, serializedNode.children);\n\n    if (!shouldInclude && lexical.$isElementNode(currentNode) && shouldIncludeChild && currentNode.extractWithChild(childNode, selection$1, 'clone')) {\n      shouldInclude = true;\n    }\n  }\n\n  if (shouldInclude && !shouldExclude) {\n    targetArray.push(serializedNode);\n  } else if (Array.isArray(serializedNode.children)) {\n    for (let i = 0; i < serializedNode.children.length; i++) {\n      const serializedChildNode = serializedNode.children[i];\n      targetArray.push(serializedChildNode);\n    }\n  }\n\n  return shouldInclude;\n} // TODO why $ function with Editor instance?\n\n\nfunction $generateJSONFromSelectedNodes(editor, selection) {\n  const nodes = [];\n  const root = lexical.$getRoot();\n  const topLevelChildren = root.getChildren();\n\n  for (let i = 0; i < topLevelChildren.length; i++) {\n    const topLevelNode = topLevelChildren[i];\n    $appendNodesToJSON(editor, selection, topLevelNode, nodes);\n  }\n\n  return {\n    namespace: editor._config.namespace,\n    nodes\n  };\n}\nfunction $generateNodesFromSerializedNodes(serializedNodes) {\n  const nodes = [];\n\n  for (let i = 0; i < serializedNodes.length; i++) {\n    const serializedNode = serializedNodes[i];\n    const node = lexical.$parseSerializedNode(serializedNode);\n\n    if (lexical.$isTextNode(node)) {\n      selection.$addNodeStyle(node);\n    }\n\n    nodes.push(node);\n  }\n\n  return nodes;\n}\nconst EVENT_LATENCY = 50;\nlet clipboardEventTimeout = null; // TODO custom selection\n// TODO potentially have a node customizable version for plain text\n\nasync function copyToClipboard(editor, event) {\n  if (clipboardEventTimeout !== null) {\n    // Prevent weird race conditions that can happen when this function is run multiple times\n    // synchronously. In the future, we can do better, we can cancel/override the previously running job.\n    return false;\n  }\n\n  if (event !== null) {\n    return new Promise((resolve, reject) => {\n      editor.update(() => {\n        resolve($copyToClipboardEvent(editor, event));\n      });\n    });\n  }\n\n  const rootElement = editor.getRootElement();\n  const domSelection = document.getSelection();\n\n  if (rootElement === null || domSelection === null) {\n    return false;\n  }\n\n  const element = document.createElement('span');\n  element.style.cssText = 'position: fixed; top: -1000px;';\n  element.append(document.createTextNode('#'));\n  rootElement.append(element);\n  const range = new Range();\n  range.setStart(element, 0);\n  range.setEnd(element, 1);\n  domSelection.removeAllRanges();\n  domSelection.addRange(range);\n  return new Promise((resolve, reject) => {\n    const removeListener = editor.registerCommand(lexical.COPY_COMMAND, secondEvent => {\n      if (secondEvent instanceof ClipboardEvent) {\n        removeListener();\n\n        if (clipboardEventTimeout !== null) {\n          window.clearTimeout(clipboardEventTimeout);\n          clipboardEventTimeout = null;\n        }\n\n        resolve($copyToClipboardEvent(editor, secondEvent));\n      } // Block the entire copy flow while we wait for the next ClipboardEvent\n\n\n      return true;\n    }, lexical.COMMAND_PRIORITY_CRITICAL); // If the above hack execCommand hack works, this timeout code should never fire. Otherwise,\n    // the listener will be quickly freed so that the user can reuse it again\n\n    clipboardEventTimeout = window.setTimeout(() => {\n      removeListener();\n      clipboardEventTimeout = null;\n      resolve(false);\n    }, EVENT_LATENCY);\n    document.execCommand('copy');\n    element.remove();\n  });\n} // TODO shouldn't pass editor (pass namespace directly)\n\nfunction $copyToClipboardEvent(editor, event) {\n  const domSelection = window.getSelection();\n\n  if (!domSelection) {\n    return false;\n  }\n\n  const anchorDOM = domSelection.anchorNode;\n  const focusDOM = domSelection.focusNode;\n\n  if (anchorDOM !== null && focusDOM !== null && !lexical.isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n    return false;\n  }\n\n  event.preventDefault();\n  const clipboardData = event.clipboardData;\n  const selection = lexical.$getSelection();\n\n  if (clipboardData === null || selection === null) {\n    return false;\n  }\n\n  const htmlString = $getHtmlContent(editor);\n  const lexicalString = $getLexicalContent(editor);\n  let plainString = '';\n\n  if (selection !== null) {\n    plainString = selection.getTextContent();\n  }\n\n  if (htmlString !== null) {\n    clipboardData.setData('text/html', htmlString);\n  }\n\n  if (lexicalString !== null) {\n    clipboardData.setData('application/x-lexical-editor', lexicalString);\n  }\n\n  clipboardData.setData('text/plain', plainString);\n  return true;\n}\n\nexports.$generateJSONFromSelectedNodes = $generateJSONFromSelectedNodes;\nexports.$generateNodesFromSerializedNodes = $generateNodesFromSerializedNodes;\nexports.$getHtmlContent = $getHtmlContent;\nexports.$getLexicalContent = $getLexicalContent;\nexports.$insertDataTransferForPlainText = $insertDataTransferForPlainText;\nexports.$insertDataTransferForRichText = $insertDataTransferForRichText;\nexports.$insertGeneratedNodes = $insertGeneratedNodes;\nexports.copyToClipboard = copyToClipboard;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/clipboard/LexicalClipboard.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/clipboard/LexicalClipboard.js":
/*!*************************************************************!*\
  !*** ./node_modules/@lexical/clipboard/LexicalClipboard.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalClipboard =  true ? __webpack_require__(/*! ./LexicalClipboard.dev.js */ \"(ssr)/./node_modules/@lexical/clipboard/LexicalClipboard.dev.js\") : 0\nmodule.exports = LexicalClipboard;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvY2xpcGJvYXJkL0xleGljYWxDbGlwYm9hcmQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWix5QkFBeUIsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLGtHQUEyQixJQUFJLENBQXFDO0FBQzlJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvY2xpcGJvYXJkL0xleGljYWxDbGlwYm9hcmQuanM/OTk4OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgTGV4aWNhbENsaXBib2FyZCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gcmVxdWlyZSgnLi9MZXhpY2FsQ2xpcGJvYXJkLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsQ2xpcGJvYXJkLnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsQ2xpcGJvYXJkOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/clipboard/LexicalClipboard.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/code/LexicalCode.dev.js":
/*!*******************************************************!*\
  !*** ./node_modules/@lexical/code/LexicalCode.dev.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar Prism = __webpack_require__(/*! prismjs */ \"(ssr)/./node_modules/prismjs/prism.js\");\n__webpack_require__(/*! prismjs/components/prism-clike */ \"(ssr)/./node_modules/prismjs/components/prism-clike.js\");\n__webpack_require__(/*! prismjs/components/prism-javascript */ \"(ssr)/./node_modules/prismjs/components/prism-javascript.js\");\n__webpack_require__(/*! prismjs/components/prism-markup */ \"(ssr)/./node_modules/prismjs/components/prism-markup.js\");\n__webpack_require__(/*! prismjs/components/prism-markdown */ \"(ssr)/./node_modules/prismjs/components/prism-markdown.js\");\n__webpack_require__(/*! prismjs/components/prism-c */ \"(ssr)/./node_modules/prismjs/components/prism-c.js\");\n__webpack_require__(/*! prismjs/components/prism-css */ \"(ssr)/./node_modules/prismjs/components/prism-css.js\");\n__webpack_require__(/*! prismjs/components/prism-objectivec */ \"(ssr)/./node_modules/prismjs/components/prism-objectivec.js\");\n__webpack_require__(/*! prismjs/components/prism-sql */ \"(ssr)/./node_modules/prismjs/components/prism-sql.js\");\n__webpack_require__(/*! prismjs/components/prism-python */ \"(ssr)/./node_modules/prismjs/components/prism-python.js\");\n__webpack_require__(/*! prismjs/components/prism-rust */ \"(ssr)/./node_modules/prismjs/components/prism-rust.js\");\n__webpack_require__(/*! prismjs/components/prism-swift */ \"(ssr)/./node_modules/prismjs/components/prism-swift.js\");\n__webpack_require__(/*! prismjs/components/prism-typescript */ \"(ssr)/./node_modules/prismjs/components/prism-typescript.js\");\n__webpack_require__(/*! prismjs/components/prism-java */ \"(ssr)/./node_modules/prismjs/components/prism-java.js\");\n__webpack_require__(/*! prismjs/components/prism-cpp */ \"(ssr)/./node_modules/prismjs/components/prism-cpp.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst mapToPrismLanguage = language => {\n  // eslint-disable-next-line no-prototype-builtins\n  return language != null && Prism.languages.hasOwnProperty(language) ? language : undefined;\n};\n\nfunction hasChildDOMNodeTag(node, tagName) {\n  for (const child of node.childNodes) {\n    if (utils.isHTMLElement(child) && child.tagName === tagName) {\n      return true;\n    }\n\n    hasChildDOMNodeTag(child, tagName);\n  }\n\n  return false;\n}\n\nconst LANGUAGE_DATA_ATTRIBUTE = 'data-highlight-language';\n/** @noInheritDoc */\n\nclass CodeNode extends lexical.ElementNode {\n  /** @internal */\n  static getType() {\n    return 'code';\n  }\n\n  static clone(node) {\n    return new CodeNode(node.__language, node.__key);\n  }\n\n  constructor(language, key) {\n    super(key);\n    this.__language = mapToPrismLanguage(language);\n  } // View\n\n\n  createDOM(config) {\n    const element = document.createElement('code');\n    utils.addClassNamesToElement(element, config.theme.code);\n    element.setAttribute('spellcheck', 'false');\n    const language = this.getLanguage();\n\n    if (language) {\n      element.setAttribute(LANGUAGE_DATA_ATTRIBUTE, language);\n    }\n\n    return element;\n  }\n\n  updateDOM(prevNode, dom, config) {\n    const language = this.__language;\n    const prevLanguage = prevNode.__language;\n\n    if (language) {\n      if (language !== prevLanguage) {\n        dom.setAttribute(LANGUAGE_DATA_ATTRIBUTE, language);\n      }\n    } else if (prevLanguage) {\n      dom.removeAttribute(LANGUAGE_DATA_ATTRIBUTE);\n    }\n\n    return false;\n  }\n\n  static importDOM() {\n    return {\n      // Typically <pre> is used for code blocks, and <code> for inline code styles\n      // but if it's a multi line <code> we'll create a block. Pass through to\n      // inline format handled by TextNode otherwise.\n      code: node => {\n        const isMultiLine = node.textContent != null && (/\\r?\\n/.test(node.textContent) || hasChildDOMNodeTag(node, 'BR'));\n        return isMultiLine ? {\n          conversion: convertPreElement,\n          priority: 1\n        } : null;\n      },\n      div: node => ({\n        conversion: convertDivElement,\n        priority: 1\n      }),\n      pre: node => ({\n        conversion: convertPreElement,\n        priority: 0\n      }),\n      table: node => {\n        const table = node; // domNode is a <table> since we matched it by nodeName\n\n        if (isGitHubCodeTable(table)) {\n          return {\n            conversion: convertTableElement,\n            priority: 3\n          };\n        }\n\n        return null;\n      },\n      td: node => {\n        // element is a <td> since we matched it by nodeName\n        const td = node;\n        const table = td.closest('table');\n\n        if (isGitHubCodeCell(td)) {\n          return {\n            conversion: convertTableCellElement,\n            priority: 3\n          };\n        }\n\n        if (table && isGitHubCodeTable(table)) {\n          // Return a no-op if it's a table cell in a code table, but not a code line.\n          // Otherwise it'll fall back to the T\n          return {\n            conversion: convertCodeNoop,\n            priority: 3\n          };\n        }\n\n        return null;\n      },\n      tr: node => {\n        // element is a <tr> since we matched it by nodeName\n        const tr = node;\n        const table = tr.closest('table');\n\n        if (table && isGitHubCodeTable(table)) {\n          return {\n            conversion: convertCodeNoop,\n            priority: 3\n          };\n        }\n\n        return null;\n      }\n    };\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createCodeNode(serializedNode.language);\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      language: this.getLanguage(),\n      type: 'code',\n      version: 1\n    };\n  } // Mutation\n\n\n  insertNewAfter(selection, restoreSelection = true) {\n    const children = this.getChildren();\n    const childrenLength = children.length;\n\n    if (childrenLength >= 2 && children[childrenLength - 1].getTextContent() === '\\n' && children[childrenLength - 2].getTextContent() === '\\n' && selection.isCollapsed() && selection.anchor.key === this.__key && selection.anchor.offset === childrenLength) {\n      children[childrenLength - 1].remove();\n      children[childrenLength - 2].remove();\n      const newElement = lexical.$createParagraphNode();\n      this.insertAfter(newElement, restoreSelection);\n      return newElement;\n    } // If the selection is within the codeblock, find all leading tabs and\n    // spaces of the current line. Create a new line that has all those\n    // tabs and spaces, such that leading indentation is preserved.\n\n\n    const anchor = selection.anchor.getNode();\n    const firstNode = getFirstCodeHighlightNodeOfLine(anchor);\n\n    if (firstNode != null) {\n      let leadingWhitespace = 0;\n      const firstNodeText = firstNode.getTextContent();\n\n      while (leadingWhitespace < firstNodeText.length && /[\\t ]/.test(firstNodeText[leadingWhitespace])) {\n        leadingWhitespace += 1;\n      }\n\n      if (leadingWhitespace > 0) {\n        const whitespace = firstNodeText.substring(0, leadingWhitespace);\n        const indentedChild = $createCodeHighlightNode(whitespace);\n        anchor.insertAfter(indentedChild);\n        selection.insertNodes([lexical.$createLineBreakNode()]);\n        indentedChild.select();\n        return indentedChild;\n      }\n    }\n\n    return null;\n  }\n\n  canInsertTab() {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection) || !selection.isCollapsed()) {\n      return false;\n    }\n\n    return true;\n  }\n\n  canIndent() {\n    return false;\n  }\n\n  collapseAtStart() {\n    const paragraph = lexical.$createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => paragraph.append(child));\n    this.replace(paragraph);\n    return true;\n  }\n\n  setLanguage(language) {\n    const writable = this.getWritable();\n    writable.__language = mapToPrismLanguage(language);\n  }\n\n  getLanguage() {\n    return this.getLatest().__language;\n  }\n\n}\nfunction $createCodeNode(language) {\n  return lexical.$applyNodeReplacement(new CodeNode(language));\n}\nfunction $isCodeNode(node) {\n  return node instanceof CodeNode;\n}\n\nfunction convertPreElement(domNode) {\n  return {\n    node: $createCodeNode(),\n    preformatted: true\n  };\n}\n\nfunction convertDivElement(domNode) {\n  // domNode is a <div> since we matched it by nodeName\n  const div = domNode;\n  const isCode = isCodeElement(div);\n\n  if (!isCode && !isCodeChildElement(div)) {\n    return {\n      node: null\n    };\n  }\n\n  return {\n    after: childLexicalNodes => {\n      const domParent = domNode.parentNode;\n\n      if (domParent != null && domNode !== domParent.lastChild) {\n        childLexicalNodes.push(lexical.$createLineBreakNode());\n      }\n\n      return childLexicalNodes;\n    },\n    node: isCode ? $createCodeNode() : null,\n    preformatted: isCode\n  };\n}\n\nfunction convertTableElement() {\n  return {\n    node: $createCodeNode(),\n    preformatted: true\n  };\n}\n\nfunction convertCodeNoop() {\n  return {\n    node: null\n  };\n}\n\nfunction convertTableCellElement(domNode) {\n  // domNode is a <td> since we matched it by nodeName\n  const cell = domNode;\n  return {\n    after: childLexicalNodes => {\n      if (cell.parentNode && cell.parentNode.nextSibling) {\n        // Append newline between code lines\n        childLexicalNodes.push(lexical.$createLineBreakNode());\n      }\n\n      return childLexicalNodes;\n    },\n    node: null\n  };\n}\n\nfunction isCodeElement(div) {\n  return div.style.fontFamily.match('monospace') !== null;\n}\n\nfunction isCodeChildElement(node) {\n  let parent = node.parentElement;\n\n  while (parent !== null) {\n    if (isCodeElement(parent)) {\n      return true;\n    }\n\n    parent = parent.parentElement;\n  }\n\n  return false;\n}\n\nfunction isGitHubCodeCell(cell) {\n  return cell.classList.contains('js-file-line');\n}\n\nfunction isGitHubCodeTable(table) {\n  return table.classList.contains('js-file-line-container');\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst DEFAULT_CODE_LANGUAGE = 'javascript';\nconst CODE_LANGUAGE_FRIENDLY_NAME_MAP = {\n  c: 'C',\n  clike: 'C-like',\n  cpp: 'C++',\n  css: 'CSS',\n  html: 'HTML',\n  java: 'Java',\n  js: 'JavaScript',\n  markdown: 'Markdown',\n  objc: 'Objective-C',\n  plain: 'Plain Text',\n  py: 'Python',\n  rust: 'Rust',\n  sql: 'SQL',\n  swift: 'Swift',\n  typescript: 'TypeScript',\n  xml: 'XML'\n};\nconst CODE_LANGUAGE_MAP = {\n  cpp: 'cpp',\n  java: 'java',\n  javascript: 'js',\n  md: 'markdown',\n  plaintext: 'plain',\n  python: 'py',\n  text: 'plain',\n  ts: 'typescript'\n};\nfunction normalizeCodeLang(lang) {\n  return CODE_LANGUAGE_MAP[lang] || lang;\n}\nfunction getLanguageFriendlyName(lang) {\n  const _lang = normalizeCodeLang(lang);\n\n  return CODE_LANGUAGE_FRIENDLY_NAME_MAP[_lang] || _lang;\n}\nconst getDefaultCodeLanguage = () => DEFAULT_CODE_LANGUAGE;\nconst getCodeLanguages = () => Object.keys(Prism.languages).filter( // Prism has several language helpers mixed into languages object\n// so filtering them out here to get langs list\nlanguage => typeof Prism.languages[language] !== 'function').sort();\n/** @noInheritDoc */\n\nclass CodeHighlightNode extends lexical.TextNode {\n  /** @internal */\n  constructor(text, highlightType, key) {\n    super(text, key);\n    this.__highlightType = highlightType;\n  }\n\n  static getType() {\n    return 'code-highlight';\n  }\n\n  static clone(node) {\n    return new CodeHighlightNode(node.__text, node.__highlightType || undefined, node.__key);\n  }\n\n  getHighlightType() {\n    const self = this.getLatest();\n    return self.__highlightType;\n  }\n\n  createDOM(config) {\n    const element = super.createDOM(config);\n    const className = getHighlightThemeClass(config.theme, this.__highlightType);\n    utils.addClassNamesToElement(element, className);\n    return element;\n  }\n\n  updateDOM(prevNode, dom, config) {\n    const update = super.updateDOM(prevNode, dom, config);\n    const prevClassName = getHighlightThemeClass(config.theme, prevNode.__highlightType);\n    const nextClassName = getHighlightThemeClass(config.theme, this.__highlightType);\n\n    if (prevClassName !== nextClassName) {\n      if (prevClassName) {\n        utils.removeClassNamesFromElement(dom, prevClassName);\n      }\n\n      if (nextClassName) {\n        utils.addClassNamesToElement(dom, nextClassName);\n      }\n    }\n\n    return update;\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createCodeHighlightNode(serializedNode.text, serializedNode.highlightType);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      highlightType: this.getHighlightType(),\n      type: 'code-highlight',\n      version: 1\n    };\n  } // Prevent formatting (bold, underline, etc)\n\n\n  setFormat(format) {\n    return this;\n  }\n\n  isParentRequired() {\n    return true;\n  }\n\n  createParentElementNode() {\n    return $createCodeNode();\n  }\n\n}\n\nfunction getHighlightThemeClass(theme, highlightType) {\n  return highlightType && theme && theme.codeHighlight && theme.codeHighlight[highlightType];\n}\n\nfunction $createCodeHighlightNode(text, highlightType) {\n  return lexical.$applyNodeReplacement(new CodeHighlightNode(text, highlightType));\n}\nfunction $isCodeHighlightNode(node) {\n  return node instanceof CodeHighlightNode;\n}\nfunction getFirstCodeHighlightNodeOfLine(anchor) {\n  let currentNode = null;\n  const previousSiblings = anchor.getPreviousSiblings();\n  previousSiblings.push(anchor);\n\n  while (previousSiblings.length > 0) {\n    const node = previousSiblings.pop();\n\n    if ($isCodeHighlightNode(node)) {\n      currentNode = node;\n    }\n\n    if (lexical.$isLineBreakNode(node)) {\n      break;\n    }\n  }\n\n  return currentNode;\n}\nfunction getLastCodeHighlightNodeOfLine(anchor) {\n  let currentNode = null;\n  const nextSiblings = anchor.getNextSiblings();\n  nextSiblings.unshift(anchor);\n\n  while (nextSiblings.length > 0) {\n    const node = nextSiblings.shift();\n\n    if ($isCodeHighlightNode(node)) {\n      currentNode = node;\n    }\n\n    if (lexical.$isLineBreakNode(node)) {\n      break;\n    }\n  }\n\n  return currentNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst PrismTokenizer = {\n  defaultLanguage: DEFAULT_CODE_LANGUAGE,\n\n  tokenize(code, language) {\n    return Prism.tokenize(code, Prism.languages[language || ''] || Prism.languages[this.defaultLanguage]);\n  }\n\n};\n\nfunction isSpaceOrTabChar(char) {\n  return char === ' ' || char === '\\t';\n}\n\nfunction findFirstNotSpaceOrTabCharAtText(text, isForward) {\n  const length = text.length;\n  let offset = -1;\n\n  if (isForward) {\n    for (let i = 0; i < length; i++) {\n      const char = text[i];\n\n      if (!isSpaceOrTabChar(char)) {\n        offset = i;\n        break;\n      }\n    }\n  } else {\n    for (let i = length - 1; i > -1; i--) {\n      const char = text[i];\n\n      if (!isSpaceOrTabChar(char)) {\n        offset = i;\n        break;\n      }\n    }\n  }\n\n  return offset;\n}\n\nfunction getStartOfCodeInLine(anchor) {\n  let currentNode = null;\n  let currentNodeOffset = -1;\n  const previousSiblings = anchor.getPreviousSiblings();\n  previousSiblings.push(anchor);\n\n  while (previousSiblings.length > 0) {\n    const node = previousSiblings.pop();\n\n    if ($isCodeHighlightNode(node)) {\n      const text = node.getTextContent();\n      const offset = findFirstNotSpaceOrTabCharAtText(text, true);\n\n      if (offset !== -1) {\n        currentNode = node;\n        currentNodeOffset = offset;\n      }\n    }\n\n    if (lexical.$isLineBreakNode(node)) {\n      break;\n    }\n  }\n\n  if (currentNode === null) {\n    const nextSiblings = anchor.getNextSiblings();\n\n    while (nextSiblings.length > 0) {\n      const node = nextSiblings.shift();\n\n      if ($isCodeHighlightNode(node)) {\n        const text = node.getTextContent();\n        const offset = findFirstNotSpaceOrTabCharAtText(text, true);\n\n        if (offset !== -1) {\n          currentNode = node;\n          currentNodeOffset = offset;\n          break;\n        }\n      }\n\n      if (lexical.$isLineBreakNode(node)) {\n        break;\n      }\n    }\n  }\n\n  return {\n    node: currentNode,\n    offset: currentNodeOffset\n  };\n}\nfunction getEndOfCodeInLine(anchor) {\n  let currentNode = null;\n  let currentNodeOffset = -1;\n  const nextSiblings = anchor.getNextSiblings();\n  nextSiblings.unshift(anchor);\n\n  while (nextSiblings.length > 0) {\n    const node = nextSiblings.shift();\n\n    if ($isCodeHighlightNode(node)) {\n      const text = node.getTextContent();\n      const offset = findFirstNotSpaceOrTabCharAtText(text, false);\n\n      if (offset !== -1) {\n        currentNode = node;\n        currentNodeOffset = offset + 1;\n      }\n    }\n\n    if (lexical.$isLineBreakNode(node)) {\n      break;\n    }\n  }\n\n  if (currentNode === null) {\n    const previousSiblings = anchor.getPreviousSiblings();\n\n    while (previousSiblings.length > 0) {\n      const node = previousSiblings.pop();\n\n      if ($isCodeHighlightNode(node)) {\n        const text = node.getTextContent();\n        const offset = findFirstNotSpaceOrTabCharAtText(text, false);\n\n        if (offset !== -1) {\n          currentNode = node;\n          currentNodeOffset = offset + 1;\n          break;\n        }\n      }\n\n      if (lexical.$isLineBreakNode(node)) {\n        break;\n      }\n    }\n  }\n\n  return {\n    node: currentNode,\n    offset: currentNodeOffset\n  };\n}\n\nfunction textNodeTransform(node, editor, tokenizer) {\n  // Since CodeNode has flat children structure we only need to check\n  // if node's parent is a code node and run highlighting if so\n  const parentNode = node.getParent();\n\n  if ($isCodeNode(parentNode)) {\n    codeNodeTransform(parentNode, editor, tokenizer);\n  } else if ($isCodeHighlightNode(node)) {\n    // When code block converted into paragraph or other element\n    // code highlight nodes converted back to normal text\n    node.replace(lexical.$createTextNode(node.__text));\n  }\n}\n\nfunction updateCodeGutter(node, editor) {\n  const codeElement = editor.getElementByKey(node.getKey());\n\n  if (codeElement === null) {\n    return;\n  }\n\n  const children = node.getChildren();\n  const childrenLength = children.length; // @ts-ignore: internal field\n\n  if (childrenLength === codeElement.__cachedChildrenLength) {\n    // Avoid updating the attribute if the children length hasn't changed.\n    return;\n  } // @ts-ignore:: internal field\n\n\n  codeElement.__cachedChildrenLength = childrenLength;\n  let gutter = '1';\n  let count = 1;\n\n  for (let i = 0; i < childrenLength; i++) {\n    if (lexical.$isLineBreakNode(children[i])) {\n      gutter += '\\n' + ++count;\n    }\n  }\n\n  codeElement.setAttribute('data-gutter', gutter);\n} // Using `skipTransforms` to prevent extra transforms since reformatting the code\n// will not affect code block content itself.\n//\n// Using extra cache (`nodesCurrentlyHighlighting`) since both CodeNode and CodeHighlightNode\n// transforms might be called at the same time (e.g. new CodeHighlight node inserted) and\n// in both cases we'll rerun whole reformatting over CodeNode, which is redundant.\n// Especially when pasting code into CodeBlock.\n\n\nconst nodesCurrentlyHighlighting = new Set();\n\nfunction codeNodeTransform(node, editor, tokenizer) {\n  const nodeKey = node.getKey();\n\n  if (nodesCurrentlyHighlighting.has(nodeKey)) {\n    return;\n  }\n\n  nodesCurrentlyHighlighting.add(nodeKey); // When new code block inserted it might not have language selected\n\n  if (node.getLanguage() === undefined) {\n    node.setLanguage(tokenizer.defaultLanguage);\n  } // Using nested update call to pass `skipTransforms` since we don't want\n  // each individual codehighlight node to be transformed again as it's already\n  // in its final state\n\n\n  editor.update(() => {\n    updateAndRetainSelection(nodeKey, () => {\n      const currentNode = lexical.$getNodeByKey(nodeKey);\n\n      if (!$isCodeNode(currentNode) || !currentNode.isAttached()) {\n        return false;\n      }\n\n      const code = currentNode.getTextContent();\n      const tokens = tokenizer.tokenize(code, currentNode.getLanguage() || tokenizer.defaultLanguage);\n      const highlightNodes = getHighlightNodes(tokens);\n      const diffRange = getDiffRange(currentNode.getChildren(), highlightNodes);\n      const {\n        from,\n        to,\n        nodesForReplacement\n      } = diffRange;\n\n      if (from !== to || nodesForReplacement.length) {\n        node.splice(from, to - from, nodesForReplacement);\n        return true;\n      }\n\n      return false;\n    });\n  }, {\n    onUpdate: () => {\n      nodesCurrentlyHighlighting.delete(nodeKey);\n    },\n    skipTransforms: true\n  });\n}\n\nfunction getHighlightNodes(tokens) {\n  const nodes = [];\n  tokens.forEach(token => {\n    if (typeof token === 'string') {\n      const partials = token.split('\\n');\n\n      for (let i = 0; i < partials.length; i++) {\n        const text = partials[i];\n\n        if (text.length) {\n          nodes.push($createCodeHighlightNode(text));\n        }\n\n        if (i < partials.length - 1) {\n          nodes.push(lexical.$createLineBreakNode());\n        }\n      }\n    } else {\n      const {\n        content\n      } = token;\n\n      if (typeof content === 'string') {\n        nodes.push($createCodeHighlightNode(content, token.type));\n      } else if (Array.isArray(content) && content.length === 1 && typeof content[0] === 'string') {\n        nodes.push($createCodeHighlightNode(content[0], token.type));\n      } else if (Array.isArray(content)) {\n        nodes.push(...getHighlightNodes(content));\n      }\n    }\n  });\n  return nodes;\n} // Wrapping update function into selection retainer, that tries to keep cursor at the same\n// position as before.\n\n\nfunction updateAndRetainSelection(nodeKey, updateFn) {\n  const node = lexical.$getNodeByKey(nodeKey);\n\n  if (!$isCodeNode(node) || !node.isAttached()) {\n    return;\n  }\n\n  const selection = lexical.$getSelection(); // If it's not range selection (or null selection) there's no need to change it,\n  // but we can still run highlighting logic\n\n  if (!lexical.$isRangeSelection(selection)) {\n    updateFn();\n    return;\n  }\n\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const isNewLineAnchor = anchor.type === 'element' && lexical.$isLineBreakNode(node.getChildAtIndex(anchor.offset - 1));\n  let textOffset = 0; // Calculating previous text offset (all text node prior to anchor + anchor own text offset)\n\n  if (!isNewLineAnchor) {\n    const anchorNode = anchor.getNode();\n    textOffset = anchorOffset + anchorNode.getPreviousSiblings().reduce((offset, _node) => {\n      return offset + _node.getTextContentSize();\n    }, 0);\n  }\n\n  const hasChanges = updateFn();\n\n  if (!hasChanges) {\n    return;\n  } // Non-text anchors only happen for line breaks, otherwise\n  // selection will be within text node (code highlight node)\n\n\n  if (isNewLineAnchor) {\n    anchor.getNode().select(anchorOffset, anchorOffset);\n    return;\n  } // If it was non-element anchor then we walk through child nodes\n  // and looking for a position of original text offset\n\n\n  node.getChildren().some(_node => {\n    const isText = lexical.$isTextNode(_node);\n\n    if (isText || lexical.$isLineBreakNode(_node)) {\n      const textContentSize = _node.getTextContentSize();\n\n      if (isText && textContentSize >= textOffset) {\n        _node.select(textOffset, textOffset);\n\n        return true;\n      }\n\n      textOffset -= textContentSize;\n    }\n\n    return false;\n  });\n} // Finds minimal diff range between two nodes lists. It returns from/to range boundaries of prevNodes\n// that needs to be replaced with `nodes` (subset of nextNodes) to make prevNodes equal to nextNodes.\n\n\nfunction getDiffRange(prevNodes, nextNodes) {\n  let leadingMatch = 0;\n\n  while (leadingMatch < prevNodes.length) {\n    if (!isEqual(prevNodes[leadingMatch], nextNodes[leadingMatch])) {\n      break;\n    }\n\n    leadingMatch++;\n  }\n\n  const prevNodesLength = prevNodes.length;\n  const nextNodesLength = nextNodes.length;\n  const maxTrailingMatch = Math.min(prevNodesLength, nextNodesLength) - leadingMatch;\n  let trailingMatch = 0;\n\n  while (trailingMatch < maxTrailingMatch) {\n    trailingMatch++;\n\n    if (!isEqual(prevNodes[prevNodesLength - trailingMatch], nextNodes[nextNodesLength - trailingMatch])) {\n      trailingMatch--;\n      break;\n    }\n  }\n\n  const from = leadingMatch;\n  const to = prevNodesLength - trailingMatch;\n  const nodesForReplacement = nextNodes.slice(leadingMatch, nextNodesLength - trailingMatch);\n  return {\n    from,\n    nodesForReplacement,\n    to\n  };\n}\n\nfunction isEqual(nodeA, nodeB) {\n  // Only checking for code higlight nodes and linebreaks. If it's regular text node\n  // returning false so that it's transformed into code highlight node\n  if ($isCodeHighlightNode(nodeA) && $isCodeHighlightNode(nodeB)) {\n    return nodeA.__text === nodeB.__text && nodeA.__highlightType === nodeB.__highlightType;\n  }\n\n  if (lexical.$isLineBreakNode(nodeA) && lexical.$isLineBreakNode(nodeB)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction handleMultilineIndent(type) {\n  const selection = lexical.$getSelection();\n\n  if (!lexical.$isRangeSelection(selection) || selection.isCollapsed()) {\n    return false;\n  } // Only run multiline indent logic on selections exclusively composed of code highlights and linebreaks\n\n\n  const nodes = selection.getNodes();\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n\n    if (!$isCodeHighlightNode(node) && !lexical.$isLineBreakNode(node)) {\n      return false;\n    }\n  }\n\n  const startOfLine = getFirstCodeHighlightNodeOfLine(nodes[0]);\n\n  if (startOfLine != null) {\n    doIndent(startOfLine, type);\n  }\n\n  for (let i = 1; i < nodes.length; i++) {\n    const node = nodes[i];\n\n    if (lexical.$isLineBreakNode(nodes[i - 1]) && $isCodeHighlightNode(node)) {\n      doIndent(node, type);\n    }\n  }\n\n  return true;\n}\n\nfunction doIndent(node, type) {\n  const text = node.getTextContent();\n\n  if (type === lexical.INDENT_CONTENT_COMMAND) {\n    // If the codeblock node doesn't start with whitespace, we don't want to\n    // naively prepend a '\\t'; Prism will then mangle all of our nodes when\n    // it separates the whitespace from the first non-whitespace node. This\n    // will lead to selection bugs when indenting lines that previously\n    // didn't start with a whitespace character\n    if (text.length > 0 && /\\s/.test(text[0])) {\n      node.setTextContent('\\t' + text);\n    } else {\n      const indentNode = $createCodeHighlightNode('\\t');\n      node.insertBefore(indentNode);\n    }\n  } else {\n    if (text.indexOf('\\t') === 0) {\n      // Same as above - if we leave empty text nodes lying around, the resulting\n      // selection will be mangled\n      if (text.length === 1) {\n        node.remove();\n      } else {\n        node.setTextContent(text.substring(1));\n      }\n    }\n  }\n}\n\nfunction handleShiftLines(type, event) {\n  // We only care about the alt+arrow keys\n  const selection = lexical.$getSelection();\n\n  if (!lexical.$isRangeSelection(selection)) {\n    return false;\n  } // I'm not quite sure why, but it seems like calling anchor.getNode() collapses the selection here\n  // So first, get the anchor and the focus, then get their nodes\n\n\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorOffset = anchor.offset;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  const arrowIsUp = type === lexical.KEY_ARROW_UP_COMMAND; // Ensure the selection is within the codeblock\n\n  if (!$isCodeHighlightNode(anchorNode) || !$isCodeHighlightNode(focusNode)) {\n    return false;\n  }\n\n  if (!event.altKey) {\n    // Handle moving selection out of the code block, given there are no\n    // sibling thats can natively take the selection.\n    if (selection.isCollapsed()) {\n      const codeNode = anchorNode.getParentOrThrow();\n\n      if (arrowIsUp && anchorOffset === 0 && anchorNode.getPreviousSibling() === null) {\n        const codeNodeSibling = codeNode.getPreviousSibling();\n\n        if (codeNodeSibling === null) {\n          codeNode.selectPrevious();\n          event.preventDefault();\n          return true;\n        }\n      } else if (!arrowIsUp && anchorOffset === anchorNode.getTextContentSize() && anchorNode.getNextSibling() === null) {\n        const codeNodeSibling = codeNode.getNextSibling();\n\n        if (codeNodeSibling === null) {\n          codeNode.selectNext();\n          event.preventDefault();\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  const start = getFirstCodeHighlightNodeOfLine(anchorNode);\n  const end = getLastCodeHighlightNodeOfLine(focusNode);\n\n  if (start == null || end == null) {\n    return false;\n  }\n\n  const range = start.getNodesBetween(end);\n\n  for (let i = 0; i < range.length; i++) {\n    const node = range[i];\n\n    if (!$isCodeHighlightNode(node) && !lexical.$isLineBreakNode(node)) {\n      return false;\n    }\n  } // After this point, we know the selection is within the codeblock. We may not be able to\n  // actually move the lines around, but we want to return true either way to prevent\n  // the event's default behavior\n\n\n  event.preventDefault();\n  event.stopPropagation(); // required to stop cursor movement under Firefox\n\n  const linebreak = arrowIsUp ? start.getPreviousSibling() : end.getNextSibling();\n\n  if (!lexical.$isLineBreakNode(linebreak)) {\n    return true;\n  }\n\n  const sibling = arrowIsUp ? linebreak.getPreviousSibling() : linebreak.getNextSibling();\n\n  if (sibling == null) {\n    return true;\n  }\n\n  const maybeInsertionPoint = arrowIsUp ? getFirstCodeHighlightNodeOfLine(sibling) : getLastCodeHighlightNodeOfLine(sibling);\n  let insertionPoint = maybeInsertionPoint != null ? maybeInsertionPoint : sibling;\n  linebreak.remove();\n  range.forEach(node => node.remove());\n\n  if (type === lexical.KEY_ARROW_UP_COMMAND) {\n    range.forEach(node => insertionPoint.insertBefore(node));\n    insertionPoint.insertBefore(linebreak);\n  } else {\n    insertionPoint.insertAfter(linebreak);\n    insertionPoint = linebreak;\n    range.forEach(node => {\n      insertionPoint.insertAfter(node);\n      insertionPoint = node;\n    });\n  }\n\n  selection.setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset);\n  return true;\n}\n\nfunction handleMoveTo(type, event) {\n  const selection = lexical.$getSelection();\n\n  if (!lexical.$isRangeSelection(selection)) {\n    return false;\n  }\n\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  const isMoveToStart = type === lexical.MOVE_TO_START;\n\n  if (!$isCodeHighlightNode(anchorNode) || !$isCodeHighlightNode(focusNode)) {\n    return false;\n  }\n\n  let node;\n  let offset;\n\n  if (isMoveToStart) {\n    ({\n      node,\n      offset\n    } = getStartOfCodeInLine(focusNode));\n  } else {\n    ({\n      node,\n      offset\n    } = getEndOfCodeInLine(focusNode));\n  }\n\n  if (node !== null && offset !== -1) {\n    selection.setTextNodeRange(node, offset, node, offset);\n  }\n\n  event.preventDefault();\n  event.stopPropagation();\n  return true;\n}\n\nfunction registerCodeHighlighting(editor, tokenizer) {\n  if (!editor.hasNodes([CodeNode, CodeHighlightNode])) {\n    throw new Error('CodeHighlightPlugin: CodeNode or CodeHighlightNode not registered on editor');\n  }\n\n  if (tokenizer == null) {\n    tokenizer = PrismTokenizer;\n  }\n\n  return utils.mergeRegister(editor.registerMutationListener(CodeNode, mutations => {\n    editor.update(() => {\n      for (const [key, type] of mutations) {\n        if (type !== 'destroyed') {\n          const node = lexical.$getNodeByKey(key);\n\n          if (node !== null) {\n            updateCodeGutter(node, editor);\n          }\n        }\n      }\n    });\n  }), editor.registerNodeTransform(CodeNode, node => codeNodeTransform(node, editor, tokenizer)), editor.registerNodeTransform(lexical.TextNode, node => textNodeTransform(node, editor, tokenizer)), editor.registerNodeTransform(CodeHighlightNode, node => textNodeTransform(node, editor, tokenizer)), editor.registerCommand(lexical.INDENT_CONTENT_COMMAND, payload => handleMultilineIndent(lexical.INDENT_CONTENT_COMMAND), lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.OUTDENT_CONTENT_COMMAND, payload => handleMultilineIndent(lexical.OUTDENT_CONTENT_COMMAND), lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, payload => handleShiftLines(lexical.KEY_ARROW_UP_COMMAND, payload), lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, payload => handleShiftLines(lexical.KEY_ARROW_DOWN_COMMAND, payload), lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.MOVE_TO_END, payload => handleMoveTo(lexical.MOVE_TO_END, payload), lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.MOVE_TO_START, payload => handleMoveTo(lexical.MOVE_TO_START, payload), lexical.COMMAND_PRIORITY_LOW));\n}\n\nexports.$createCodeHighlightNode = $createCodeHighlightNode;\nexports.$createCodeNode = $createCodeNode;\nexports.$isCodeHighlightNode = $isCodeHighlightNode;\nexports.$isCodeNode = $isCodeNode;\nexports.CODE_LANGUAGE_FRIENDLY_NAME_MAP = CODE_LANGUAGE_FRIENDLY_NAME_MAP;\nexports.CODE_LANGUAGE_MAP = CODE_LANGUAGE_MAP;\nexports.CodeHighlightNode = CodeHighlightNode;\nexports.CodeNode = CodeNode;\nexports.DEFAULT_CODE_LANGUAGE = DEFAULT_CODE_LANGUAGE;\nexports.PrismTokenizer = PrismTokenizer;\nexports.getCodeLanguages = getCodeLanguages;\nexports.getDefaultCodeLanguage = getDefaultCodeLanguage;\nexports.getEndOfCodeInLine = getEndOfCodeInLine;\nexports.getFirstCodeHighlightNodeOfLine = getFirstCodeHighlightNodeOfLine;\nexports.getLanguageFriendlyName = getLanguageFriendlyName;\nexports.getLastCodeHighlightNodeOfLine = getLastCodeHighlightNodeOfLine;\nexports.getStartOfCodeInLine = getStartOfCodeInLine;\nexports.normalizeCodeLang = normalizeCodeLang;\nexports.registerCodeHighlighting = registerCodeHighlighting;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/code/LexicalCode.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/code/LexicalCode.js":
/*!***************************************************!*\
  !*** ./node_modules/@lexical/code/LexicalCode.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalCode =  true ? __webpack_require__(/*! ./LexicalCode.dev.js */ \"(ssr)/./node_modules/@lexical/code/LexicalCode.dev.js\") : 0\nmodule.exports = LexicalCode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvY29kZS9MZXhpY2FsQ29kZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLG9CQUFvQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsbUZBQXNCLElBQUksQ0FBZ0M7QUFDL0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9jb2RlL0xleGljYWxDb2RlLmpzP2JmZGUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxDb2RlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyByZXF1aXJlKCcuL0xleGljYWxDb2RlLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsQ29kZS5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbENvZGU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/code/LexicalCode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/dragon/LexicalDragon.dev.js":
/*!***********************************************************!*\
  !*** ./node_modules/@lexical/dragon/LexicalDragon.dev.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/** @module @lexical/dragon */\nfunction registerDragonSupport(editor) {\n  const origin = window.location.origin;\n\n  const handler = event => {\n    if (event.origin !== origin) {\n      return;\n    }\n\n    const rootElement = editor.getRootElement();\n\n    if (document.activeElement !== rootElement) {\n      return;\n    }\n\n    const data = event.data;\n\n    if (typeof data === 'string') {\n      let parsedData;\n\n      try {\n        parsedData = JSON.parse(data);\n      } catch (e) {\n        return;\n      }\n\n      if (parsedData && parsedData.protocol === 'nuanria_messaging' && parsedData.type === 'request') {\n        const payload = parsedData.payload;\n\n        if (payload && payload.functionId === 'makeChanges') {\n          const args = payload.args;\n\n          if (args) {\n            const [elementStart, elementLength, text, selStart, selLength, formatCommand] = args; // TODO: we should probably handle formatCommand somehow?\n            editor.update(() => {\n              const selection = lexical.$getSelection();\n\n              if (lexical.$isRangeSelection(selection)) {\n                const anchor = selection.anchor;\n                let anchorNode = anchor.getNode();\n                let setSelStart = 0;\n                let setSelEnd = 0;\n\n                if (lexical.$isTextNode(anchorNode)) {\n                  // set initial selection\n                  if (elementStart >= 0 && elementLength >= 0) {\n                    setSelStart = elementStart;\n                    setSelEnd = elementStart + elementLength; // If the offset is more than the end, make it the end\n\n                    selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                  }\n                }\n\n                if (setSelStart !== setSelEnd || text !== '') {\n                  selection.insertRawText(text);\n                  anchorNode = anchor.getNode();\n                }\n\n                if (lexical.$isTextNode(anchorNode)) {\n                  // set final selection\n                  setSelStart = selStart;\n                  setSelEnd = selStart + selLength;\n                  const anchorNodeTextLength = anchorNode.getTextContentSize(); // If the offset is more than the end, make it the end\n\n                  setSelStart = setSelStart > anchorNodeTextLength ? anchorNodeTextLength : setSelStart;\n                  setSelEnd = setSelEnd > anchorNodeTextLength ? anchorNodeTextLength : setSelEnd;\n                  selection.setTextNodeRange(anchorNode, setSelStart, anchorNode, setSelEnd);\n                } // block the chrome extension from handling this event\n\n\n                event.stopImmediatePropagation();\n              }\n            });\n          }\n        }\n      }\n    }\n  };\n\n  window.addEventListener('message', handler, true);\n  return () => {\n    window.removeEventListener('message', handler, true);\n  };\n}\n\nexports.registerDragonSupport = registerDragonSupport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvZHJhZ29uL0xleGljYWxEcmFnb24uZGV2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViLGNBQWMsbUJBQU8sQ0FBQyx3REFBUzs7QUFFL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrR0FBa0c7QUFDbEc7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThEOztBQUU5RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0Y7O0FBRWhGO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjs7O0FBR2xCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL2RyYWdvbi9MZXhpY2FsRHJhZ29uLmRldi5qcz9lNGM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbGV4aWNhbCA9IHJlcXVpcmUoJ2xleGljYWwnKTtcblxuLyoqIEBtb2R1bGUgQGxleGljYWwvZHJhZ29uICovXG5mdW5jdGlvbiByZWdpc3RlckRyYWdvblN1cHBvcnQoZWRpdG9yKSB7XG4gIGNvbnN0IG9yaWdpbiA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XG5cbiAgY29uc3QgaGFuZGxlciA9IGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnQub3JpZ2luICE9PSBvcmlnaW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByb290RWxlbWVudCA9IGVkaXRvci5nZXRSb290RWxlbWVudCgpO1xuXG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHJvb3RFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IGV2ZW50LmRhdGE7XG5cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgcGFyc2VkRGF0YTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcGFyc2VkRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcnNlZERhdGEgJiYgcGFyc2VkRGF0YS5wcm90b2NvbCA9PT0gJ251YW5yaWFfbWVzc2FnaW5nJyAmJiBwYXJzZWREYXRhLnR5cGUgPT09ICdyZXF1ZXN0Jykge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gcGFyc2VkRGF0YS5wYXlsb2FkO1xuXG4gICAgICAgIGlmIChwYXlsb2FkICYmIHBheWxvYWQuZnVuY3Rpb25JZCA9PT0gJ21ha2VDaGFuZ2VzJykge1xuICAgICAgICAgIGNvbnN0IGFyZ3MgPSBwYXlsb2FkLmFyZ3M7XG5cbiAgICAgICAgICBpZiAoYXJncykge1xuICAgICAgICAgICAgY29uc3QgW2VsZW1lbnRTdGFydCwgZWxlbWVudExlbmd0aCwgdGV4dCwgc2VsU3RhcnQsIHNlbExlbmd0aCwgZm9ybWF0Q29tbWFuZF0gPSBhcmdzOyAvLyBUT0RPOiB3ZSBzaG91bGQgcHJvYmFibHkgaGFuZGxlIGZvcm1hdENvbW1hbmQgc29tZWhvdz9cbiAgICAgICAgICAgIGVkaXRvci51cGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBsZXhpY2FsLiRnZXRTZWxlY3Rpb24oKTtcblxuICAgICAgICAgICAgICBpZiAobGV4aWNhbC4kaXNSYW5nZVNlbGVjdGlvbihzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gc2VsZWN0aW9uLmFuY2hvcjtcbiAgICAgICAgICAgICAgICBsZXQgYW5jaG9yTm9kZSA9IGFuY2hvci5nZXROb2RlKCk7XG4gICAgICAgICAgICAgICAgbGV0IHNldFNlbFN0YXJ0ID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgc2V0U2VsRW5kID0gMDtcblxuICAgICAgICAgICAgICAgIGlmIChsZXhpY2FsLiRpc1RleHROb2RlKGFuY2hvck5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBzZXQgaW5pdGlhbCBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50U3RhcnQgPj0gMCAmJiBlbGVtZW50TGVuZ3RoID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0U2VsU3RhcnQgPSBlbGVtZW50U3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIHNldFNlbEVuZCA9IGVsZW1lbnRTdGFydCArIGVsZW1lbnRMZW5ndGg7IC8vIElmIHRoZSBvZmZzZXQgaXMgbW9yZSB0aGFuIHRoZSBlbmQsIG1ha2UgaXQgdGhlIGVuZFxuXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5zZXRUZXh0Tm9kZVJhbmdlKGFuY2hvck5vZGUsIHNldFNlbFN0YXJ0LCBhbmNob3JOb2RlLCBzZXRTZWxFbmQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzZXRTZWxTdGFydCAhPT0gc2V0U2VsRW5kIHx8IHRleHQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uaW5zZXJ0UmF3VGV4dCh0ZXh0KTtcbiAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGUgPSBhbmNob3IuZ2V0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChsZXhpY2FsLiRpc1RleHROb2RlKGFuY2hvck5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBzZXQgZmluYWwgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICBzZXRTZWxTdGFydCA9IHNlbFN0YXJ0O1xuICAgICAgICAgICAgICAgICAgc2V0U2VsRW5kID0gc2VsU3RhcnQgKyBzZWxMZW5ndGg7XG4gICAgICAgICAgICAgICAgICBjb25zdCBhbmNob3JOb2RlVGV4dExlbmd0aCA9IGFuY2hvck5vZGUuZ2V0VGV4dENvbnRlbnRTaXplKCk7IC8vIElmIHRoZSBvZmZzZXQgaXMgbW9yZSB0aGFuIHRoZSBlbmQsIG1ha2UgaXQgdGhlIGVuZFxuXG4gICAgICAgICAgICAgICAgICBzZXRTZWxTdGFydCA9IHNldFNlbFN0YXJ0ID4gYW5jaG9yTm9kZVRleHRMZW5ndGggPyBhbmNob3JOb2RlVGV4dExlbmd0aCA6IHNldFNlbFN0YXJ0O1xuICAgICAgICAgICAgICAgICAgc2V0U2VsRW5kID0gc2V0U2VsRW5kID4gYW5jaG9yTm9kZVRleHRMZW5ndGggPyBhbmNob3JOb2RlVGV4dExlbmd0aCA6IHNldFNlbEVuZDtcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5zZXRUZXh0Tm9kZVJhbmdlKGFuY2hvck5vZGUsIHNldFNlbFN0YXJ0LCBhbmNob3JOb2RlLCBzZXRTZWxFbmQpO1xuICAgICAgICAgICAgICAgIH0gLy8gYmxvY2sgdGhlIGNocm9tZSBleHRlbnNpb24gZnJvbSBoYW5kbGluZyB0aGlzIGV2ZW50XG5cblxuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVyLCB0cnVlKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGhhbmRsZXIsIHRydWUpO1xuICB9O1xufVxuXG5leHBvcnRzLnJlZ2lzdGVyRHJhZ29uU3VwcG9ydCA9IHJlZ2lzdGVyRHJhZ29uU3VwcG9ydDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/dragon/LexicalDragon.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/dragon/LexicalDragon.js":
/*!*******************************************************!*\
  !*** ./node_modules/@lexical/dragon/LexicalDragon.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalDragon =  true ? __webpack_require__(/*! ./LexicalDragon.dev.js */ \"(ssr)/./node_modules/@lexical/dragon/LexicalDragon.dev.js\") : 0\nmodule.exports = LexicalDragon;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvZHJhZ29uL0xleGljYWxEcmFnb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWixzQkFBc0IsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLHlGQUF3QixJQUFJLENBQWtDO0FBQ3JJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvZHJhZ29uL0xleGljYWxEcmFnb24uanM/NWRiNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgTGV4aWNhbERyYWdvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gcmVxdWlyZSgnLi9MZXhpY2FsRHJhZ29uLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsRHJhZ29uLnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsRHJhZ29uOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/dragon/LexicalDragon.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/file/LexicalFile.dev.js":
/*!*******************************************************!*\
  !*** ./node_modules/@lexical/file/LexicalFile.dev.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\nvar version = \"0.9.0\";\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction importFile(editor) {\n  readTextFileFromSystem(text => {\n    const json = JSON.parse(text);\n    const editorState = editor.parseEditorState(JSON.stringify(json.editorState));\n    editor.setEditorState(editorState);\n    editor.dispatchCommand(lexical.CLEAR_HISTORY_COMMAND, undefined);\n  });\n}\n\nfunction readTextFileFromSystem(callback) {\n  const input = document.createElement('input');\n  input.type = 'file';\n  input.accept = '.lexical';\n  input.addEventListener('change', event => {\n    const target = event.target;\n\n    if (target.files) {\n      const file = target.files[0];\n      const reader = new FileReader();\n      reader.readAsText(file, 'UTF-8');\n\n      reader.onload = readerEvent => {\n        if (readerEvent.target) {\n          const content = readerEvent.target.result;\n          callback(content);\n        }\n      };\n    }\n  });\n  input.click();\n}\n\nfunction exportFile(editor, config = Object.freeze({})) {\n  const now = new Date();\n  const editorState = editor.getEditorState();\n  const documentJSON = {\n    editorState: editorState,\n    lastSaved: now.getTime(),\n    source: config.source || 'Lexical',\n    version\n  };\n  const fileName = config.fileName || now.toISOString();\n  exportBlob(documentJSON, `${fileName}.lexical`);\n} // Adapted from https://stackoverflow.com/a/19328891/2013580\n\nfunction exportBlob(data, fileName) {\n  const a = document.createElement('a');\n  const body = document.body;\n\n  if (body === null) {\n    return;\n  }\n\n  body.appendChild(a);\n  a.style.display = 'none';\n  const json = JSON.stringify(data);\n  const blob = new Blob([json], {\n    type: 'octet/stream'\n  });\n  const url = window.URL.createObjectURL(blob);\n  a.href = url;\n  a.download = fileName;\n  a.click();\n  window.URL.revokeObjectURL(url);\n  a.remove();\n}\n\nexports.exportFile = exportFile;\nexports.importFile = importFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvZmlsZS9MZXhpY2FsRmlsZS5kZXYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLHdEQUFTOztBQUUvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFNBQVM7QUFDdkMsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL2ZpbGUvTGV4aWNhbEZpbGUuZGV2LmpzP2Y2YzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBsZXhpY2FsID0gcmVxdWlyZSgnbGV4aWNhbCcpO1xuXG52YXIgdmVyc2lvbiA9IFwiMC45LjBcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuZnVuY3Rpb24gaW1wb3J0RmlsZShlZGl0b3IpIHtcbiAgcmVhZFRleHRGaWxlRnJvbVN5c3RlbSh0ZXh0ID0+IHtcbiAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZSh0ZXh0KTtcbiAgICBjb25zdCBlZGl0b3JTdGF0ZSA9IGVkaXRvci5wYXJzZUVkaXRvclN0YXRlKEpTT04uc3RyaW5naWZ5KGpzb24uZWRpdG9yU3RhdGUpKTtcbiAgICBlZGl0b3Iuc2V0RWRpdG9yU3RhdGUoZWRpdG9yU3RhdGUpO1xuICAgIGVkaXRvci5kaXNwYXRjaENvbW1hbmQobGV4aWNhbC5DTEVBUl9ISVNUT1JZX0NPTU1BTkQsIHVuZGVmaW5lZCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWFkVGV4dEZpbGVGcm9tU3lzdGVtKGNhbGxiYWNrKSB7XG4gIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgaW5wdXQudHlwZSA9ICdmaWxlJztcbiAgaW5wdXQuYWNjZXB0ID0gJy5sZXhpY2FsJztcbiAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZXZlbnQgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuICAgIGlmICh0YXJnZXQuZmlsZXMpIHtcbiAgICAgIGNvbnN0IGZpbGUgPSB0YXJnZXQuZmlsZXNbMF07XG4gICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSwgJ1VURi04Jyk7XG5cbiAgICAgIHJlYWRlci5vbmxvYWQgPSByZWFkZXJFdmVudCA9PiB7XG4gICAgICAgIGlmIChyZWFkZXJFdmVudC50YXJnZXQpIHtcbiAgICAgICAgICBjb25zdCBjb250ZW50ID0gcmVhZGVyRXZlbnQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICBjYWxsYmFjayhjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuICBpbnB1dC5jbGljaygpO1xufVxuXG5mdW5jdGlvbiBleHBvcnRGaWxlKGVkaXRvciwgY29uZmlnID0gT2JqZWN0LmZyZWV6ZSh7fSkpIHtcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgY29uc3QgZWRpdG9yU3RhdGUgPSBlZGl0b3IuZ2V0RWRpdG9yU3RhdGUoKTtcbiAgY29uc3QgZG9jdW1lbnRKU09OID0ge1xuICAgIGVkaXRvclN0YXRlOiBlZGl0b3JTdGF0ZSxcbiAgICBsYXN0U2F2ZWQ6IG5vdy5nZXRUaW1lKCksXG4gICAgc291cmNlOiBjb25maWcuc291cmNlIHx8ICdMZXhpY2FsJyxcbiAgICB2ZXJzaW9uXG4gIH07XG4gIGNvbnN0IGZpbGVOYW1lID0gY29uZmlnLmZpbGVOYW1lIHx8IG5vdy50b0lTT1N0cmluZygpO1xuICBleHBvcnRCbG9iKGRvY3VtZW50SlNPTiwgYCR7ZmlsZU5hbWV9LmxleGljYWxgKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xOTMyODg5MS8yMDEzNTgwXG5cbmZ1bmN0aW9uIGV4cG9ydEJsb2IoZGF0YSwgZmlsZU5hbWUpIHtcbiAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XG5cbiAgaWYgKGJvZHkgPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBib2R5LmFwcGVuZENoaWxkKGEpO1xuICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtqc29uXSwge1xuICAgIHR5cGU6ICdvY3RldC9zdHJlYW0nXG4gIH0pO1xuICBjb25zdCB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgYS5ocmVmID0gdXJsO1xuICBhLmRvd25sb2FkID0gZmlsZU5hbWU7XG4gIGEuY2xpY2soKTtcbiAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgYS5yZW1vdmUoKTtcbn1cblxuZXhwb3J0cy5leHBvcnRGaWxlID0gZXhwb3J0RmlsZTtcbmV4cG9ydHMuaW1wb3J0RmlsZSA9IGltcG9ydEZpbGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/file/LexicalFile.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/file/LexicalFile.js":
/*!***************************************************!*\
  !*** ./node_modules/@lexical/file/LexicalFile.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalFile =  true ? __webpack_require__(/*! ./LexicalFile.dev.js */ \"(ssr)/./node_modules/@lexical/file/LexicalFile.dev.js\") : 0\nmodule.exports = LexicalFile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvZmlsZS9MZXhpY2FsRmlsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLG9CQUFvQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsbUZBQXNCLElBQUksQ0FBZ0M7QUFDL0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9maWxlL0xleGljYWxGaWxlLmpzP2EzOTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxGaWxlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyByZXF1aXJlKCcuL0xleGljYWxGaWxlLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsRmlsZS5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbEZpbGU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/file/LexicalFile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/hashtag/LexicalHashtag.dev.js":
/*!*************************************************************!*\
  !*** ./node_modules/@lexical/hashtag/LexicalHashtag.dev.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\n\nclass HashtagNode extends lexical.TextNode {\n  static getType() {\n    return 'hashtag';\n  }\n\n  static clone(node) {\n    return new HashtagNode(node.__text, node.__key);\n  }\n\n  constructor(text, key) {\n    super(text, key);\n  }\n\n  createDOM(config) {\n    const element = super.createDOM(config);\n    utils.addClassNamesToElement(element, config.theme.hashtag);\n    return element;\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createHashtagNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      type: 'hashtag'\n    };\n  }\n\n  canInsertTextBefore() {\n    return false;\n  }\n\n  isTextEntity() {\n    return true;\n  }\n\n}\nfunction $createHashtagNode(text = '') {\n  return lexical.$applyNodeReplacement(new HashtagNode(text));\n}\nfunction $isHashtagNode(node) {\n  return node instanceof HashtagNode;\n}\n\nexports.$createHashtagNode = $createHashtagNode;\nexports.$isHashtagNode = $isHashtagNode;\nexports.HashtagNode = HashtagNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvaGFzaHRhZy9MZXhpY2FsSGFzaHRhZy5kZXYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLDJFQUFnQjtBQUNwQyxjQUFjLG1CQUFPLENBQUMsd0RBQVM7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHNCQUFzQjtBQUN0QixtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9oYXNodGFnL0xleGljYWxIYXNodGFnLmRldi5qcz82OWM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCdAbGV4aWNhbC91dGlscycpO1xudmFyIGxleGljYWwgPSByZXF1aXJlKCdsZXhpY2FsJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbi8qKiBAbm9Jbmhlcml0RG9jICovXG5cbmNsYXNzIEhhc2h0YWdOb2RlIGV4dGVuZHMgbGV4aWNhbC5UZXh0Tm9kZSB7XG4gIHN0YXRpYyBnZXRUeXBlKCkge1xuICAgIHJldHVybiAnaGFzaHRhZyc7XG4gIH1cblxuICBzdGF0aWMgY2xvbmUobm9kZSkge1xuICAgIHJldHVybiBuZXcgSGFzaHRhZ05vZGUobm9kZS5fX3RleHQsIG5vZGUuX19rZXkpO1xuICB9XG5cbiAgY29uc3RydWN0b3IodGV4dCwga2V5KSB7XG4gICAgc3VwZXIodGV4dCwga2V5KTtcbiAgfVxuXG4gIGNyZWF0ZURPTShjb25maWcpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gc3VwZXIuY3JlYXRlRE9NKGNvbmZpZyk7XG4gICAgdXRpbHMuYWRkQ2xhc3NOYW1lc1RvRWxlbWVudChlbGVtZW50LCBjb25maWcudGhlbWUuaGFzaHRhZyk7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICBzdGF0aWMgaW1wb3J0SlNPTihzZXJpYWxpemVkTm9kZSkge1xuICAgIGNvbnN0IG5vZGUgPSAkY3JlYXRlSGFzaHRhZ05vZGUoc2VyaWFsaXplZE5vZGUudGV4dCk7XG4gICAgbm9kZS5zZXRGb3JtYXQoc2VyaWFsaXplZE5vZGUuZm9ybWF0KTtcbiAgICBub2RlLnNldERldGFpbChzZXJpYWxpemVkTm9kZS5kZXRhaWwpO1xuICAgIG5vZGUuc2V0TW9kZShzZXJpYWxpemVkTm9kZS5tb2RlKTtcbiAgICBub2RlLnNldFN0eWxlKHNlcmlhbGl6ZWROb2RlLnN0eWxlKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGV4cG9ydEpTT04oKSB7XG4gICAgcmV0dXJuIHsgLi4uc3VwZXIuZXhwb3J0SlNPTigpLFxuICAgICAgdHlwZTogJ2hhc2h0YWcnXG4gICAgfTtcbiAgfVxuXG4gIGNhbkluc2VydFRleHRCZWZvcmUoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaXNUZXh0RW50aXR5KCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbn1cbmZ1bmN0aW9uICRjcmVhdGVIYXNodGFnTm9kZSh0ZXh0ID0gJycpIHtcbiAgcmV0dXJuIGxleGljYWwuJGFwcGx5Tm9kZVJlcGxhY2VtZW50KG5ldyBIYXNodGFnTm9kZSh0ZXh0KSk7XG59XG5mdW5jdGlvbiAkaXNIYXNodGFnTm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgSGFzaHRhZ05vZGU7XG59XG5cbmV4cG9ydHMuJGNyZWF0ZUhhc2h0YWdOb2RlID0gJGNyZWF0ZUhhc2h0YWdOb2RlO1xuZXhwb3J0cy4kaXNIYXNodGFnTm9kZSA9ICRpc0hhc2h0YWdOb2RlO1xuZXhwb3J0cy5IYXNodGFnTm9kZSA9IEhhc2h0YWdOb2RlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/hashtag/LexicalHashtag.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/hashtag/LexicalHashtag.js":
/*!*********************************************************!*\
  !*** ./node_modules/@lexical/hashtag/LexicalHashtag.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalHashtag =  true ? __webpack_require__(/*! ./LexicalHashtag.dev.js */ \"(ssr)/./node_modules/@lexical/hashtag/LexicalHashtag.dev.js\") : 0\nmodule.exports = LexicalHashtag;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvaGFzaHRhZy9MZXhpY2FsSGFzaHRhZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLHVCQUF1QixLQUFzQyxHQUFHLG1CQUFPLENBQUMsNEZBQXlCLElBQUksQ0FBbUM7QUFDeEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9oYXNodGFnL0xleGljYWxIYXNodGFnLmpzPzU1ZWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxIYXNodGFnID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyByZXF1aXJlKCcuL0xleGljYWxIYXNodGFnLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsSGFzaHRhZy5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbEhhc2h0YWc7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/hashtag/LexicalHashtag.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/history/LexicalHistory.dev.js":
/*!*************************************************************!*\
  !*** ./node_modules/@lexical/history/LexicalHistory.dev.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/** @module @lexical/history */\nconst HISTORY_MERGE = 0;\nconst HISTORY_PUSH = 1;\nconst DISCARD_HISTORY_CANDIDATE = 2;\nconst OTHER = 0;\nconst COMPOSING_CHARACTER = 1;\nconst INSERT_CHARACTER_AFTER_SELECTION = 2;\nconst DELETE_CHARACTER_BEFORE_SELECTION = 3;\nconst DELETE_CHARACTER_AFTER_SELECTION = 4;\n\nfunction getDirtyNodes(editorState, dirtyLeaves, dirtyElements) {\n  const nodeMap = editorState._nodeMap;\n  const nodes = [];\n\n  for (const dirtyLeafKey of dirtyLeaves) {\n    const dirtyLeaf = nodeMap.get(dirtyLeafKey);\n\n    if (dirtyLeaf !== undefined) {\n      nodes.push(dirtyLeaf);\n    }\n  }\n\n  for (const [dirtyElementKey, intentionallyMarkedAsDirty] of dirtyElements) {\n    if (!intentionallyMarkedAsDirty) {\n      continue;\n    }\n\n    const dirtyElement = nodeMap.get(dirtyElementKey);\n\n    if (dirtyElement !== undefined && !lexical.$isRootNode(dirtyElement)) {\n      nodes.push(dirtyElement);\n    }\n  }\n\n  return nodes;\n}\n\nfunction getChangeType(prevEditorState, nextEditorState, dirtyLeavesSet, dirtyElementsSet, isComposing) {\n  if (prevEditorState === null || dirtyLeavesSet.size === 0 && dirtyElementsSet.size === 0 && !isComposing) {\n    return OTHER;\n  }\n\n  const nextSelection = nextEditorState._selection;\n  const prevSelection = prevEditorState._selection;\n\n  if (isComposing) {\n    return COMPOSING_CHARACTER;\n  }\n\n  if (!lexical.$isRangeSelection(nextSelection) || !lexical.$isRangeSelection(prevSelection) || !prevSelection.isCollapsed() || !nextSelection.isCollapsed()) {\n    return OTHER;\n  }\n\n  const dirtyNodes = getDirtyNodes(nextEditorState, dirtyLeavesSet, dirtyElementsSet);\n\n  if (dirtyNodes.length === 0) {\n    return OTHER;\n  } // Catching the case when inserting new text node into an element (e.g. first char in paragraph/list),\n  // or after existing node.\n\n\n  if (dirtyNodes.length > 1) {\n    const nextNodeMap = nextEditorState._nodeMap;\n    const nextAnchorNode = nextNodeMap.get(nextSelection.anchor.key);\n    const prevAnchorNode = nextNodeMap.get(prevSelection.anchor.key);\n\n    if (nextAnchorNode && prevAnchorNode && !prevEditorState._nodeMap.has(nextAnchorNode.__key) && lexical.$isTextNode(nextAnchorNode) && nextAnchorNode.__text.length === 1 && nextSelection.anchor.offset === 1) {\n      return INSERT_CHARACTER_AFTER_SELECTION;\n    }\n\n    return OTHER;\n  }\n\n  const nextDirtyNode = dirtyNodes[0];\n\n  const prevDirtyNode = prevEditorState._nodeMap.get(nextDirtyNode.__key);\n\n  if (!lexical.$isTextNode(prevDirtyNode) || !lexical.$isTextNode(nextDirtyNode) || prevDirtyNode.__mode !== nextDirtyNode.__mode) {\n    return OTHER;\n  }\n\n  const prevText = prevDirtyNode.__text;\n  const nextText = nextDirtyNode.__text;\n\n  if (prevText === nextText) {\n    return OTHER;\n  }\n\n  const nextAnchor = nextSelection.anchor;\n  const prevAnchor = prevSelection.anchor;\n\n  if (nextAnchor.key !== prevAnchor.key || nextAnchor.type !== 'text') {\n    return OTHER;\n  }\n\n  const nextAnchorOffset = nextAnchor.offset;\n  const prevAnchorOffset = prevAnchor.offset;\n  const textDiff = nextText.length - prevText.length;\n\n  if (textDiff === 1 && prevAnchorOffset === nextAnchorOffset - 1) {\n    return INSERT_CHARACTER_AFTER_SELECTION;\n  }\n\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset + 1) {\n    return DELETE_CHARACTER_BEFORE_SELECTION;\n  }\n\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset) {\n    return DELETE_CHARACTER_AFTER_SELECTION;\n  }\n\n  return OTHER;\n}\n\nfunction isTextNodeUnchanged(key, prevEditorState, nextEditorState) {\n  const prevNode = prevEditorState._nodeMap.get(key);\n\n  const nextNode = nextEditorState._nodeMap.get(key);\n\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  let isDeletingLine = false;\n\n  if (lexical.$isRangeSelection(prevSelection) && lexical.$isRangeSelection(nextSelection)) {\n    isDeletingLine = prevSelection.anchor.type === 'element' && prevSelection.focus.type === 'element' && nextSelection.anchor.type === 'text' && nextSelection.focus.type === 'text';\n  }\n\n  if (!isDeletingLine && lexical.$isTextNode(prevNode) && lexical.$isTextNode(nextNode)) {\n    return prevNode.__type === nextNode.__type && prevNode.__text === nextNode.__text && prevNode.__mode === nextNode.__mode && prevNode.__detail === nextNode.__detail && prevNode.__style === nextNode.__style && prevNode.__format === nextNode.__format && prevNode.__parent === nextNode.__parent;\n  }\n\n  return false;\n}\n\nfunction createMergeActionGetter(editor, delay) {\n  let prevChangeTime = Date.now();\n  let prevChangeType = OTHER;\n  return (prevEditorState, nextEditorState, currentHistoryEntry, dirtyLeaves, dirtyElements, tags) => {\n    const changeTime = Date.now(); // If applying changes from history stack there's no need\n    // to run history logic again, as history entries already calculated\n\n    if (tags.has('historic')) {\n      prevChangeType = OTHER;\n      prevChangeTime = changeTime;\n      return DISCARD_HISTORY_CANDIDATE;\n    }\n\n    const changeType = getChangeType(prevEditorState, nextEditorState, dirtyLeaves, dirtyElements, editor.isComposing());\n\n    const mergeAction = (() => {\n      const isSameEditor = currentHistoryEntry === null || currentHistoryEntry.editor === editor;\n      const shouldPushHistory = tags.has('history-push');\n      const shouldMergeHistory = !shouldPushHistory && isSameEditor && tags.has('history-merge');\n\n      if (shouldMergeHistory) {\n        return HISTORY_MERGE;\n      }\n\n      if (prevEditorState === null) {\n        return HISTORY_PUSH;\n      }\n\n      const selection = nextEditorState._selection;\n      const hasDirtyNodes = dirtyLeaves.size > 0 || dirtyElements.size > 0;\n\n      if (!hasDirtyNodes) {\n        if (selection !== null) {\n          return HISTORY_MERGE;\n        }\n\n        return DISCARD_HISTORY_CANDIDATE;\n      }\n\n      if (shouldPushHistory === false && changeType !== OTHER && changeType === prevChangeType && changeTime < prevChangeTime + delay && isSameEditor) {\n        return HISTORY_MERGE;\n      } // A single node might have been marked as dirty, but not have changed\n      // due to some node transform reverting the change.\n\n\n      if (dirtyLeaves.size === 1) {\n        const dirtyLeafKey = Array.from(dirtyLeaves)[0];\n\n        if (isTextNodeUnchanged(dirtyLeafKey, prevEditorState, nextEditorState)) {\n          return HISTORY_MERGE;\n        }\n      }\n\n      return HISTORY_PUSH;\n    })();\n\n    prevChangeTime = changeTime;\n    prevChangeType = changeType;\n    return mergeAction;\n  };\n}\n\nfunction redo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n\n  if (redoStack.length !== 0) {\n    const current = historyState.current;\n\n    if (current !== null) {\n      undoStack.push(current);\n      editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, true);\n    }\n\n    const historyStateEntry = redoStack.pop();\n\n    if (redoStack.length === 0) {\n      editor.dispatchCommand(lexical.CAN_REDO_COMMAND, false);\n    }\n\n    historyState.current = historyStateEntry || null;\n\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\n\nfunction undo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  const undoStackLength = undoStack.length;\n\n  if (undoStackLength !== 0) {\n    const current = historyState.current;\n    const historyStateEntry = undoStack.pop();\n\n    if (current !== null) {\n      redoStack.push(current);\n      editor.dispatchCommand(lexical.CAN_REDO_COMMAND, true);\n    }\n\n    if (undoStack.length === 0) {\n      editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, false);\n    }\n\n    historyState.current = historyStateEntry || null;\n\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState.clone(historyStateEntry.undoSelection), {\n        tag: 'historic'\n      });\n    }\n  }\n}\n\nfunction clearHistory(historyState) {\n  historyState.undoStack = [];\n  historyState.redoStack = [];\n  historyState.current = null;\n}\n\nfunction registerHistory(editor, historyState, delay) {\n  const getMergeAction = createMergeActionGetter(editor, delay);\n\n  const applyChange = ({\n    editorState,\n    prevEditorState,\n    dirtyLeaves,\n    dirtyElements,\n    tags\n  }) => {\n    const current = historyState.current;\n    const redoStack = historyState.redoStack;\n    const undoStack = historyState.undoStack;\n    const currentEditorState = current === null ? null : current.editorState;\n\n    if (current !== null && editorState === currentEditorState) {\n      return;\n    }\n\n    const mergeAction = getMergeAction(prevEditorState, editorState, current, dirtyLeaves, dirtyElements, tags);\n\n    if (mergeAction === HISTORY_PUSH) {\n      if (redoStack.length !== 0) {\n        historyState.redoStack = [];\n        editor.dispatchCommand(lexical.CAN_REDO_COMMAND, false);\n      }\n\n      if (current !== null) {\n        undoStack.push({ ...current,\n          undoSelection: prevEditorState.read(lexical.$getSelection)\n        });\n        editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, true);\n      }\n    } else if (mergeAction === DISCARD_HISTORY_CANDIDATE) {\n      return;\n    } // Else we merge\n\n\n    historyState.current = {\n      editor,\n      editorState\n    };\n  };\n\n  const unregisterCommandListener = utils.mergeRegister(editor.registerCommand(lexical.UNDO_COMMAND, () => {\n    undo(editor, historyState);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.REDO_COMMAND, () => {\n    redo(editor, historyState);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CLEAR_EDITOR_COMMAND, () => {\n    clearHistory(historyState);\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CLEAR_HISTORY_COMMAND, () => {\n    clearHistory(historyState);\n    editor.dispatchCommand(lexical.CAN_REDO_COMMAND, false);\n    editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, false);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerUpdateListener(applyChange));\n  const unregisterUpdateListener = editor.registerUpdateListener(applyChange);\n  return () => {\n    unregisterCommandListener();\n    unregisterUpdateListener();\n  };\n}\nfunction createEmptyHistoryState() {\n  return {\n    current: null,\n    redoStack: [],\n    undoStack: []\n  };\n}\n\nexports.createEmptyHistoryState = createEmptyHistoryState;\nexports.registerHistory = registerHistory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/history/LexicalHistory.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/history/LexicalHistory.js":
/*!*********************************************************!*\
  !*** ./node_modules/@lexical/history/LexicalHistory.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalHistory =  true ? __webpack_require__(/*! ./LexicalHistory.dev.js */ \"(ssr)/./node_modules/@lexical/history/LexicalHistory.dev.js\") : 0\nmodule.exports = LexicalHistory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvaGlzdG9yeS9MZXhpY2FsSGlzdG9yeS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLHVCQUF1QixLQUFzQyxHQUFHLG1CQUFPLENBQUMsNEZBQXlCLElBQUksQ0FBbUM7QUFDeEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9oaXN0b3J5L0xleGljYWxIaXN0b3J5LmpzPzU2NDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxIaXN0b3J5ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyByZXF1aXJlKCcuL0xleGljYWxIaXN0b3J5LmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsSGlzdG9yeS5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbEhpc3Rvcnk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/history/LexicalHistory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/html/LexicalHtml.dev.js":
/*!*******************************************************!*\
  !*** ./node_modules/@lexical/html/LexicalHtml.dev.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar selection = __webpack_require__(/*! @lexical/selection */ \"(ssr)/./node_modules/@lexical/selection/LexicalSelection.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/** @module @lexical/html */\n/**\n * How you parse your html string to get a document is left up to you. In the browser you can use the native\n * DOMParser API to generate a document (see clipboard.ts), but to use in a headless environment you can use JSDom\n * or an equivilant library and pass in the document here.\n */\n\nfunction $generateNodesFromDOM(editor, dom) {\n  let lexicalNodes = [];\n  const elements = dom.body ? Array.from(dom.body.childNodes) : [];\n  const elementsLength = elements.length;\n\n  for (let i = 0; i < elementsLength; i++) {\n    const element = elements[i];\n\n    if (!IGNORE_TAGS.has(element.nodeName)) {\n      const lexicalNode = $createNodesFromDOM(element, editor);\n\n      if (lexicalNode !== null) {\n        lexicalNodes = lexicalNodes.concat(lexicalNode);\n      }\n    }\n  }\n\n  return lexicalNodes;\n}\nfunction $generateHtmlFromNodes(editor, selection) {\n  if (typeof document === 'undefined' || typeof window === 'undefined') {\n    throw new Error('To use $generateHtmlFromNodes in headless mode please initialize a headless browser implementation such as JSDom before calling this function.');\n  }\n\n  const container = document.createElement('div');\n  const root = lexical.$getRoot();\n  const topLevelChildren = root.getChildren();\n\n  for (let i = 0; i < topLevelChildren.length; i++) {\n    const topLevelNode = topLevelChildren[i];\n    $appendNodesToHTML(editor, topLevelNode, container, selection);\n  }\n\n  return container.innerHTML;\n}\n\nfunction $appendNodesToHTML(editor, currentNode, parentElement, selection$1 = null) {\n  let shouldInclude = selection$1 != null ? currentNode.isSelected() : true;\n  const shouldExclude = lexical.$isElementNode(currentNode) && currentNode.excludeFromCopy('html');\n  let target = currentNode;\n\n  if (selection$1 !== null) {\n    let clone = selection.$cloneWithProperties(currentNode);\n    clone = lexical.$isTextNode(clone) && selection$1 != null ? selection.$sliceSelectedTextNodeContent(selection$1, clone) : clone;\n    target = clone;\n  }\n\n  const children = lexical.$isElementNode(target) ? target.getChildren() : [];\n  const {\n    element,\n    after\n  } = target.exportDOM(editor);\n\n  if (!element) {\n    return false;\n  }\n\n  const fragment = new DocumentFragment();\n\n  for (let i = 0; i < children.length; i++) {\n    const childNode = children[i];\n    const shouldIncludeChild = $appendNodesToHTML(editor, childNode, fragment, selection$1);\n\n    if (!shouldInclude && lexical.$isElementNode(currentNode) && shouldIncludeChild && currentNode.extractWithChild(childNode, selection$1, 'html')) {\n      shouldInclude = true;\n    }\n  }\n\n  if (shouldInclude && !shouldExclude) {\n    element.append(fragment);\n    parentElement.append(element);\n\n    if (after) {\n      const newElement = after.call(target, element);\n      if (newElement) element.replaceWith(newElement);\n    }\n  } else {\n    parentElement.append(fragment);\n  }\n\n  return shouldInclude;\n}\n\nfunction getConversionFunction(domNode, editor) {\n  const {\n    nodeName\n  } = domNode;\n\n  const cachedConversions = editor._htmlConversions.get(nodeName.toLowerCase());\n\n  let currentConversion = null;\n\n  if (cachedConversions !== undefined) {\n    for (const cachedConversion of cachedConversions) {\n      const domConversion = cachedConversion(domNode);\n\n      if (domConversion !== null && (currentConversion === null || currentConversion.priority < domConversion.priority)) {\n        currentConversion = domConversion;\n      }\n    }\n  }\n\n  return currentConversion !== null ? currentConversion.conversion : null;\n}\n\nconst IGNORE_TAGS = new Set(['STYLE']);\n\nfunction $createNodesFromDOM(node, editor, forChildMap = new Map(), parentLexicalNode, preformatted = false) {\n  let lexicalNodes = [];\n\n  if (IGNORE_TAGS.has(node.nodeName)) {\n    return lexicalNodes;\n  }\n\n  let currentLexicalNode = null;\n  const transformFunction = getConversionFunction(node, editor);\n  const transformOutput = transformFunction ? transformFunction(node, undefined, preformatted) : null;\n  let postTransform = null;\n\n  if (transformOutput !== null) {\n    postTransform = transformOutput.after;\n    currentLexicalNode = transformOutput.node;\n\n    if (currentLexicalNode !== null) {\n      for (const [, forChildFunction] of forChildMap) {\n        currentLexicalNode = forChildFunction(currentLexicalNode, parentLexicalNode);\n\n        if (!currentLexicalNode) {\n          break;\n        }\n      }\n\n      if (currentLexicalNode) {\n        lexicalNodes.push(currentLexicalNode);\n      }\n    }\n\n    if (transformOutput.forChild != null) {\n      forChildMap.set(node.nodeName, transformOutput.forChild);\n    }\n  } // If the DOM node doesn't have a transformer, we don't know what\n  // to do with it but we still need to process any childNodes.\n\n\n  const children = node.childNodes;\n  let childLexicalNodes = [];\n\n  for (let i = 0; i < children.length; i++) {\n    childLexicalNodes.push(...$createNodesFromDOM(children[i], editor, new Map(forChildMap), currentLexicalNode, preformatted || (transformOutput && transformOutput.preformatted) === true));\n  }\n\n  if (postTransform != null) {\n    childLexicalNodes = postTransform(childLexicalNodes);\n  }\n\n  if (currentLexicalNode == null) {\n    // If it hasn't been converted to a LexicalNode, we hoist its children\n    // up to the same level as it.\n    lexicalNodes = lexicalNodes.concat(childLexicalNodes);\n  } else {\n    if (lexical.$isElementNode(currentLexicalNode)) {\n      // If the current node is a ElementNode after conversion,\n      // we can append all the children to it.\n      currentLexicalNode.append(...childLexicalNodes);\n    }\n  }\n\n  return lexicalNodes;\n}\n\nexports.$generateHtmlFromNodes = $generateHtmlFromNodes;\nexports.$generateNodesFromDOM = $generateNodesFromDOM;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/html/LexicalHtml.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/html/LexicalHtml.js":
/*!***************************************************!*\
  !*** ./node_modules/@lexical/html/LexicalHtml.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalHtml =  true ? __webpack_require__(/*! ./LexicalHtml.dev.js */ \"(ssr)/./node_modules/@lexical/html/LexicalHtml.dev.js\") : 0\nmodule.exports = LexicalHtml;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvaHRtbC9MZXhpY2FsSHRtbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLG9CQUFvQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsbUZBQXNCLElBQUksQ0FBZ0M7QUFDL0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9odG1sL0xleGljYWxIdG1sLmpzPzRhYWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxIdG1sID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyByZXF1aXJlKCcuL0xleGljYWxIdG1sLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsSHRtbC5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbEh0bWw7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/html/LexicalHtml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/link/LexicalLink.dev.js":
/*!*******************************************************!*\
  !*** ./node_modules/@lexical/link/LexicalLink.dev.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/** @module @lexical/link */\n\n/** @noInheritDoc */\nclass LinkNode extends lexical.ElementNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  static getType() {\n    return 'link';\n  }\n\n  static clone(node) {\n    return new LinkNode(node.__url, {\n      rel: node.__rel,\n      target: node.__target\n    }, node.__key);\n  }\n\n  constructor(url, attributes = {}, key) {\n    super(key);\n    const {\n      target = null,\n      rel = null\n    } = attributes;\n    this.__url = url;\n    this.__target = target;\n    this.__rel = rel;\n  }\n\n  createDOM(config) {\n    const element = document.createElement('a');\n    element.href = this.__url;\n\n    if (this.__target !== null) {\n      element.target = this.__target;\n    }\n\n    if (this.__rel !== null) {\n      element.rel = this.__rel;\n    }\n\n    utils.addClassNamesToElement(element, config.theme.link);\n    return element;\n  }\n\n  updateDOM(prevNode, anchor, config) {\n    const url = this.__url;\n    const target = this.__target;\n    const rel = this.__rel;\n\n    if (url !== prevNode.__url) {\n      anchor.href = url;\n    }\n\n    if (target !== prevNode.__target) {\n      if (target) {\n        anchor.target = target;\n      } else {\n        anchor.removeAttribute('target');\n      }\n    }\n\n    if (rel !== prevNode.__rel) {\n      if (rel) {\n        anchor.rel = rel;\n      } else {\n        anchor.removeAttribute('rel');\n      }\n    }\n\n    return false;\n  }\n\n  static importDOM() {\n    return {\n      a: node => ({\n        conversion: convertAnchorElement,\n        priority: 1\n      })\n    };\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createLinkNode(serializedNode.url, {\n      rel: serializedNode.rel,\n      target: serializedNode.target\n    });\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      rel: this.getRel(),\n      target: this.getTarget(),\n      type: 'link',\n      url: this.getURL(),\n      version: 1\n    };\n  }\n\n  getURL() {\n    return this.getLatest().__url;\n  }\n\n  setURL(url) {\n    const writable = this.getWritable();\n    writable.__url = url;\n  }\n\n  getTarget() {\n    return this.getLatest().__target;\n  }\n\n  setTarget(target) {\n    const writable = this.getWritable();\n    writable.__target = target;\n  }\n\n  getRel() {\n    return this.getLatest().__rel;\n  }\n\n  setRel(rel) {\n    const writable = this.getWritable();\n    writable.__rel = rel;\n  }\n\n  insertNewAfter(selection, restoreSelection = true) {\n    const element = this.getParentOrThrow().insertNewAfter(selection, restoreSelection);\n\n    if (lexical.$isElementNode(element)) {\n      const linkNode = $createLinkNode(this.__url, {\n        rel: this.__rel,\n        target: this.__target\n      });\n      element.append(linkNode);\n      return linkNode;\n    }\n\n    return null;\n  }\n\n  canInsertTextBefore() {\n    return false;\n  }\n\n  canInsertTextAfter() {\n    return false;\n  }\n\n  canBeEmpty() {\n    return false;\n  }\n\n  isInline() {\n    return true;\n  }\n\n  extractWithChild(child, selection, destination) {\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    const anchorNode = selection.anchor.getNode();\n    const focusNode = selection.focus.getNode();\n    return this.isParentOf(anchorNode) && this.isParentOf(focusNode) && selection.getTextContent().length > 0;\n  }\n\n}\n\nfunction convertAnchorElement(domNode) {\n  let node = null;\n\n  if (utils.isHTMLAnchorElement(domNode)) {\n    const content = domNode.textContent;\n\n    if (content !== null && content !== '') {\n      node = $createLinkNode(domNode.getAttribute('href') || '', {\n        rel: domNode.getAttribute('rel'),\n        target: domNode.getAttribute('target')\n      });\n    }\n  }\n\n  return {\n    node\n  };\n}\n\nfunction $createLinkNode(url, attributes) {\n  return lexical.$applyNodeReplacement(new LinkNode(url, attributes));\n}\nfunction $isLinkNode(node) {\n  return node instanceof LinkNode;\n}\n// Custom node type to override `canInsertTextAfter` that will\n// allow typing within the link\nclass AutoLinkNode extends LinkNode {\n  static getType() {\n    return 'autolink';\n  }\n\n  static clone(node) {\n    return new AutoLinkNode(node.__url, {\n      rel: node.__rel,\n      target: node.__target\n    }, node.__key);\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createAutoLinkNode(serializedNode.url, {\n      rel: serializedNode.rel,\n      target: serializedNode.target\n    });\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  static importDOM() {\n    // TODO: Should link node should handle the import over autolink?\n    return null;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      type: 'autolink',\n      version: 1\n    };\n  }\n\n  insertNewAfter(selection, restoreSelection = true) {\n    const element = this.getParentOrThrow().insertNewAfter(selection, restoreSelection);\n\n    if (lexical.$isElementNode(element)) {\n      const linkNode = $createAutoLinkNode(this.__url, {\n        rel: this._rel,\n        target: this.__target\n      });\n      element.append(linkNode);\n      return linkNode;\n    }\n\n    return null;\n  }\n\n}\nfunction $createAutoLinkNode(url, attributes) {\n  return lexical.$applyNodeReplacement(new AutoLinkNode(url, attributes));\n}\nfunction $isAutoLinkNode(node) {\n  return node instanceof AutoLinkNode;\n}\nconst TOGGLE_LINK_COMMAND = lexical.createCommand('TOGGLE_LINK_COMMAND');\nfunction toggleLink(url, attributes = {}) {\n  const {\n    target\n  } = attributes;\n  const rel = attributes.rel === undefined ? 'noopener' : attributes.rel;\n  const selection = lexical.$getSelection();\n\n  if (!lexical.$isRangeSelection(selection)) {\n    return;\n  }\n\n  const nodes = selection.extract();\n\n  if (url === null) {\n    // Remove LinkNodes\n    nodes.forEach(node => {\n      const parent = node.getParent();\n\n      if ($isLinkNode(parent)) {\n        const children = parent.getChildren();\n\n        for (let i = 0; i < children.length; i++) {\n          parent.insertBefore(children[i]);\n        }\n\n        parent.remove();\n      }\n    });\n  } else {\n    // Add or merge LinkNodes\n    if (nodes.length === 1) {\n      const firstNode = nodes[0]; // if the first node is a LinkNode or if its\n      // parent is a LinkNode, we update the URL, target and rel.\n\n      const linkNode = $isLinkNode(firstNode) ? firstNode : $getLinkAncestor(firstNode);\n\n      if (linkNode !== null) {\n        linkNode.setURL(url);\n\n        if (target !== undefined) {\n          linkNode.setTarget(target);\n        }\n\n        if (rel !== null) {\n          linkNode.setRel(rel);\n        }\n\n        return;\n      }\n    }\n\n    let prevParent = null;\n    let linkNode = null;\n    nodes.forEach(node => {\n      const parent = node.getParent();\n\n      if (parent === linkNode || parent === null || lexical.$isElementNode(node) && !node.isInline()) {\n        return;\n      }\n\n      if ($isLinkNode(parent)) {\n        linkNode = parent;\n        parent.setURL(url);\n\n        if (target !== undefined) {\n          parent.setTarget(target);\n        }\n\n        if (rel !== null) {\n          linkNode.setRel(rel);\n        }\n\n        return;\n      }\n\n      if (!parent.is(prevParent)) {\n        prevParent = parent;\n        linkNode = $createLinkNode(url, {\n          rel,\n          target\n        });\n\n        if ($isLinkNode(parent)) {\n          if (node.getPreviousSibling() === null) {\n            parent.insertBefore(linkNode);\n          } else {\n            parent.insertAfter(linkNode);\n          }\n        } else {\n          node.insertBefore(linkNode);\n        }\n      }\n\n      if ($isLinkNode(node)) {\n        if (node.is(linkNode)) {\n          return;\n        }\n\n        if (linkNode !== null) {\n          const children = node.getChildren();\n\n          for (let i = 0; i < children.length; i++) {\n            linkNode.append(children[i]);\n          }\n        }\n\n        node.remove();\n        return;\n      }\n\n      if (linkNode !== null) {\n        linkNode.append(node);\n      }\n    });\n  }\n}\n\nfunction $getLinkAncestor(node) {\n  return $getAncestor(node, ancestor => $isLinkNode(ancestor));\n}\n\nfunction $getAncestor(node, predicate) {\n  let parent = node;\n\n  while (parent !== null && (parent = parent.getParent()) !== null && !predicate(parent));\n\n  return parent;\n}\n\nexports.$createAutoLinkNode = $createAutoLinkNode;\nexports.$createLinkNode = $createLinkNode;\nexports.$isAutoLinkNode = $isAutoLinkNode;\nexports.$isLinkNode = $isLinkNode;\nexports.AutoLinkNode = AutoLinkNode;\nexports.LinkNode = LinkNode;\nexports.TOGGLE_LINK_COMMAND = TOGGLE_LINK_COMMAND;\nexports.toggleLink = toggleLink;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/link/LexicalLink.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/link/LexicalLink.js":
/*!***************************************************!*\
  !*** ./node_modules/@lexical/link/LexicalLink.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalLink =  true ? __webpack_require__(/*! ./LexicalLink.dev.js */ \"(ssr)/./node_modules/@lexical/link/LexicalLink.dev.js\") : 0\nmodule.exports = LexicalLink;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvbGluay9MZXhpY2FsTGluay5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLG9CQUFvQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsbUZBQXNCLElBQUksQ0FBZ0M7QUFDL0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9saW5rL0xleGljYWxMaW5rLmpzP2Y2OGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxMaW5rID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyByZXF1aXJlKCcuL0xleGljYWxMaW5rLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsTGluay5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbExpbms7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/link/LexicalLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/list/LexicalList.dev.js":
/*!*******************************************************!*\
  !*** ./node_modules/@lexical/list/LexicalList.dev.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $getListDepth(listNode) {\n  let depth = 1;\n  let parent = listNode.getParent();\n\n  while (parent != null) {\n    if ($isListItemNode(parent)) {\n      const parentList = parent.getParent();\n\n      if ($isListNode(parentList)) {\n        depth++;\n        parent = parentList.getParent();\n        continue;\n      }\n\n      {\n        throw Error(`A ListItemNode must have a ListNode for a parent.`);\n      }\n    }\n\n    return depth;\n  }\n\n  return depth;\n}\nfunction $getTopListNode(listItem) {\n  let list = listItem.getParent();\n\n  if (!$isListNode(list)) {\n    {\n      throw Error(`A ListItemNode must have a ListNode for a parent.`);\n    }\n  }\n\n  let parent = list;\n\n  while (parent !== null) {\n    parent = parent.getParent();\n\n    if ($isListNode(parent)) {\n      list = parent;\n    }\n  }\n\n  return list;\n}\n\nfunction $getAllListItems(node) {\n  let listItemNodes = [];\n  const listChildren = node.getChildren().filter($isListItemNode);\n\n  for (let i = 0; i < listChildren.length; i++) {\n    const listItemNode = listChildren[i];\n    const firstChild = listItemNode.getFirstChild();\n\n    if ($isListNode(firstChild)) {\n      listItemNodes = listItemNodes.concat($getAllListItems(firstChild));\n    } else {\n      listItemNodes.push(listItemNode);\n    }\n  }\n\n  return listItemNodes;\n}\nfunction isNestedListNode(node) {\n  return $isListItemNode(node) && $isListNode(node.getFirstChild());\n} // TODO: rewrite with $findMatchingParent or *nodeOfType\nfunction $removeHighestEmptyListParent(sublist) {\n  // Nodes may be repeatedly indented, to create deeply nested lists that each\n  // contain just one bullet.\n  // Our goal is to remove these (empty) deeply nested lists. The easiest\n  // way to do that is crawl back up the tree until we find a node that has siblings\n  // (e.g. is actually part of the list contents) and delete that, or delete\n  // the root of the list (if no list nodes have siblings.)\n  let emptyListPtr = sublist;\n\n  while (emptyListPtr.getNextSibling() == null && emptyListPtr.getPreviousSibling() == null) {\n    const parent = emptyListPtr.getParent();\n\n    if (parent == null || !($isListItemNode(emptyListPtr) || $isListNode(emptyListPtr))) {\n      break;\n    }\n\n    emptyListPtr = parent;\n  }\n\n  emptyListPtr.remove();\n}\nfunction wrapInListItem(node) {\n  const listItemWrapper = $createListItemNode();\n  return listItemWrapper.append(node);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $isSelectingEmptyListItem(anchorNode, nodes) {\n  return $isListItemNode(anchorNode) && (nodes.length === 0 || nodes.length === 1 && anchorNode.is(nodes[0]) && anchorNode.getChildrenSize() === 0);\n}\n\nfunction $getListItemValue(listItem) {\n  const list = listItem.getParent();\n  let value = 1;\n\n  if (list != null) {\n    if (!$isListNode(list)) {\n      {\n        throw Error(`$getListItemValue: list node is not parent of list item node`);\n      }\n    } else {\n      value = list.getStart();\n    }\n  }\n\n  const siblings = listItem.getPreviousSiblings();\n\n  for (let i = 0; i < siblings.length; i++) {\n    const sibling = siblings[i];\n\n    if ($isListItemNode(sibling) && !$isListNode(sibling.getFirstChild())) {\n      value++;\n    }\n  }\n\n  return value;\n}\n\nfunction insertList(editor, listType) {\n  editor.update(() => {\n    const selection = lexical.$getSelection();\n\n    if (lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection)) {\n      const nodes = selection.getNodes();\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const anchorNodeParent = anchorNode.getParent();\n\n      if ($isSelectingEmptyListItem(anchorNode, nodes)) {\n        const list = $createListNode(listType);\n\n        if (lexical.$isRootOrShadowRoot(anchorNodeParent)) {\n          anchorNode.replace(list);\n          const listItem = $createListItemNode();\n\n          if (lexical.$isElementNode(anchorNode)) {\n            listItem.setFormat(anchorNode.getFormatType());\n            listItem.setIndent(anchorNode.getIndent());\n          }\n\n          list.append(listItem);\n        } else if ($isListItemNode(anchorNode)) {\n          const parent = anchorNode.getParentOrThrow();\n          append(list, parent.getChildren());\n          parent.replace(list);\n        }\n\n        return;\n      } else {\n        const handled = new Set();\n\n        for (let i = 0; i < nodes.length; i++) {\n          const node = nodes[i];\n\n          if (lexical.$isElementNode(node) && node.isEmpty() && !handled.has(node.getKey())) {\n            createListOrMerge(node, listType);\n            continue;\n          }\n\n          if (lexical.$isLeafNode(node)) {\n            let parent = node.getParent();\n\n            while (parent != null) {\n              const parentKey = parent.getKey();\n\n              if ($isListNode(parent)) {\n                if (!handled.has(parentKey)) {\n                  const newListNode = $createListNode(listType);\n                  append(newListNode, parent.getChildren());\n                  parent.replace(newListNode);\n                  updateChildrenListItemValue(newListNode);\n                  handled.add(parentKey);\n                }\n\n                break;\n              } else {\n                const nextParent = parent.getParent();\n\n                if (lexical.$isRootOrShadowRoot(nextParent) && !handled.has(parentKey)) {\n                  handled.add(parentKey);\n                  createListOrMerge(parent, listType);\n                  break;\n                }\n\n                parent = nextParent;\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n}\n\nfunction append(node, nodesToAppend) {\n  node.splice(node.getChildrenSize(), 0, nodesToAppend);\n}\n\nfunction createListOrMerge(node, listType) {\n  if ($isListNode(node)) {\n    return node;\n  }\n\n  const previousSibling = node.getPreviousSibling();\n  const nextSibling = node.getNextSibling();\n  const listItem = $createListItemNode();\n  listItem.setFormat(node.getFormatType());\n  listItem.setIndent(node.getIndent());\n  append(listItem, node.getChildren());\n\n  if ($isListNode(previousSibling) && listType === previousSibling.getListType()) {\n    previousSibling.append(listItem);\n    node.remove(); // if the same type of list is on both sides, merge them.\n\n    if ($isListNode(nextSibling) && listType === nextSibling.getListType()) {\n      append(previousSibling, nextSibling.getChildren());\n      nextSibling.remove();\n    }\n\n    return previousSibling;\n  } else if ($isListNode(nextSibling) && listType === nextSibling.getListType()) {\n    nextSibling.getFirstChildOrThrow().insertBefore(listItem);\n    node.remove();\n    return nextSibling;\n  } else {\n    const list = $createListNode(listType);\n    list.append(listItem);\n    node.replace(list);\n    updateChildrenListItemValue(list);\n    return list;\n  }\n}\n\nfunction mergeLists(list1, list2) {\n  const listItem1 = list1.getLastChild();\n  const listItem2 = list2.getFirstChild();\n\n  if (listItem1 && listItem2 && isNestedListNode(listItem1) && isNestedListNode(listItem2)) {\n    mergeLists(listItem1.getFirstChild(), listItem2.getFirstChild());\n    listItem2.remove();\n  }\n\n  const toMerge = list2.getChildren();\n\n  if (toMerge.length > 0) {\n    list1.append(...toMerge);\n    updateChildrenListItemValue(list1);\n  }\n\n  list2.remove();\n}\nfunction removeList(editor) {\n  editor.update(() => {\n    const selection = lexical.$getSelection();\n\n    if (lexical.$isRangeSelection(selection)) {\n      const listNodes = new Set();\n      const nodes = selection.getNodes();\n      const anchorNode = selection.anchor.getNode();\n\n      if ($isSelectingEmptyListItem(anchorNode, nodes)) {\n        listNodes.add($getTopListNode(anchorNode));\n      } else {\n        for (let i = 0; i < nodes.length; i++) {\n          const node = nodes[i];\n\n          if (lexical.$isLeafNode(node)) {\n            const listItemNode = utils.$getNearestNodeOfType(node, ListItemNode);\n\n            if (listItemNode != null) {\n              listNodes.add($getTopListNode(listItemNode));\n            }\n          }\n        }\n      }\n\n      for (const listNode of listNodes) {\n        let insertionPoint = listNode;\n        const listItems = $getAllListItems(listNode);\n\n        for (const listItemNode of listItems) {\n          const paragraph = lexical.$createParagraphNode();\n          append(paragraph, listItemNode.getChildren());\n          insertionPoint.insertAfter(paragraph);\n          insertionPoint = paragraph; // When the anchor and focus fall on the textNode\n          // we don't have to change the selection because the textNode will be appended to\n          // the newly generated paragraph.\n          // When selection is in empty nested list item, selection is actually on the listItemNode.\n          // When the corresponding listItemNode is deleted and replaced by the newly generated paragraph\n          // we should manually set the selection's focus and anchor to the newly generated paragraph.\n\n          if (listItemNode.__key === selection.anchor.key) {\n            selection.anchor.set(paragraph.getKey(), 0, 'element');\n          }\n\n          if (listItemNode.__key === selection.focus.key) {\n            selection.focus.set(paragraph.getKey(), 0, 'element');\n          }\n\n          listItemNode.remove();\n        }\n\n        listNode.remove();\n      }\n    }\n  });\n}\nfunction updateChildrenListItemValue(list, children) {\n  const childrenOrExisting = children || list.getChildren();\n\n  if (childrenOrExisting !== undefined) {\n    for (let i = 0; i < childrenOrExisting.length; i++) {\n      const child = childrenOrExisting[i];\n\n      if ($isListItemNode(child)) {\n        const prevValue = child.getValue();\n        const nextValue = $getListItemValue(child);\n\n        if (prevValue !== nextValue) {\n          child.setValue(nextValue);\n        }\n      }\n    }\n  }\n}\nfunction $handleIndent(listItemNode) {\n  // go through each node and decide where to move it.\n  const removed = new Set();\n\n  if (isNestedListNode(listItemNode) || removed.has(listItemNode.getKey())) {\n    return;\n  }\n\n  const parent = listItemNode.getParent(); // We can cast both of the below `isNestedListNode` only returns a boolean type instead of a user-defined type guards\n\n  const nextSibling = listItemNode.getNextSibling();\n  const previousSibling = listItemNode.getPreviousSibling(); // if there are nested lists on either side, merge them all together.\n\n  if (isNestedListNode(nextSibling) && isNestedListNode(previousSibling)) {\n    const innerList = previousSibling.getFirstChild();\n\n    if ($isListNode(innerList)) {\n      innerList.append(listItemNode);\n      const nextInnerList = nextSibling.getFirstChild();\n\n      if ($isListNode(nextInnerList)) {\n        const children = nextInnerList.getChildren();\n        append(innerList, children);\n        nextSibling.remove();\n        removed.add(nextSibling.getKey());\n      }\n\n      updateChildrenListItemValue(innerList);\n    }\n  } else if (isNestedListNode(nextSibling)) {\n    // if the ListItemNode is next to a nested ListNode, merge them\n    const innerList = nextSibling.getFirstChild();\n\n    if ($isListNode(innerList)) {\n      const firstChild = innerList.getFirstChild();\n\n      if (firstChild !== null) {\n        firstChild.insertBefore(listItemNode);\n      }\n\n      updateChildrenListItemValue(innerList);\n    }\n  } else if (isNestedListNode(previousSibling)) {\n    const innerList = previousSibling.getFirstChild();\n\n    if ($isListNode(innerList)) {\n      innerList.append(listItemNode);\n      updateChildrenListItemValue(innerList);\n    }\n  } else {\n    // otherwise, we need to create a new nested ListNode\n    if ($isListNode(parent)) {\n      const newListItem = $createListItemNode();\n      const newList = $createListNode(parent.getListType());\n      newListItem.append(newList);\n      newList.append(listItemNode);\n\n      if (previousSibling) {\n        previousSibling.insertAfter(newListItem);\n      } else if (nextSibling) {\n        nextSibling.insertBefore(newListItem);\n      } else {\n        parent.append(newListItem);\n      }\n\n      updateChildrenListItemValue(newList);\n    }\n  }\n\n  if ($isListNode(parent)) {\n    updateChildrenListItemValue(parent);\n  }\n}\nfunction $handleOutdent(listItemNode) {\n  // go through each node and decide where to move it.\n  if (isNestedListNode(listItemNode)) {\n    return;\n  }\n\n  const parentList = listItemNode.getParent();\n  const grandparentListItem = parentList ? parentList.getParent() : undefined;\n  const greatGrandparentList = grandparentListItem ? grandparentListItem.getParent() : undefined; // If it doesn't have these ancestors, it's not indented.\n\n  if ($isListNode(greatGrandparentList) && $isListItemNode(grandparentListItem) && $isListNode(parentList)) {\n    // if it's the first child in it's parent list, insert it into the\n    // great grandparent list before the grandparent\n    const firstChild = parentList ? parentList.getFirstChild() : undefined;\n    const lastChild = parentList ? parentList.getLastChild() : undefined;\n\n    if (listItemNode.is(firstChild)) {\n      grandparentListItem.insertBefore(listItemNode);\n\n      if (parentList.isEmpty()) {\n        grandparentListItem.remove();\n      } // if it's the last child in it's parent list, insert it into the\n      // great grandparent list after the grandparent.\n\n    } else if (listItemNode.is(lastChild)) {\n      grandparentListItem.insertAfter(listItemNode);\n\n      if (parentList.isEmpty()) {\n        grandparentListItem.remove();\n      }\n    } else {\n      // otherwise, we need to split the siblings into two new nested lists\n      const listType = parentList.getListType();\n      const previousSiblingsListItem = $createListItemNode();\n      const previousSiblingsList = $createListNode(listType);\n      previousSiblingsListItem.append(previousSiblingsList);\n      listItemNode.getPreviousSiblings().forEach(sibling => previousSiblingsList.append(sibling));\n      const nextSiblingsListItem = $createListItemNode();\n      const nextSiblingsList = $createListNode(listType);\n      nextSiblingsListItem.append(nextSiblingsList);\n      append(nextSiblingsList, listItemNode.getNextSiblings()); // put the sibling nested lists on either side of the grandparent list item in the great grandparent.\n\n      grandparentListItem.insertBefore(previousSiblingsListItem);\n      grandparentListItem.insertAfter(nextSiblingsListItem); // replace the grandparent list item (now between the siblings) with the outdented list item.\n\n      grandparentListItem.replace(listItemNode);\n    }\n\n    updateChildrenListItemValue(parentList);\n    updateChildrenListItemValue(greatGrandparentList);\n  }\n}\nfunction $handleListInsertParagraph() {\n  const selection = lexical.$getSelection();\n\n  if (!lexical.$isRangeSelection(selection) || !selection.isCollapsed()) {\n    return false;\n  } // Only run this code on empty list items\n\n\n  const anchor = selection.anchor.getNode();\n\n  if (!$isListItemNode(anchor) || anchor.getTextContent() !== '') {\n    return false;\n  }\n\n  const topListNode = $getTopListNode(anchor);\n  const parent = anchor.getParent();\n\n  if (!$isListNode(parent)) {\n    throw Error(`A ListItemNode must have a ListNode for a parent.`);\n  }\n\n  const grandparent = parent.getParent();\n  let replacementNode;\n\n  if (lexical.$isRootOrShadowRoot(grandparent)) {\n    replacementNode = lexical.$createParagraphNode();\n    topListNode.insertAfter(replacementNode);\n  } else if ($isListItemNode(grandparent)) {\n    replacementNode = $createListItemNode();\n    grandparent.insertAfter(replacementNode);\n  } else {\n    return false;\n  }\n\n  replacementNode.select();\n  const nextSiblings = anchor.getNextSiblings();\n\n  if (nextSiblings.length > 0) {\n    const newList = $createListNode(parent.getListType());\n\n    if (lexical.$isParagraphNode(replacementNode)) {\n      replacementNode.insertAfter(newList);\n    } else {\n      const newListItem = $createListItemNode();\n      newListItem.append(newList);\n      replacementNode.insertAfter(newListItem);\n    }\n\n    nextSiblings.forEach(sibling => {\n      sibling.remove();\n      newList.append(sibling);\n    });\n  } // Don't leave hanging nested empty lists\n\n\n  $removeHighestEmptyListParent(anchor);\n  return true;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ListItemNode extends lexical.ElementNode {\n  /** @internal */\n\n  /** @internal */\n  static getType() {\n    return 'listitem';\n  }\n\n  static clone(node) {\n    return new ListItemNode(node.__value, node.__checked, node.__key);\n  }\n\n  constructor(value, checked, key) {\n    super(key);\n    this.__value = value === undefined ? 1 : value;\n    this.__checked = checked;\n  }\n\n  createDOM(config) {\n    const element = document.createElement('li');\n    const parent = this.getParent();\n\n    if ($isListNode(parent) && parent.getListType() === 'check') {\n      updateListItemChecked(element, this, null);\n    }\n\n    element.value = this.__value;\n    $setListItemThemeClassNames(element, config.theme, this);\n    return element;\n  }\n\n  updateDOM(prevNode, dom, config) {\n    const parent = this.getParent();\n\n    if ($isListNode(parent) && parent.getListType() === 'check') {\n      updateListItemChecked(dom, this, prevNode);\n    } // @ts-expect-error - this is always HTMLListItemElement\n\n\n    dom.value = this.__value;\n    $setListItemThemeClassNames(dom, config.theme, this);\n    return false;\n  }\n\n  static transform() {\n    return node => {\n      const parent = node.getParent();\n\n      if ($isListNode(parent)) {\n        updateChildrenListItemValue(parent);\n\n        if (parent.getListType() !== 'check' && node.getChecked() != null) {\n          node.setChecked(undefined);\n        }\n      }\n    };\n  }\n\n  static importDOM() {\n    return {\n      li: node => ({\n        conversion: convertListItemElement,\n        priority: 0\n      })\n    };\n  }\n\n  static importJSON(serializedNode) {\n    const node = new ListItemNode(serializedNode.value, serializedNode.checked);\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      checked: this.getChecked(),\n      type: 'listitem',\n      value: this.getValue(),\n      version: 1\n    };\n  }\n\n  append(...nodes) {\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n\n      if (lexical.$isElementNode(node) && this.canMergeWith(node)) {\n        const children = node.getChildren();\n        this.append(...children);\n        node.remove();\n      } else {\n        super.append(node);\n      }\n    }\n\n    return this;\n  }\n\n  replace(replaceWithNode, includeChildren) {\n    if ($isListItemNode(replaceWithNode)) {\n      return super.replace(replaceWithNode);\n    }\n\n    this.setIndent(0);\n    const list = this.getParentOrThrow();\n    if (!$isListNode(list)) return replaceWithNode;\n\n    if (list.__first === this.getKey()) {\n      list.insertBefore(replaceWithNode);\n    } else if (list.__last === this.getKey()) {\n      list.insertAfter(replaceWithNode);\n    } else {\n      // Split the list\n      const newList = $createListNode(list.getListType());\n      let nextSibling = this.getNextSibling();\n\n      while (nextSibling) {\n        const nodeToAppend = nextSibling;\n        nextSibling = nextSibling.getNextSibling();\n        newList.append(nodeToAppend);\n      }\n\n      list.insertAfter(replaceWithNode);\n      replaceWithNode.insertAfter(newList);\n    }\n\n    if (includeChildren) {\n      this.getChildren().forEach(child => {\n        replaceWithNode.append(child);\n      });\n    }\n\n    this.remove();\n\n    if (list.getChildrenSize() === 0) {\n      list.remove();\n    }\n\n    return replaceWithNode;\n  }\n\n  insertAfter(node, restoreSelection = true) {\n    const listNode = this.getParentOrThrow();\n\n    if (!$isListNode(listNode)) {\n      {\n        throw Error(`insertAfter: list node is not parent of list item node`);\n      }\n    }\n\n    const siblings = this.getNextSiblings();\n\n    if ($isListItemNode(node)) {\n      const after = super.insertAfter(node, restoreSelection);\n      const afterListNode = node.getParentOrThrow();\n\n      if ($isListNode(afterListNode)) {\n        updateChildrenListItemValue(afterListNode);\n      }\n\n      return after;\n    } // Attempt to merge if the list is of the same type.\n\n\n    if ($isListNode(node) && node.getListType() === listNode.getListType()) {\n      let child = node;\n      const children = node.getChildren();\n\n      for (let i = children.length - 1; i >= 0; i--) {\n        child = children[i];\n        this.insertAfter(child, restoreSelection);\n      }\n\n      return child;\n    } // Otherwise, split the list\n    // Split the lists and insert the node in between them\n\n\n    listNode.insertAfter(node, restoreSelection);\n\n    if (siblings.length !== 0) {\n      const newListNode = $createListNode(listNode.getListType());\n      siblings.forEach(sibling => newListNode.append(sibling));\n      node.insertAfter(newListNode, restoreSelection);\n    }\n\n    return node;\n  }\n\n  remove(preserveEmptyParent) {\n    const prevSibling = this.getPreviousSibling();\n    const nextSibling = this.getNextSibling();\n    super.remove(preserveEmptyParent);\n\n    if (prevSibling && nextSibling && isNestedListNode(prevSibling) && isNestedListNode(nextSibling)) {\n      mergeLists(prevSibling.getFirstChild(), nextSibling.getFirstChild());\n      nextSibling.remove();\n    } else if (nextSibling) {\n      const parent = nextSibling.getParent();\n\n      if ($isListNode(parent)) {\n        updateChildrenListItemValue(parent);\n      }\n    }\n  }\n\n  insertNewAfter(_, restoreSelection = true) {\n    const newElement = $createListItemNode(this.__checked == null ? undefined : false);\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n\n  collapseAtStart(selection) {\n    const paragraph = lexical.$createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => paragraph.append(child));\n    const listNode = this.getParentOrThrow();\n    const listNodeParent = listNode.getParentOrThrow();\n    const isIndented = $isListItemNode(listNodeParent);\n\n    if (listNode.getChildrenSize() === 1) {\n      if (isIndented) {\n        // if the list node is nested, we just want to remove it,\n        // effectively unindenting it.\n        listNode.remove();\n        listNodeParent.select();\n      } else {\n        listNode.insertBefore(paragraph);\n        listNode.remove(); // If we have selection on the list item, we'll need to move it\n        // to the paragraph\n\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        const key = paragraph.getKey();\n\n        if (anchor.type === 'element' && anchor.getNode().is(this)) {\n          anchor.set(key, anchor.offset, 'element');\n        }\n\n        if (focus.type === 'element' && focus.getNode().is(this)) {\n          focus.set(key, focus.offset, 'element');\n        }\n      }\n    } else {\n      listNode.insertBefore(paragraph);\n      this.remove();\n    }\n\n    return true;\n  }\n\n  getValue() {\n    const self = this.getLatest();\n    return self.__value;\n  }\n\n  setValue(value) {\n    const self = this.getWritable();\n    self.__value = value;\n  }\n\n  getChecked() {\n    const self = this.getLatest();\n    return self.__checked;\n  }\n\n  setChecked(checked) {\n    const self = this.getWritable();\n    self.__checked = checked;\n  }\n\n  toggleChecked() {\n    this.setChecked(!this.__checked);\n  }\n\n  getIndent() {\n    // If we don't have a parent, we are likely serializing\n    const parent = this.getParent();\n\n    if (parent === null) {\n      return this.getLatest().__indent;\n    } // ListItemNode should always have a ListNode for a parent.\n\n\n    let listNodeParent = parent.getParentOrThrow();\n    let indentLevel = 0;\n\n    while ($isListItemNode(listNodeParent)) {\n      listNodeParent = listNodeParent.getParentOrThrow().getParentOrThrow();\n      indentLevel++;\n    }\n\n    return indentLevel;\n  }\n\n  setIndent(indent) {\n    let currentIndent = this.getIndent();\n\n    while (currentIndent !== indent) {\n      if (currentIndent < indent) {\n        $handleIndent(this);\n        currentIndent++;\n      } else {\n        $handleOutdent(this);\n        currentIndent--;\n      }\n    }\n\n    return this;\n  }\n\n  insertBefore(nodeToInsert) {\n    if ($isListItemNode(nodeToInsert)) {\n      const parent = this.getParentOrThrow();\n\n      if ($isListNode(parent)) {\n        const siblings = this.getNextSiblings();\n        updateChildrenListItemValue(parent, siblings);\n      }\n    }\n\n    return super.insertBefore(nodeToInsert);\n  }\n\n  canInsertAfter(node) {\n    return $isListItemNode(node);\n  }\n\n  canReplaceWith(replacement) {\n    return $isListItemNode(replacement);\n  }\n\n  canMergeWith(node) {\n    return lexical.$isParagraphNode(node) || $isListItemNode(node);\n  }\n\n  extractWithChild(child, selection) {\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    const anchorNode = selection.anchor.getNode();\n    const focusNode = selection.focus.getNode();\n    return this.isParentOf(anchorNode) && this.isParentOf(focusNode) && this.getTextContent().length === selection.getTextContent().length;\n  }\n\n  isParentRequired() {\n    return true;\n  }\n\n  createParentElementNode() {\n    return $createListNode('bullet');\n  }\n\n}\n\nfunction $setListItemThemeClassNames(dom, editorThemeClasses, node) {\n  const classesToAdd = [];\n  const classesToRemove = [];\n  const listTheme = editorThemeClasses.list;\n  const listItemClassName = listTheme ? listTheme.listitem : undefined;\n  let nestedListItemClassName;\n\n  if (listTheme && listTheme.nested) {\n    nestedListItemClassName = listTheme.nested.listitem;\n  }\n\n  if (listItemClassName !== undefined) {\n    const listItemClasses = listItemClassName.split(' ');\n    classesToAdd.push(...listItemClasses);\n  }\n\n  if (listTheme) {\n    const parentNode = node.getParent();\n    const isCheckList = $isListNode(parentNode) && parentNode.getListType() === 'check';\n    const checked = node.getChecked();\n\n    if (!isCheckList || checked) {\n      classesToRemove.push(listTheme.listitemUnchecked);\n    }\n\n    if (!isCheckList || !checked) {\n      classesToRemove.push(listTheme.listitemChecked);\n    }\n\n    if (isCheckList) {\n      classesToAdd.push(checked ? listTheme.listitemChecked : listTheme.listitemUnchecked);\n    }\n  }\n\n  if (nestedListItemClassName !== undefined) {\n    const nestedListItemClasses = nestedListItemClassName.split(' ');\n\n    if (node.getChildren().some(child => $isListNode(child))) {\n      classesToAdd.push(...nestedListItemClasses);\n    } else {\n      classesToRemove.push(...nestedListItemClasses);\n    }\n  }\n\n  if (classesToRemove.length > 0) {\n    utils.removeClassNamesFromElement(dom, ...classesToRemove);\n  }\n\n  if (classesToAdd.length > 0) {\n    utils.addClassNamesToElement(dom, ...classesToAdd);\n  }\n}\n\nfunction updateListItemChecked(dom, listItemNode, prevListItemNode, listNode) {\n  // Only add attributes for leaf list items\n  if ($isListNode(listItemNode.getFirstChild())) {\n    dom.removeAttribute('role');\n    dom.removeAttribute('tabIndex');\n    dom.removeAttribute('aria-checked');\n  } else {\n    dom.setAttribute('role', 'checkbox');\n    dom.setAttribute('tabIndex', '-1');\n\n    if (!prevListItemNode || listItemNode.__checked !== prevListItemNode.__checked) {\n      dom.setAttribute('aria-checked', listItemNode.getChecked() ? 'true' : 'false');\n    }\n  }\n}\n\nfunction convertListItemElement(domNode) {\n  const checked = utils.isHTMLElement(domNode) && domNode.getAttribute('aria-checked') === 'true';\n  return {\n    node: $createListItemNode(checked)\n  };\n}\n\nfunction $createListItemNode(checked) {\n  return lexical.$applyNodeReplacement(new ListItemNode(undefined, checked));\n}\nfunction $isListItemNode(node) {\n  return node instanceof ListItemNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ListNode extends lexical.ElementNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  static getType() {\n    return 'list';\n  }\n\n  static clone(node) {\n    const listType = node.__listType || TAG_TO_LIST_TYPE[node.__tag];\n    return new ListNode(listType, node.__start, node.__key);\n  }\n\n  constructor(listType, start, key) {\n    super(key);\n\n    const _listType = TAG_TO_LIST_TYPE[listType] || listType;\n\n    this.__listType = _listType;\n    this.__tag = _listType === 'number' ? 'ol' : 'ul';\n    this.__start = start;\n  }\n\n  getTag() {\n    return this.__tag;\n  }\n\n  getListType() {\n    return this.__listType;\n  }\n\n  getStart() {\n    return this.__start;\n  } // View\n\n\n  createDOM(config, _editor) {\n    const tag = this.__tag;\n    const dom = document.createElement(tag);\n\n    if (this.__start !== 1) {\n      dom.setAttribute('start', String(this.__start));\n    } // @ts-expect-error Internal field.\n\n\n    dom.__lexicalListType = this.__listType;\n    setListThemeClassNames(dom, config.theme, this);\n    return dom;\n  }\n\n  updateDOM(prevNode, dom, config) {\n    if (prevNode.__tag !== this.__tag) {\n      return true;\n    }\n\n    setListThemeClassNames(dom, config.theme, this);\n    return false;\n  }\n\n  static importDOM() {\n    return {\n      ol: node => ({\n        conversion: convertListNode,\n        priority: 0\n      }),\n      ul: node => ({\n        conversion: convertListNode,\n        priority: 0\n      })\n    };\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createListNode(serializedNode.listType, serializedNode.start);\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n\n    if (element) {\n      if (this.__start !== 1) {\n        element.setAttribute('start', String(this.__start));\n      }\n\n      if (this.__listType === 'check') {\n        element.setAttribute('__lexicalListType', 'check');\n      }\n    }\n\n    return {\n      element\n    };\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      listType: this.getListType(),\n      start: this.getStart(),\n      tag: this.getTag(),\n      type: 'list',\n      version: 1\n    };\n  }\n\n  canBeEmpty() {\n    return false;\n  }\n\n  canIndent() {\n    return false;\n  }\n\n  append(...nodesToAppend) {\n    for (let i = 0; i < nodesToAppend.length; i++) {\n      const currentNode = nodesToAppend[i];\n\n      if ($isListItemNode(currentNode)) {\n        super.append(currentNode);\n      } else {\n        const listItemNode = $createListItemNode();\n\n        if ($isListNode(currentNode)) {\n          listItemNode.append(currentNode);\n        } else if (lexical.$isElementNode(currentNode)) {\n          const textNode = lexical.$createTextNode(currentNode.getTextContent());\n          listItemNode.append(textNode);\n        } else {\n          listItemNode.append(currentNode);\n        }\n\n        super.append(listItemNode);\n      }\n    }\n\n    updateChildrenListItemValue(this);\n    return this;\n  }\n\n  extractWithChild(child) {\n    return $isListItemNode(child);\n  }\n\n}\n\nfunction setListThemeClassNames(dom, editorThemeClasses, node) {\n  const classesToAdd = [];\n  const classesToRemove = [];\n  const listTheme = editorThemeClasses.list;\n\n  if (listTheme !== undefined) {\n    const listLevelsClassNames = listTheme[`${node.__tag}Depth`] || [];\n    const listDepth = $getListDepth(node) - 1;\n    const normalizedListDepth = listDepth % listLevelsClassNames.length;\n    const listLevelClassName = listLevelsClassNames[normalizedListDepth];\n    const listClassName = listTheme[node.__tag];\n    let nestedListClassName;\n    const nestedListTheme = listTheme.nested;\n\n    if (nestedListTheme !== undefined && nestedListTheme.list) {\n      nestedListClassName = nestedListTheme.list;\n    }\n\n    if (listClassName !== undefined) {\n      classesToAdd.push(listClassName);\n    }\n\n    if (listLevelClassName !== undefined) {\n      const listItemClasses = listLevelClassName.split(' ');\n      classesToAdd.push(...listItemClasses);\n\n      for (let i = 0; i < listLevelsClassNames.length; i++) {\n        if (i !== normalizedListDepth) {\n          classesToRemove.push(node.__tag + i);\n        }\n      }\n    }\n\n    if (nestedListClassName !== undefined) {\n      const nestedListItemClasses = nestedListClassName.split(' ');\n\n      if (listDepth > 1) {\n        classesToAdd.push(...nestedListItemClasses);\n      } else {\n        classesToRemove.push(...nestedListItemClasses);\n      }\n    }\n  }\n\n  if (classesToRemove.length > 0) {\n    utils.removeClassNamesFromElement(dom, ...classesToRemove);\n  }\n\n  if (classesToAdd.length > 0) {\n    utils.addClassNamesToElement(dom, ...classesToAdd);\n  }\n}\n/*\n * This function normalizes the children of a ListNode after the conversion from HTML,\n * ensuring that they are all ListItemNodes and contain either a single nested ListNode\n * or some other inline content.\n */\n\n\nfunction normalizeChildren(nodes) {\n  const normalizedListItems = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n\n    if ($isListItemNode(node)) {\n      normalizedListItems.push(node);\n      const children = node.getChildren();\n\n      if (children.length > 1) {\n        children.forEach(child => {\n          if ($isListNode(child)) {\n            normalizedListItems.push(wrapInListItem(child));\n          }\n        });\n      }\n    } else {\n      normalizedListItems.push(wrapInListItem(node));\n    }\n  }\n\n  return normalizedListItems;\n}\n\nfunction convertListNode(domNode) {\n  const nodeName = domNode.nodeName.toLowerCase();\n  let node = null;\n\n  if (nodeName === 'ol') {\n    node = $createListNode('number');\n  } else if (nodeName === 'ul') {\n    if (utils.isHTMLElement(domNode) && domNode.getAttribute('__lexicallisttype') === 'check') {\n      node = $createListNode('check');\n    } else {\n      node = $createListNode('bullet');\n    }\n  }\n\n  return {\n    after: normalizeChildren,\n    node\n  };\n}\n\nconst TAG_TO_LIST_TYPE = {\n  ol: 'number',\n  ul: 'bullet'\n};\nfunction $createListNode(listType, start = 1) {\n  return lexical.$applyNodeReplacement(new ListNode(listType, start));\n}\nfunction $isListNode(node) {\n  return node instanceof ListNode;\n}\n\n/** @module @lexical/list */\nconst INSERT_UNORDERED_LIST_COMMAND = lexical.createCommand('INSERT_UNORDERED_LIST_COMMAND');\nconst INSERT_ORDERED_LIST_COMMAND = lexical.createCommand('INSERT_ORDERED_LIST_COMMAND');\nconst INSERT_CHECK_LIST_COMMAND = lexical.createCommand('INSERT_CHECK_LIST_COMMAND');\nconst REMOVE_LIST_COMMAND = lexical.createCommand('REMOVE_LIST_COMMAND');\n\nexports.$createListItemNode = $createListItemNode;\nexports.$createListNode = $createListNode;\nexports.$getListDepth = $getListDepth;\nexports.$handleListInsertParagraph = $handleListInsertParagraph;\nexports.$isListItemNode = $isListItemNode;\nexports.$isListNode = $isListNode;\nexports.INSERT_CHECK_LIST_COMMAND = INSERT_CHECK_LIST_COMMAND;\nexports.INSERT_ORDERED_LIST_COMMAND = INSERT_ORDERED_LIST_COMMAND;\nexports.INSERT_UNORDERED_LIST_COMMAND = INSERT_UNORDERED_LIST_COMMAND;\nexports.ListItemNode = ListItemNode;\nexports.ListNode = ListNode;\nexports.REMOVE_LIST_COMMAND = REMOVE_LIST_COMMAND;\nexports.insertList = insertList;\nexports.removeList = removeList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/list/LexicalList.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/list/LexicalList.js":
/*!***************************************************!*\
  !*** ./node_modules/@lexical/list/LexicalList.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalList =  true ? __webpack_require__(/*! ./LexicalList.dev.js */ \"(ssr)/./node_modules/@lexical/list/LexicalList.dev.js\") : 0\nmodule.exports = LexicalList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvbGlzdC9MZXhpY2FsTGlzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLG9CQUFvQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsbUZBQXNCLElBQUksQ0FBZ0M7QUFDL0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9saXN0L0xleGljYWxMaXN0LmpzPzJmYjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxMaXN0ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyByZXF1aXJlKCcuL0xleGljYWxMaXN0LmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsTGlzdC5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbExpc3Q7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/list/LexicalList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/mark/LexicalMark.dev.js":
/*!*******************************************************!*\
  !*** ./node_modules/@lexical/mark/LexicalMark.dev.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass MarkNode extends lexical.ElementNode {\n  /** @internal */\n  static getType() {\n    return 'mark';\n  }\n\n  static clone(node) {\n    return new MarkNode(Array.from(node.__ids), node.__key);\n  }\n\n  static importDOM() {\n    return null;\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createMarkNode(serializedNode.ids);\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      ids: this.getIDs(),\n      type: 'mark',\n      version: 1\n    };\n  }\n\n  constructor(ids, key) {\n    super(key);\n    this.__ids = ids || [];\n  }\n\n  createDOM(config) {\n    const element = document.createElement('mark');\n    utils.addClassNamesToElement(element, config.theme.mark);\n\n    if (this.__ids.length > 1) {\n      utils.addClassNamesToElement(element, config.theme.markOverlap);\n    }\n\n    return element;\n  }\n\n  updateDOM(prevNode, element, config) {\n    const prevIDs = prevNode.__ids;\n    const nextIDs = this.__ids;\n    const prevIDsCount = prevIDs.length;\n    const nextIDsCount = nextIDs.length;\n    const overlapTheme = config.theme.markOverlap;\n\n    if (prevIDsCount !== nextIDsCount) {\n      if (prevIDsCount === 1) {\n        if (nextIDsCount === 2) {\n          utils.addClassNamesToElement(element, overlapTheme);\n        }\n      } else if (nextIDsCount === 1) {\n        utils.removeClassNamesFromElement(element, overlapTheme);\n      }\n    }\n\n    return false;\n  }\n\n  hasID(id) {\n    const ids = this.getIDs();\n\n    for (let i = 0; i < ids.length; i++) {\n      if (id === ids[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getIDs() {\n    const self = this.getLatest();\n    return $isMarkNode(self) ? self.__ids : [];\n  }\n\n  addID(id) {\n    const self = this.getWritable();\n\n    if ($isMarkNode(self)) {\n      const ids = self.__ids;\n      self.__ids = ids;\n\n      for (let i = 0; i < ids.length; i++) {\n        // If we already have it, don't add again\n        if (id === ids[i]) return;\n      }\n\n      ids.push(id);\n    }\n  }\n\n  deleteID(id) {\n    const self = this.getWritable();\n\n    if ($isMarkNode(self)) {\n      const ids = self.__ids;\n      self.__ids = ids;\n\n      for (let i = 0; i < ids.length; i++) {\n        if (id === ids[i]) {\n          ids.splice(i, 1);\n          return;\n        }\n      }\n    }\n  }\n\n  insertNewAfter(selection, restoreSelection = true) {\n    const element = this.getParentOrThrow().insertNewAfter(selection, restoreSelection);\n\n    if (lexical.$isElementNode(element)) {\n      const markNode = $createMarkNode(this.__ids);\n      element.append(markNode);\n      return markNode;\n    }\n\n    return null;\n  }\n\n  canInsertTextBefore() {\n    return false;\n  }\n\n  canInsertTextAfter() {\n    return false;\n  }\n\n  canBeEmpty() {\n    return false;\n  }\n\n  isInline() {\n    return true;\n  }\n\n  extractWithChild(child, selection, destination) {\n    if (!lexical.$isRangeSelection(selection) || destination === 'html') {\n      return false;\n    }\n\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    const isBackward = selection.isBackward();\n    const selectionLength = isBackward ? anchor.offset - focus.offset : focus.offset - anchor.offset;\n    return this.isParentOf(anchorNode) && this.isParentOf(focusNode) && this.getTextContent().length === selectionLength;\n  }\n\n  excludeFromCopy(destination) {\n    return destination !== 'clone';\n  }\n\n}\nfunction $createMarkNode(ids) {\n  return lexical.$applyNodeReplacement(new MarkNode(ids));\n}\nfunction $isMarkNode(node) {\n  return node instanceof MarkNode;\n}\n\n/** @module @lexical/mark */\nfunction $unwrapMarkNode(node) {\n  const children = node.getChildren();\n  let target = null;\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n\n    if (target === null) {\n      node.insertBefore(child);\n    } else {\n      target.insertAfter(child);\n    }\n\n    target = child;\n  }\n\n  node.remove();\n}\nfunction $wrapSelectionInMarkNode(selection, isBackward, id, createNode) {\n  const nodes = selection.getNodes();\n  const anchorOffset = selection.anchor.offset;\n  const focusOffset = selection.focus.offset;\n  const nodesLength = nodes.length;\n  const startOffset = isBackward ? focusOffset : anchorOffset;\n  const endOffset = isBackward ? anchorOffset : focusOffset;\n  let currentNodeParent;\n  let lastCreatedMarkNode; // We only want wrap adjacent text nodes, line break nodes\n  // and inline element nodes. For decorator nodes and block\n  // element nodes, we step out of their boundary and start\n  // again after, if there are more nodes.\n\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n\n    if (lexical.$isElementNode(lastCreatedMarkNode) && lastCreatedMarkNode.isParentOf(node)) {\n      // If the current node is a child of the last created mark node, there is nothing to do here\n      continue;\n    }\n\n    const isFirstNode = i === 0;\n    const isLastNode = i === nodesLength - 1;\n    let targetNode = null;\n\n    if (lexical.$isTextNode(node)) {\n      // Case 1: The node is a text node and we can split it\n      const textContentSize = node.getTextContentSize();\n      const startTextOffset = isFirstNode ? startOffset : 0;\n      const endTextOffset = isLastNode ? endOffset : textContentSize;\n\n      if (startTextOffset === 0 && endTextOffset === 0) {\n        continue;\n      }\n\n      const splitNodes = node.splitText(startTextOffset, endTextOffset);\n      targetNode = splitNodes.length > 1 && (splitNodes.length === 3 || isFirstNode && !isLastNode || endTextOffset === textContentSize) ? splitNodes[1] : splitNodes[0];\n    } else if ($isMarkNode(node)) {\n      // Case 2: the node is a mark node and we can ignore it as a target,\n      // moving on to its children. Note that when we make a mark inside\n      // another mark, it may utlimately be unnested by a call to\n      // `registerNestedElementResolver<MarkNode>` somewhere else in the\n      // codebase.\n      continue;\n    } else if (lexical.$isElementNode(node) && node.isInline()) {\n      // Case 3: inline element nodes can be added in their entirety to the new\n      // mark\n      targetNode = node;\n    }\n\n    if (targetNode !== null) {\n      // Now that we have a target node for wrapping with a mark, we can run\n      // through special cases.\n      if (targetNode && targetNode.is(currentNodeParent)) {\n        // The current node is a child of the target node to be wrapped, there\n        // is nothing to do here.\n        continue;\n      }\n\n      const parentNode = targetNode.getParent();\n\n      if (parentNode == null || !parentNode.is(currentNodeParent)) {\n        // If the parent node is not the current node's parent node, we can\n        // clear the last created mark node.\n        lastCreatedMarkNode = undefined;\n      }\n\n      currentNodeParent = parentNode;\n\n      if (lastCreatedMarkNode === undefined) {\n        // If we don't have a created mark node, we can make one\n        const createMarkNode = createNode || $createMarkNode;\n        lastCreatedMarkNode = createMarkNode([id]);\n        targetNode.insertBefore(lastCreatedMarkNode);\n      } // Add the target node to be wrapped in the latest created mark node\n\n\n      lastCreatedMarkNode.append(targetNode);\n    } else {\n      // If we don't have a target node to wrap we can clear our state and\n      // continue on with the next node\n      currentNodeParent = undefined;\n      lastCreatedMarkNode = undefined;\n    }\n  }\n}\nfunction $getMarkIDs(node, offset) {\n  let currentNode = node;\n\n  while (currentNode !== null) {\n    if ($isMarkNode(currentNode)) {\n      return currentNode.getIDs();\n    } else if (lexical.$isTextNode(currentNode) && offset === currentNode.getTextContentSize()) {\n      const nextSibling = currentNode.getNextSibling();\n\n      if ($isMarkNode(nextSibling)) {\n        return nextSibling.getIDs();\n      }\n    }\n\n    currentNode = currentNode.getParent();\n  }\n\n  return null;\n}\n\nexports.$createMarkNode = $createMarkNode;\nexports.$getMarkIDs = $getMarkIDs;\nexports.$isMarkNode = $isMarkNode;\nexports.$unwrapMarkNode = $unwrapMarkNode;\nexports.$wrapSelectionInMarkNode = $wrapSelectionInMarkNode;\nexports.MarkNode = MarkNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/mark/LexicalMark.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/mark/LexicalMark.js":
/*!***************************************************!*\
  !*** ./node_modules/@lexical/mark/LexicalMark.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalMark =  true ? __webpack_require__(/*! ./LexicalMark.dev.js */ \"(ssr)/./node_modules/@lexical/mark/LexicalMark.dev.js\") : 0\nmodule.exports = LexicalMark;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvbWFyay9MZXhpY2FsTWFyay5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLG9CQUFvQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsbUZBQXNCLElBQUksQ0FBZ0M7QUFDL0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9tYXJrL0xleGljYWxNYXJrLmpzPzhlMGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxNYXJrID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyByZXF1aXJlKCcuL0xleGljYWxNYXJrLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsTWFyay5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbE1hcms7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/mark/LexicalMark.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/markdown/LexicalMarkdown.dev.js":
/*!***************************************************************!*\
  !*** ./node_modules/@lexical/markdown/LexicalMarkdown.dev.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar code = __webpack_require__(/*! @lexical/code */ \"(ssr)/./node_modules/@lexical/code/LexicalCode.js\");\nvar list = __webpack_require__(/*! @lexical/list */ \"(ssr)/./node_modules/@lexical/list/LexicalList.js\");\nvar richText = __webpack_require__(/*! @lexical/rich-text */ \"(ssr)/./node_modules/@lexical/rich-text/LexicalRichText.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar link = __webpack_require__(/*! @lexical/link */ \"(ssr)/./node_modules/@lexical/link/LexicalLink.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction indexBy(list, callback) {\n  const index = {};\n\n  for (const item of list) {\n    const key = callback(item);\n\n    if (index[key]) {\n      index[key].push(item);\n    } else {\n      index[key] = [item];\n    }\n  }\n\n  return index;\n}\nfunction transformersByType(transformers) {\n  const byType = indexBy(transformers, t => t.type);\n  return {\n    element: byType.element || [],\n    textFormat: byType['text-format'] || [],\n    textMatch: byType['text-match'] || []\n  };\n}\nconst PUNCTUATION_OR_SPACE = /[!-/:-@[-`{-~\\s]/;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction createMarkdownExport(transformers) {\n  const byType = transformersByType(transformers); // Export only uses text formats that are responsible for single format\n  // e.g. it will filter out *** (bold, italic) and instead use separate ** and *\n\n  const textFormatTransformers = byType.textFormat.filter(transformer => transformer.format.length === 1);\n  return () => {\n    const output = [];\n    const children = lexical.$getRoot().getChildren();\n\n    for (const child of children) {\n      const result = exportTopLevelElements(child, byType.element, textFormatTransformers, byType.textMatch);\n\n      if (result != null) {\n        output.push(result);\n      }\n    }\n\n    return output.join('\\n\\n');\n  };\n}\n\nfunction exportTopLevelElements(node, elementTransformers, textTransformersIndex, textMatchTransformers) {\n  for (const transformer of elementTransformers) {\n    const result = transformer.export(node, _node => exportChildren(_node, textTransformersIndex, textMatchTransformers));\n\n    if (result != null) {\n      return result;\n    }\n  }\n\n  if (lexical.$isElementNode(node)) {\n    return exportChildren(node, textTransformersIndex, textMatchTransformers);\n  } else if (lexical.$isDecoratorNode(node)) {\n    return node.getTextContent();\n  } else {\n    return null;\n  }\n}\n\nfunction exportChildren(node, textTransformersIndex, textMatchTransformers) {\n  const output = [];\n  const children = node.getChildren();\n\n  mainLoop: for (const child of children) {\n    for (const transformer of textMatchTransformers) {\n      const result = transformer.export(child, parentNode => exportChildren(parentNode, textTransformersIndex, textMatchTransformers), (textNode, textContent) => exportTextFormat(textNode, textContent, textTransformersIndex));\n\n      if (result != null) {\n        output.push(result);\n        continue mainLoop;\n      }\n    }\n\n    if (lexical.$isLineBreakNode(child)) {\n      output.push('\\n');\n    } else if (lexical.$isTextNode(child)) {\n      output.push(exportTextFormat(child, child.getTextContent(), textTransformersIndex));\n    } else if (lexical.$isElementNode(child)) {\n      output.push(exportChildren(child, textTransformersIndex, textMatchTransformers));\n    } else if (lexical.$isDecoratorNode(child)) {\n      output.push(child.getTextContent());\n    }\n  }\n\n  return output.join('');\n}\n\nfunction exportTextFormat(node, textContent, textTransformers) {\n  // This function handles the case of a string looking like this: \"   foo   \"\n  // Where it would be invalid markdown to generate: \"**   foo   **\"\n  // We instead want to trim the whitespace out, apply formatting, and then\n  // bring the whitespace back. So our returned string looks like this: \"   **foo**   \"\n  const frozenString = textContent.trim();\n  let output = frozenString;\n  const applied = new Set();\n\n  for (const transformer of textTransformers) {\n    const format = transformer.format[0];\n    const tag = transformer.tag;\n\n    if (hasFormat(node, format) && !applied.has(format)) {\n      // Multiple tags might be used for the same format (*, _)\n      applied.add(format); // Prevent adding opening tag is already opened by the previous sibling\n\n      const previousNode = getTextSibling(node, true);\n\n      if (!hasFormat(previousNode, format)) {\n        output = tag + output;\n      } // Prevent adding closing tag if next sibling will do it\n\n\n      const nextNode = getTextSibling(node, false);\n\n      if (!hasFormat(nextNode, format)) {\n        output += tag;\n      }\n    }\n  } // Replace trimmed version of textContent ensuring surrounding whitespace is not modified\n\n\n  return textContent.replace(frozenString, output);\n} // Get next or previous text sibling a text node, including cases\n// when it's a child of inline element (e.g. link)\n\n\nfunction getTextSibling(node, backward) {\n  let sibling = backward ? node.getPreviousSibling() : node.getNextSibling();\n\n  if (!sibling) {\n    const parent = node.getParentOrThrow();\n\n    if (parent.isInline()) {\n      sibling = backward ? parent.getPreviousSibling() : parent.getNextSibling();\n    }\n  }\n\n  while (sibling) {\n    if (lexical.$isElementNode(sibling)) {\n      if (!sibling.isInline()) {\n        break;\n      }\n\n      const descendant = backward ? sibling.getLastDescendant() : sibling.getFirstDescendant();\n\n      if (lexical.$isTextNode(descendant)) {\n        return descendant;\n      } else {\n        sibling = backward ? sibling.getPreviousSibling() : sibling.getNextSibling();\n      }\n    }\n\n    if (lexical.$isTextNode(sibling)) {\n      return sibling;\n    }\n\n    if (!lexical.$isElementNode(sibling)) {\n      return null;\n    }\n  }\n\n  return null;\n}\n\nfunction hasFormat(node, format) {\n  return lexical.$isTextNode(node) && node.hasFormat(format);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nCAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nCAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nCAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\n\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent); // export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst MARKDOWN_EMPTY_LINE_REG_EXP = /^\\s{0,3}$/;\nconst CODE_BLOCK_REG_EXP = /^```(\\w{1,10})?\\s?$/;\nfunction createMarkdownImport(transformers) {\n  const byType = transformersByType(transformers);\n  const textFormatTransformersIndex = createTextFormatTransformersIndex(byType.textFormat);\n  return markdownString => {\n    const lines = markdownString.split('\\n');\n    const linesLength = lines.length;\n    const root = lexical.$getRoot();\n    root.clear();\n\n    for (let i = 0; i < linesLength; i++) {\n      const lineText = lines[i]; // Codeblocks are processed first as anything inside such block\n      // is ignored for further processing\n      // TODO:\n      // Abstract it to be dynamic as other transformers (add multiline match option)\n\n      const [codeBlockNode, shiftedIndex] = importCodeBlock(lines, i, root);\n\n      if (codeBlockNode != null) {\n        i = shiftedIndex;\n        continue;\n      }\n\n      importBlocks(lineText, root, byType.element, textFormatTransformersIndex, byType.textMatch);\n    } // Removing empty paragraphs as md does not really\n    // allow empty lines and uses them as dilimiter\n\n\n    const children = root.getChildren();\n\n    for (const child of children) {\n      if (isEmptyParagraph(child)) {\n        child.remove();\n      }\n    }\n\n    root.selectEnd();\n  };\n}\n\nfunction isEmptyParagraph(node) {\n  if (!lexical.$isParagraphNode(node)) {\n    return false;\n  }\n\n  const firstChild = node.getFirstChild();\n  return firstChild == null || node.getChildrenSize() === 1 && lexical.$isTextNode(firstChild) && MARKDOWN_EMPTY_LINE_REG_EXP.test(firstChild.getTextContent());\n}\n\nfunction importBlocks(lineText, rootNode, elementTransformers, textFormatTransformersIndex, textMatchTransformers) {\n  const lineTextTrimmed = lineText.trim();\n  const textNode = lexical.$createTextNode(lineTextTrimmed);\n  const elementNode = lexical.$createParagraphNode();\n  elementNode.append(textNode);\n  rootNode.append(elementNode);\n\n  for (const {\n    regExp,\n    replace\n  } of elementTransformers) {\n    const match = lineText.match(regExp);\n\n    if (match) {\n      textNode.setTextContent(lineText.slice(match[0].length));\n      replace(elementNode, [textNode], match, true);\n      break;\n    }\n  }\n\n  importTextFormatTransformers(textNode, textFormatTransformersIndex, textMatchTransformers); // If no transformer found and we left with original paragraph node\n  // can check if its content can be appended to the previous node\n  // if it's a paragraph, quote or list\n\n  if (elementNode.isAttached() && lineTextTrimmed.length > 0) {\n    const previousNode = elementNode.getPreviousSibling();\n\n    if (lexical.$isParagraphNode(previousNode) || richText.$isQuoteNode(previousNode) || list.$isListNode(previousNode)) {\n      let targetNode = previousNode;\n\n      if (list.$isListNode(previousNode)) {\n        const lastDescendant = previousNode.getLastDescendant();\n\n        if (lastDescendant == null) {\n          targetNode = null;\n        } else {\n          targetNode = utils.$findMatchingParent(lastDescendant, list.$isListItemNode);\n        }\n      }\n\n      if (targetNode != null && targetNode.getTextContentSize() > 0) {\n        targetNode.splice(targetNode.getChildrenSize(), 0, [lexical.$createLineBreakNode(), ...elementNode.getChildren()]);\n        elementNode.remove();\n      }\n    }\n  }\n}\n\nfunction importCodeBlock(lines, startLineIndex, rootNode) {\n  const openMatch = lines[startLineIndex].match(CODE_BLOCK_REG_EXP);\n\n  if (openMatch) {\n    let endLineIndex = startLineIndex;\n    const linesLength = lines.length;\n\n    while (++endLineIndex < linesLength) {\n      const closeMatch = lines[endLineIndex].match(CODE_BLOCK_REG_EXP);\n\n      if (closeMatch) {\n        const codeBlockNode = code.$createCodeNode(openMatch[1]);\n        const textNode = lexical.$createTextNode(lines.slice(startLineIndex + 1, endLineIndex).join('\\n'));\n        codeBlockNode.append(textNode);\n        rootNode.append(codeBlockNode);\n        return [codeBlockNode, endLineIndex];\n      }\n    }\n  }\n\n  return [null, startLineIndex];\n} // Processing text content and replaces text format tags.\n// It takes outermost tag match and its content, creates text node with\n// format based on tag and then recursively executed over node's content\n//\n// E.g. for \"*Hello **world**!*\" string it will create text node with\n// \"Hello **world**!\" content and italic format and run recursively over\n// its content to transform \"**world**\" part\n\n\nfunction importTextFormatTransformers(textNode, textFormatTransformersIndex, textMatchTransformers) {\n  const textContent = textNode.getTextContent();\n  const match = findOutermostMatch(textContent, textFormatTransformersIndex);\n\n  if (!match) {\n    // Once text format processing is done run text match transformers, as it\n    // only can span within single text node (unline formats that can cover multiple nodes)\n    importTextMatchTransformers(textNode, textMatchTransformers);\n    return;\n  }\n\n  let currentNode, remainderNode, leadingNode; // If matching full content there's no need to run splitText and can reuse existing textNode\n  // to update its content and apply format. E.g. for **_Hello_** string after applying bold\n  // format (**) it will reuse the same text node to apply italic (_)\n\n  if (match[0] === textContent) {\n    currentNode = textNode;\n  } else {\n    const startIndex = match.index || 0;\n    const endIndex = startIndex + match[0].length;\n\n    if (startIndex === 0) {\n      [currentNode, remainderNode] = textNode.splitText(endIndex);\n    } else {\n      [leadingNode, currentNode, remainderNode] = textNode.splitText(startIndex, endIndex);\n    }\n  }\n\n  currentNode.setTextContent(match[2]);\n  const transformer = textFormatTransformersIndex.transformersByTag[match[1]];\n\n  if (transformer) {\n    for (const format of transformer.format) {\n      if (!currentNode.hasFormat(format)) {\n        currentNode.toggleFormat(format);\n      }\n    }\n  } // Recursively run over inner text if it's not inline code\n\n\n  if (!currentNode.hasFormat('code')) {\n    importTextFormatTransformers(currentNode, textFormatTransformersIndex, textMatchTransformers);\n  } // Run over leading/remaining text if any\n\n\n  if (leadingNode) {\n    importTextFormatTransformers(leadingNode, textFormatTransformersIndex, textMatchTransformers);\n  }\n\n  if (remainderNode) {\n    importTextFormatTransformers(remainderNode, textFormatTransformersIndex, textMatchTransformers);\n  }\n}\n\nfunction importTextMatchTransformers(textNode_, textMatchTransformers) {\n  let textNode = textNode_;\n\n  mainLoop: while (textNode) {\n    for (const transformer of textMatchTransformers) {\n      const match = textNode.getTextContent().match(transformer.importRegExp);\n\n      if (!match) {\n        continue;\n      }\n\n      const startIndex = match.index || 0;\n      const endIndex = startIndex + match[0].length;\n      let replaceNode, leftTextNode, rightTextNode;\n\n      if (startIndex === 0) {\n        [replaceNode, textNode] = textNode.splitText(endIndex);\n      } else {\n        [leftTextNode, replaceNode, rightTextNode] = textNode.splitText(startIndex, endIndex);\n      }\n\n      if (leftTextNode) {\n        importTextMatchTransformers(leftTextNode, textMatchTransformers);\n      }\n\n      if (rightTextNode) {\n        textNode = rightTextNode;\n      }\n\n      transformer.replace(replaceNode, match);\n      continue mainLoop;\n    }\n\n    break;\n  }\n} // Finds first \"<tag>content<tag>\" match that is not nested into another tag\n\n\nfunction findOutermostMatch(textContent, textTransformersIndex) {\n  const openTagsMatch = textContent.match(textTransformersIndex.openTagsRegExp);\n\n  if (openTagsMatch == null) {\n    return null;\n  }\n\n  for (const match of openTagsMatch) {\n    // Open tags reg exp might capture leading space so removing it\n    // before using match to find transformer\n    const tag = match.replace(/^\\s/, '');\n    const fullMatchRegExp = textTransformersIndex.fullMatchRegExpByTag[tag];\n\n    if (fullMatchRegExp == null) {\n      continue;\n    }\n\n    const fullMatch = textContent.match(fullMatchRegExp);\n    const transformer = textTransformersIndex.transformersByTag[tag];\n\n    if (fullMatch != null && transformer != null) {\n      if (transformer.intraword !== false) {\n        return fullMatch;\n      } // For non-intraword transformers checking if it's within a word\n      // or surrounded with space/punctuation/newline\n\n\n      const {\n        index = 0\n      } = fullMatch;\n      const beforeChar = textContent[index - 1];\n      const afterChar = textContent[index + fullMatch[0].length];\n\n      if ((!beforeChar || PUNCTUATION_OR_SPACE.test(beforeChar)) && (!afterChar || PUNCTUATION_OR_SPACE.test(afterChar))) {\n        return fullMatch;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction createTextFormatTransformersIndex(textTransformers) {\n  const transformersByTag = {};\n  const fullMatchRegExpByTag = {};\n  const openTagsRegExp = [];\n  const escapeRegExp = `(?<![\\\\\\\\])`;\n\n  for (const transformer of textTransformers) {\n    const {\n      tag\n    } = transformer;\n    transformersByTag[tag] = transformer;\n    const tagRegExp = tag.replace(/(\\*|\\^|\\+)/g, '\\\\$1');\n    openTagsRegExp.push(tagRegExp);\n\n    if (IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT) {\n      fullMatchRegExpByTag[tag] = new RegExp(`(${tagRegExp})(?![${tagRegExp}\\\\s])(.*?[^${tagRegExp}\\\\s])${tagRegExp}(?!${tagRegExp})`);\n    } else {\n      fullMatchRegExpByTag[tag] = new RegExp(`(?<![\\\\\\\\${tagRegExp}])(${tagRegExp})((\\\\\\\\${tagRegExp})?.*?[^${tagRegExp}\\\\s](\\\\\\\\${tagRegExp})?)((?<!\\\\\\\\)|(?<=\\\\\\\\\\\\\\\\))(${tagRegExp})(?![\\\\\\\\${tagRegExp}])`);\n    }\n  }\n\n  return {\n    // Reg exp to find open tag + content + close tag\n    fullMatchRegExpByTag,\n    // Reg exp to find opening tags\n    openTagsRegExp: new RegExp((IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT ? '' : `${escapeRegExp}`) + '(' + openTagsRegExp.join('|') + ')', 'g'),\n    transformersByTag\n  };\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction runElementTransformers(parentNode, anchorNode, anchorOffset, elementTransformers) {\n  const grandParentNode = parentNode.getParent();\n\n  if (!lexical.$isRootOrShadowRoot(grandParentNode) || parentNode.getFirstChild() !== anchorNode) {\n    return false;\n  }\n\n  const textContent = anchorNode.getTextContent(); // Checking for anchorOffset position to prevent any checks for cases when caret is too far\n  // from a line start to be a part of block-level markdown trigger.\n  //\n  // TODO:\n  // Can have a quick check if caret is close enough to the beginning of the string (e.g. offset less than 10-20)\n  // since otherwise it won't be a markdown shortcut, but tables are exception\n\n  if (textContent[anchorOffset - 1] !== ' ') {\n    return false;\n  }\n\n  for (const {\n    regExp,\n    replace\n  } of elementTransformers) {\n    const match = textContent.match(regExp);\n\n    if (match && match[0].length === anchorOffset) {\n      const nextSiblings = anchorNode.getNextSiblings();\n      const [leadingNode, remainderNode] = anchorNode.splitText(anchorOffset);\n      leadingNode.remove();\n      const siblings = remainderNode ? [remainderNode, ...nextSiblings] : nextSiblings;\n      replace(parentNode, siblings, match, false);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction runTextMatchTransformers(anchorNode, anchorOffset, transformersByTrigger) {\n  let textContent = anchorNode.getTextContent();\n  const lastChar = textContent[anchorOffset - 1];\n  const transformers = transformersByTrigger[lastChar];\n\n  if (transformers == null) {\n    return false;\n  } // If typing in the middle of content, remove the tail to do\n  // reg exp match up to a string end (caret position)\n\n\n  if (anchorOffset < textContent.length) {\n    textContent = textContent.slice(0, anchorOffset);\n  }\n\n  for (const transformer of transformers) {\n    const match = textContent.match(transformer.regExp);\n\n    if (match === null) {\n      continue;\n    }\n\n    const startIndex = match.index || 0;\n    const endIndex = startIndex + match[0].length;\n    let replaceNode;\n\n    if (startIndex === 0) {\n      [replaceNode] = anchorNode.splitText(endIndex);\n    } else {\n      [, replaceNode] = anchorNode.splitText(startIndex, endIndex);\n    }\n\n    replaceNode.selectNext(0, 0);\n    transformer.replace(replaceNode, match);\n    return true;\n  }\n\n  return false;\n}\n\nfunction runTextFormatTransformers(anchorNode, anchorOffset, textFormatTransformers) {\n  const textContent = anchorNode.getTextContent();\n  const closeTagEndIndex = anchorOffset - 1;\n  const closeChar = textContent[closeTagEndIndex]; // Quick check if we're possibly at the end of inline markdown style\n\n  const matchers = textFormatTransformers[closeChar];\n\n  if (!matchers) {\n    return false;\n  }\n\n  for (const matcher of matchers) {\n    const {\n      tag\n    } = matcher;\n    const tagLength = tag.length;\n    const closeTagStartIndex = closeTagEndIndex - tagLength + 1; // If tag is not single char check if rest of it matches with text content\n\n    if (tagLength > 1) {\n      if (!isEqualSubString(textContent, closeTagStartIndex, tag, 0, tagLength)) {\n        continue;\n      }\n    } // Space before closing tag cancels inline markdown\n\n\n    if (textContent[closeTagStartIndex - 1] === ' ') {\n      continue;\n    } // Some tags can not be used within words, hence should have newline/space/punctuation after it\n\n\n    const afterCloseTagChar = textContent[closeTagEndIndex + 1];\n\n    if (matcher.intraword === false && afterCloseTagChar && !PUNCTUATION_OR_SPACE.test(afterCloseTagChar)) {\n      continue;\n    }\n\n    const closeNode = anchorNode;\n    let openNode = closeNode;\n    let openTagStartIndex = getOpenTagStartIndex(textContent, closeTagStartIndex, tag); // Go through text node siblings and search for opening tag\n    // if haven't found it within the same text node as closing tag\n\n    let sibling = openNode;\n\n    while (openTagStartIndex < 0 && (sibling = sibling.getPreviousSibling())) {\n      if (lexical.$isLineBreakNode(sibling)) {\n        break;\n      }\n\n      if (lexical.$isTextNode(sibling)) {\n        const siblingTextContent = sibling.getTextContent();\n        openNode = sibling;\n        openTagStartIndex = getOpenTagStartIndex(siblingTextContent, siblingTextContent.length, tag);\n      }\n    } // Opening tag is not found\n\n\n    if (openTagStartIndex < 0) {\n      continue;\n    } // No content between opening and closing tag\n\n\n    if (openNode === closeNode && openTagStartIndex + tagLength === closeTagStartIndex) {\n      continue;\n    } // Checking longer tags for repeating chars (e.g. *** vs **)\n\n\n    const prevOpenNodeText = openNode.getTextContent();\n\n    if (openTagStartIndex > 0 && prevOpenNodeText[openTagStartIndex - 1] === closeChar) {\n      continue;\n    } // Some tags can not be used within words, hence should have newline/space/punctuation before it\n\n\n    const beforeOpenTagChar = prevOpenNodeText[openTagStartIndex - 1];\n\n    if (matcher.intraword === false && beforeOpenTagChar && !PUNCTUATION_OR_SPACE.test(beforeOpenTagChar)) {\n      continue;\n    } // Clean text from opening and closing tags (starting from closing tag\n    // to prevent any offset shifts if we start from opening one)\n\n\n    const prevCloseNodeText = closeNode.getTextContent();\n    const closeNodeText = prevCloseNodeText.slice(0, closeTagStartIndex) + prevCloseNodeText.slice(closeTagEndIndex + 1);\n    closeNode.setTextContent(closeNodeText);\n    const openNodeText = openNode === closeNode ? closeNodeText : prevOpenNodeText;\n    openNode.setTextContent(openNodeText.slice(0, openTagStartIndex) + openNodeText.slice(openTagStartIndex + tagLength));\n    const selection = lexical.$getSelection();\n    const nextSelection = lexical.$createRangeSelection();\n    lexical.$setSelection(nextSelection); // Adjust offset based on deleted chars\n\n    const newOffset = closeTagEndIndex - tagLength * (openNode === closeNode ? 2 : 1) + 1;\n    nextSelection.anchor.set(openNode.__key, openTagStartIndex, 'text');\n    nextSelection.focus.set(closeNode.__key, newOffset, 'text'); // Apply formatting to selected text\n\n    for (const format of matcher.format) {\n      if (!nextSelection.hasFormat(format)) {\n        nextSelection.formatText(format);\n      }\n    } // Collapse selection up to the focus point\n\n\n    nextSelection.anchor.set(nextSelection.focus.key, nextSelection.focus.offset, nextSelection.focus.type); // Remove formatting from collapsed selection\n\n    for (const format of matcher.format) {\n      if (nextSelection.hasFormat(format)) {\n        nextSelection.toggleFormat(format);\n      }\n    }\n\n    if (lexical.$isRangeSelection(selection)) {\n      nextSelection.format = selection.format;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction getOpenTagStartIndex(string, maxIndex, tag) {\n  const tagLength = tag.length;\n\n  for (let i = maxIndex; i >= tagLength; i--) {\n    const startIndex = i - tagLength;\n\n    if (isEqualSubString(string, startIndex, tag, 0, tagLength) && // Space after opening tag cancels transformation\n    string[startIndex + tagLength] !== ' ') {\n      return startIndex;\n    }\n  }\n\n  return -1;\n}\n\nfunction isEqualSubString(stringA, aStart, stringB, bStart, length) {\n  for (let i = 0; i < length; i++) {\n    if (stringA[aStart + i] !== stringB[bStart + i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction registerMarkdownShortcuts(editor, transformers = TRANSFORMERS) {\n  const byType = transformersByType(transformers);\n  const textFormatTransformersIndex = indexBy(byType.textFormat, ({\n    tag\n  }) => tag[tag.length - 1]);\n  const textMatchTransformersIndex = indexBy(byType.textMatch, ({\n    trigger\n  }) => trigger);\n\n  for (const transformer of transformers) {\n    const type = transformer.type;\n\n    if (type === 'element' || type === 'text-match') {\n      const dependencies = transformer.dependencies;\n\n      if (!editor.hasNodes(dependencies)) {\n        {\n          throw Error(`MarkdownShortcuts: missing dependency for transformer. Ensure node dependency is included in editor initial config.`);\n        }\n      }\n    }\n  }\n\n  const transform = (parentNode, anchorNode, anchorOffset) => {\n    if (runElementTransformers(parentNode, anchorNode, anchorOffset, byType.element)) {\n      return;\n    }\n\n    if (runTextMatchTransformers(anchorNode, anchorOffset, textMatchTransformersIndex)) {\n      return;\n    }\n\n    runTextFormatTransformers(anchorNode, anchorOffset, textFormatTransformersIndex);\n  };\n\n  return editor.registerUpdateListener(({\n    tags,\n    dirtyLeaves,\n    editorState,\n    prevEditorState\n  }) => {\n    // Ignore updates from undo/redo (as changes already calculated)\n    if (tags.has('historic')) {\n      return;\n    }\n\n    const selection = editorState.read(lexical.$getSelection);\n    const prevSelection = prevEditorState.read(lexical.$getSelection);\n\n    if (!lexical.$isRangeSelection(prevSelection) || !lexical.$isRangeSelection(selection) || !selection.isCollapsed()) {\n      return;\n    }\n\n    const anchorKey = selection.anchor.key;\n    const anchorOffset = selection.anchor.offset;\n\n    const anchorNode = editorState._nodeMap.get(anchorKey);\n\n    if (!lexical.$isTextNode(anchorNode) || !dirtyLeaves.has(anchorKey) || anchorOffset !== 1 && anchorOffset !== prevSelection.anchor.offset + 1) {\n      return;\n    }\n\n    editor.update(() => {\n      // Markdown is not available inside code\n      if (anchorNode.hasFormat('code')) {\n        return;\n      }\n\n      const parentNode = anchorNode.getParent();\n\n      if (parentNode === null || code.$isCodeNode(parentNode)) {\n        return;\n      }\n\n      transform(parentNode, anchorNode, selection.anchor.offset);\n    });\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst createBlockNode = createNode => {\n  return (parentNode, children, match) => {\n    const node = createNode(match);\n    node.append(...children);\n    parentNode.replace(node);\n    node.select(0, 0);\n  };\n}; // Amount of spaces that define indentation level\n// TODO: should be an option\n\n\nconst LIST_INDENT_SIZE = 4;\n\nconst listReplace = listType => {\n  return (parentNode, children, match) => {\n    const previousNode = parentNode.getPreviousSibling();\n    const listItem = list.$createListItemNode(listType === 'check' ? match[3] === 'x' : undefined);\n\n    if (list.$isListNode(previousNode) && previousNode.getListType() === listType) {\n      previousNode.append(listItem);\n      parentNode.remove();\n    } else {\n      const list$1 = list.$createListNode(listType, listType === 'number' ? Number(match[2]) : undefined);\n      list$1.append(listItem);\n      parentNode.replace(list$1);\n    }\n\n    listItem.append(...children);\n    listItem.select(0, 0);\n    const indent = Math.floor(match[1].length / LIST_INDENT_SIZE);\n\n    if (indent) {\n      listItem.setIndent(indent);\n    }\n  };\n};\n\nconst listExport = (listNode, exportChildren, depth) => {\n  const output = [];\n  const children = listNode.getChildren();\n  let index = 0;\n\n  for (const listItemNode of children) {\n    if (list.$isListItemNode(listItemNode)) {\n      if (listItemNode.getChildrenSize() === 1) {\n        const firstChild = listItemNode.getFirstChild();\n\n        if (list.$isListNode(firstChild)) {\n          output.push(listExport(firstChild, exportChildren, depth + 1));\n          continue;\n        }\n      }\n\n      const indent = ' '.repeat(depth * LIST_INDENT_SIZE);\n      const listType = listNode.getListType();\n      const prefix = listType === 'number' ? `${listNode.getStart() + index}. ` : listType === 'check' ? `- [${listItemNode.getChecked() ? 'x' : ' '}] ` : '- ';\n      output.push(indent + prefix + exportChildren(listItemNode));\n      index++;\n    }\n  }\n\n  return output.join('\\n');\n};\n\nconst HEADING = {\n  dependencies: [richText.HeadingNode],\n  export: (node, exportChildren) => {\n    if (!richText.$isHeadingNode(node)) {\n      return null;\n    }\n\n    const level = Number(node.getTag().slice(1));\n    return '#'.repeat(level) + ' ' + exportChildren(node);\n  },\n  regExp: /^(#{1,6})\\s/,\n  replace: createBlockNode(match => {\n    const tag = 'h' + match[1].length;\n    return richText.$createHeadingNode(tag);\n  }),\n  type: 'element'\n};\nconst QUOTE = {\n  dependencies: [richText.QuoteNode],\n  export: (node, exportChildren) => {\n    if (!richText.$isQuoteNode(node)) {\n      return null;\n    }\n\n    const lines = exportChildren(node).split('\\n');\n    const output = [];\n\n    for (const line of lines) {\n      output.push('> ' + line);\n    }\n\n    return output.join('\\n');\n  },\n  regExp: /^>\\s/,\n  replace: (parentNode, children, _match, isImport) => {\n    if (isImport) {\n      const previousNode = parentNode.getPreviousSibling();\n\n      if (richText.$isQuoteNode(previousNode)) {\n        previousNode.splice(previousNode.getChildrenSize(), 0, [lexical.$createLineBreakNode(), ...children]);\n        previousNode.select(0, 0);\n        parentNode.remove();\n        return;\n      }\n    }\n\n    const node = richText.$createQuoteNode();\n    node.append(...children);\n    parentNode.replace(node);\n    node.select(0, 0);\n  },\n  type: 'element'\n};\nconst CODE = {\n  dependencies: [code.CodeNode],\n  export: node => {\n    if (!code.$isCodeNode(node)) {\n      return null;\n    }\n\n    const textContent = node.getTextContent();\n    return '```' + (node.getLanguage() || '') + (textContent ? '\\n' + textContent : '') + '\\n' + '```';\n  },\n  regExp: /^```(\\w{1,10})?\\s/,\n  replace: createBlockNode(match => {\n    return code.$createCodeNode(match ? match[1] : undefined);\n  }),\n  type: 'element'\n};\nconst UNORDERED_LIST = {\n  dependencies: [list.ListNode, list.ListItemNode],\n  export: (node, exportChildren) => {\n    return list.$isListNode(node) ? listExport(node, exportChildren, 0) : null;\n  },\n  regExp: /^(\\s*)[-*+]\\s/,\n  replace: listReplace('bullet'),\n  type: 'element'\n};\nconst CHECK_LIST = {\n  dependencies: [list.ListNode, list.ListItemNode],\n  export: (node, exportChildren) => {\n    return list.$isListNode(node) ? listExport(node, exportChildren, 0) : null;\n  },\n  regExp: /^(\\s*)(?:-\\s)?\\s?(\\[(\\s|x)?\\])\\s/i,\n  replace: listReplace('check'),\n  type: 'element'\n};\nconst ORDERED_LIST = {\n  dependencies: [list.ListNode, list.ListItemNode],\n  export: (node, exportChildren) => {\n    return list.$isListNode(node) ? listExport(node, exportChildren, 0) : null;\n  },\n  regExp: /^(\\s*)(\\d{1,})\\.\\s/,\n  replace: listReplace('number'),\n  type: 'element'\n};\nconst INLINE_CODE = {\n  format: ['code'],\n  tag: '`',\n  type: 'text-format'\n};\nconst HIGHLIGHT = {\n  format: ['highlight'],\n  tag: '==',\n  type: 'text-format'\n};\nconst BOLD_ITALIC_STAR = {\n  format: ['bold', 'italic'],\n  tag: '***',\n  type: 'text-format'\n};\nconst BOLD_ITALIC_UNDERSCORE = {\n  format: ['bold', 'italic'],\n  intraword: false,\n  tag: '___',\n  type: 'text-format'\n};\nconst BOLD_STAR = {\n  format: ['bold'],\n  tag: '**',\n  type: 'text-format'\n};\nconst BOLD_UNDERSCORE = {\n  format: ['bold'],\n  intraword: false,\n  tag: '__',\n  type: 'text-format'\n};\nconst STRIKETHROUGH = {\n  format: ['strikethrough'],\n  tag: '~~',\n  type: 'text-format'\n};\nconst ITALIC_STAR = {\n  format: ['italic'],\n  tag: '*',\n  type: 'text-format'\n};\nconst ITALIC_UNDERSCORE = {\n  format: ['italic'],\n  intraword: false,\n  tag: '_',\n  type: 'text-format'\n}; // Order of text transformers matters:\n//\n// - code should go first as it prevents any transformations inside\n// - then longer tags match (e.g. ** or __ should go before * or _)\n\nconst LINK = {\n  dependencies: [link.LinkNode],\n  export: (node, exportChildren, exportFormat) => {\n    if (!link.$isLinkNode(node)) {\n      return null;\n    }\n\n    const linkContent = `[${node.getTextContent()}](${node.getURL()})`;\n    const firstChild = node.getFirstChild(); // Add text styles only if link has single text node inside. If it's more\n    // then one we ignore it as markdown does not support nested styles for links\n\n    if (node.getChildrenSize() === 1 && lexical.$isTextNode(firstChild)) {\n      return exportFormat(firstChild, linkContent);\n    } else {\n      return linkContent;\n    }\n  },\n  importRegExp: /(?:\\[([^[]+)\\])(?:\\(([^()]+)\\))/,\n  regExp: /(?:\\[([^[]+)\\])(?:\\(([^()]+)\\))$/,\n  replace: (textNode, match) => {\n    const [, linkText, linkUrl] = match;\n    const linkNode = link.$createLinkNode(linkUrl);\n    const linkTextNode = lexical.$createTextNode(linkText);\n    linkTextNode.setFormat(textNode.getFormat());\n    linkNode.append(linkTextNode);\n    textNode.replace(linkNode);\n  },\n  trigger: ')',\n  type: 'text-match'\n};\n\n/** @module @lexical/markdown */\nconst ELEMENT_TRANSFORMERS = [HEADING, QUOTE, CODE, UNORDERED_LIST, ORDERED_LIST]; // Order of text format transformers matters:\n//\n// - code should go first as it prevents any transformations inside\n// - then longer tags match (e.g. ** or __ should go before * or _)\n\nconst TEXT_FORMAT_TRANSFORMERS = [INLINE_CODE, BOLD_ITALIC_STAR, BOLD_ITALIC_UNDERSCORE, BOLD_STAR, BOLD_UNDERSCORE, HIGHLIGHT, ITALIC_STAR, ITALIC_UNDERSCORE, STRIKETHROUGH];\nconst TEXT_MATCH_TRANSFORMERS = [LINK];\nconst TRANSFORMERS = [...ELEMENT_TRANSFORMERS, ...TEXT_FORMAT_TRANSFORMERS, ...TEXT_MATCH_TRANSFORMERS];\n\nfunction $convertFromMarkdownString(markdown, transformers = TRANSFORMERS) {\n  const importMarkdown = createMarkdownImport(transformers);\n  return importMarkdown(markdown);\n}\n\nfunction $convertToMarkdownString(transformers = TRANSFORMERS) {\n  const exportMarkdown = createMarkdownExport(transformers);\n  return exportMarkdown();\n}\n\nexports.$convertFromMarkdownString = $convertFromMarkdownString;\nexports.$convertToMarkdownString = $convertToMarkdownString;\nexports.BOLD_ITALIC_STAR = BOLD_ITALIC_STAR;\nexports.BOLD_ITALIC_UNDERSCORE = BOLD_ITALIC_UNDERSCORE;\nexports.BOLD_STAR = BOLD_STAR;\nexports.BOLD_UNDERSCORE = BOLD_UNDERSCORE;\nexports.CHECK_LIST = CHECK_LIST;\nexports.CODE = CODE;\nexports.ELEMENT_TRANSFORMERS = ELEMENT_TRANSFORMERS;\nexports.HEADING = HEADING;\nexports.HIGHLIGHT = HIGHLIGHT;\nexports.INLINE_CODE = INLINE_CODE;\nexports.ITALIC_STAR = ITALIC_STAR;\nexports.ITALIC_UNDERSCORE = ITALIC_UNDERSCORE;\nexports.LINK = LINK;\nexports.ORDERED_LIST = ORDERED_LIST;\nexports.QUOTE = QUOTE;\nexports.STRIKETHROUGH = STRIKETHROUGH;\nexports.TEXT_FORMAT_TRANSFORMERS = TEXT_FORMAT_TRANSFORMERS;\nexports.TEXT_MATCH_TRANSFORMERS = TEXT_MATCH_TRANSFORMERS;\nexports.TRANSFORMERS = TRANSFORMERS;\nexports.UNORDERED_LIST = UNORDERED_LIST;\nexports.registerMarkdownShortcuts = registerMarkdownShortcuts;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/markdown/LexicalMarkdown.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/markdown/LexicalMarkdown.js":
/*!***********************************************************!*\
  !*** ./node_modules/@lexical/markdown/LexicalMarkdown.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalMarkdown =  true ? __webpack_require__(/*! ./LexicalMarkdown.dev.js */ \"(ssr)/./node_modules/@lexical/markdown/LexicalMarkdown.dev.js\") : 0\nmodule.exports = LexicalMarkdown;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvbWFya2Rvd24vTGV4aWNhbE1hcmtkb3duLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osd0JBQXdCLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQywrRkFBMEIsSUFBSSxDQUFvQztBQUMzSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL21hcmtkb3duL0xleGljYWxNYXJrZG93bi5qcz82YzZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsTWFya2Rvd24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbE1hcmtkb3duLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsTWFya2Rvd24ucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxNYXJrZG93bjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/markdown/LexicalMarkdown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/offset/LexicalOffset.dev.js":
/*!***********************************************************!*\
  !*** ./node_modules/@lexical/offset/LexicalOffset.dev.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/** @module @lexical/offset */\nclass OffsetView {\n  constructor(offsetMap, firstNode, blockOffsetSize = 1) {\n    this._offsetMap = offsetMap;\n    this._firstNode = firstNode;\n    this._blockOffsetSize = blockOffsetSize;\n  }\n\n  createSelectionFromOffsets(originalStart, originalEnd, diffOffsetView) {\n    const firstNode = this._firstNode;\n\n    if (firstNode === null) {\n      return null;\n    }\n\n    let start = originalStart;\n    let end = originalEnd;\n    let startOffsetNode = $searchForNodeWithOffset(firstNode, start, this._blockOffsetSize);\n    let endOffsetNode = $searchForNodeWithOffset(firstNode, end, this._blockOffsetSize);\n\n    if (diffOffsetView !== undefined) {\n      start = $getAdjustedOffsetFromDiff(start, startOffsetNode, diffOffsetView, this, this._blockOffsetSize);\n      startOffsetNode = $searchForNodeWithOffset(firstNode, start, this._blockOffsetSize);\n      end = $getAdjustedOffsetFromDiff(end, endOffsetNode, diffOffsetView, this, this._blockOffsetSize);\n      endOffsetNode = $searchForNodeWithOffset(firstNode, end, this._blockOffsetSize);\n    }\n\n    if (startOffsetNode === null || endOffsetNode === null) {\n      return null;\n    }\n\n    let startKey = startOffsetNode.key;\n    let endKey = endOffsetNode.key;\n    const startNode = lexical.$getNodeByKey(startKey);\n    const endNode = lexical.$getNodeByKey(endKey);\n\n    if (startNode === null || endNode === null) {\n      return null;\n    }\n\n    let startOffset = 0;\n    let endOffset = 0;\n    let startType = 'element';\n    let endType = 'element';\n\n    if (startOffsetNode.type === 'text') {\n      startOffset = start - startOffsetNode.start;\n      startType = 'text'; // If we are at the edge of a text node and we\n      // don't have a collapsed selection, then let's\n      // try and correct the offset node.\n\n      const sibling = startNode.getNextSibling();\n\n      if (start !== end && startOffset === startNode.getTextContentSize() && lexical.$isTextNode(sibling)) {\n        startOffset = 0;\n        startKey = sibling.__key;\n      }\n    } else if (startOffsetNode.type === 'inline') {\n      startKey = startNode.getParentOrThrow().getKey();\n      startOffset = end > startOffsetNode.start ? startOffsetNode.end : startOffsetNode.start;\n    }\n\n    if (endOffsetNode.type === 'text') {\n      endOffset = end - endOffsetNode.start;\n      endType = 'text';\n    } else if (endOffsetNode.type === 'inline') {\n      endKey = endNode.getParentOrThrow().getKey();\n      endOffset = end > endOffsetNode.start ? endOffsetNode.end : endOffsetNode.start;\n    }\n\n    const selection = lexical.$createRangeSelection();\n\n    if (selection === null) {\n      return null;\n    }\n\n    selection.anchor.set(startKey, startOffset, startType);\n    selection.focus.set(endKey, endOffset, endType);\n    return selection;\n  }\n\n  getOffsetsFromSelection(selection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const offsetMap = this._offsetMap;\n    const anchorOffset = anchor.offset;\n    const focusOffset = focus.offset;\n    let start = -1;\n    let end = -1;\n\n    if (anchor.type === 'text') {\n      const offsetNode = offsetMap.get(anchor.key);\n\n      if (offsetNode !== undefined) {\n        start = offsetNode.start + anchorOffset;\n      }\n    } else {\n      const node = anchor.getNode().getDescendantByIndex(anchorOffset);\n\n      if (node !== null) {\n        const offsetNode = offsetMap.get(node.getKey());\n\n        if (offsetNode !== undefined) {\n          const isAtEnd = node.getIndexWithinParent() !== anchorOffset;\n          start = isAtEnd ? offsetNode.end : offsetNode.start;\n        }\n      }\n    }\n\n    if (focus.type === 'text') {\n      const offsetNode = offsetMap.get(focus.key);\n\n      if (offsetNode !== undefined) {\n        end = offsetNode.start + focus.offset;\n      }\n    } else {\n      const node = focus.getNode().getDescendantByIndex(focusOffset);\n\n      if (node !== null) {\n        const offsetNode = offsetMap.get(node.getKey());\n\n        if (offsetNode !== undefined) {\n          const isAtEnd = node.getIndexWithinParent() !== focusOffset;\n          end = isAtEnd ? offsetNode.end : offsetNode.start;\n        }\n      }\n    }\n\n    return [start, end];\n  }\n\n}\n\nfunction $getAdjustedOffsetFromDiff(offset, offsetNode, prevOffsetView, offsetView, blockOffsetSize) {\n  const prevOffsetMap = prevOffsetView._offsetMap;\n  const offsetMap = offsetView._offsetMap;\n  const visited = new Set();\n  let adjustedOffset = offset;\n  let currentNode = offsetNode;\n\n  while (currentNode !== null) {\n    const key = currentNode.key;\n    const prevNode = prevOffsetMap.get(key);\n    const diff = currentNode.end - currentNode.start;\n    visited.add(key);\n\n    if (prevNode === undefined) {\n      adjustedOffset += diff;\n    } else {\n      const prevDiff = prevNode.end - prevNode.start;\n\n      if (prevDiff !== diff) {\n        adjustedOffset += diff - prevDiff;\n      }\n    }\n\n    const sibling = currentNode.prev;\n\n    if (sibling !== null) {\n      currentNode = sibling;\n      continue;\n    }\n\n    let parent = currentNode.parent;\n\n    while (parent !== null) {\n      let parentSibling = parent.prev;\n\n      if (parentSibling !== null) {\n        const parentSiblingKey = parentSibling.key;\n        const prevParentSibling = prevOffsetMap.get(parentSiblingKey);\n        const parentDiff = parentSibling.end - parentSibling.start;\n        visited.add(parentSiblingKey);\n\n        if (prevParentSibling === undefined) {\n          adjustedOffset += parentDiff;\n        } else {\n          const prevParentDiff = prevParentSibling.end - prevParentSibling.start;\n\n          if (prevParentDiff !== parentDiff) {\n            adjustedOffset += parentDiff - prevParentDiff;\n          }\n        }\n\n        parentSibling = parentSibling.prev;\n      }\n\n      parent = parent.parent;\n    }\n\n    break;\n  } // Now traverse through the old offsets nodes and find any nodes we missed\n  // above, because they were not in the latest offset node view (they have been\n  // deleted).\n\n\n  const prevFirstNode = prevOffsetView._firstNode;\n\n  if (prevFirstNode !== null) {\n    currentNode = $searchForNodeWithOffset(prevFirstNode, offset, blockOffsetSize);\n    let alreadyVisitedParentOfCurrentNode = false;\n\n    while (currentNode !== null) {\n      if (!visited.has(currentNode.key)) {\n        alreadyVisitedParentOfCurrentNode = true;\n        break;\n      }\n\n      currentNode = currentNode.parent;\n    }\n\n    if (!alreadyVisitedParentOfCurrentNode) {\n      while (currentNode !== null) {\n        const key = currentNode.key;\n\n        if (!visited.has(key)) {\n          const node = offsetMap.get(key);\n          const prevDiff = currentNode.end - currentNode.start;\n\n          if (node === undefined) {\n            adjustedOffset -= prevDiff;\n          } else {\n            const diff = node.end - node.start;\n\n            if (prevDiff !== diff) {\n              adjustedOffset += diff - prevDiff;\n            }\n          }\n        }\n\n        currentNode = currentNode.prev;\n      }\n    }\n  }\n\n  return adjustedOffset;\n}\n\nfunction $searchForNodeWithOffset(firstNode, offset, blockOffsetSize) {\n  let currentNode = firstNode;\n\n  while (currentNode !== null) {\n    const end = currentNode.end + (currentNode.type !== 'element' || blockOffsetSize === 0 ? 1 : 0);\n\n    if (offset < end) {\n      const child = currentNode.child;\n\n      if (child !== null) {\n        currentNode = child;\n        continue;\n      }\n\n      return currentNode;\n    }\n\n    const sibling = currentNode.next;\n\n    if (sibling === null) {\n      break;\n    }\n\n    currentNode = sibling;\n  }\n\n  return null;\n}\n\nfunction $createInternalOffsetNode(child, type, start, end, key, parent) {\n  return {\n    child,\n    end,\n    key,\n    next: null,\n    parent,\n    prev: null,\n    start,\n    type\n  };\n}\n\nfunction $createOffsetNode(state, key, parent, nodeMap, offsetMap, blockOffsetSize) {\n  const node = nodeMap.get(key);\n\n  if (node === undefined) {\n    {\n      throw Error(`createOffsetModel: could not find node by key`);\n    }\n  }\n\n  const start = state.offset;\n\n  if (lexical.$isElementNode(node)) {\n    const childKeys = createChildrenArray(node, nodeMap);\n    const blockIsEmpty = childKeys.length === 0;\n    const child = blockIsEmpty ? null : $createOffsetChild(state, childKeys, null, nodeMap, offsetMap, blockOffsetSize); // If the prev node was not a block or the block is empty, we should\n    // account for the user being able to selection the block (due to the \\n).\n\n    if (!state.prevIsBlock || blockIsEmpty) {\n      state.prevIsBlock = true;\n      state.offset += blockOffsetSize;\n    }\n\n    const offsetNode = $createInternalOffsetNode(child, 'element', start, start, key, parent);\n\n    if (child !== null) {\n      child.parent = offsetNode;\n    }\n\n    const end = state.offset;\n    offsetNode.end = end;\n    offsetMap.set(key, offsetNode);\n    return offsetNode;\n  }\n\n  state.prevIsBlock = false;\n  const isText = lexical.$isTextNode(node);\n  const length = isText ? node.__text.length : 1;\n  const end = state.offset += length;\n  const offsetNode = $createInternalOffsetNode(null, isText ? 'text' : 'inline', start, end, key, parent);\n  offsetMap.set(key, offsetNode);\n  return offsetNode;\n}\n\nfunction $createOffsetChild(state, children, parent, nodeMap, offsetMap, blockOffsetSize) {\n  let firstNode = null;\n  let currentNode = null;\n  const childrenLength = children.length;\n\n  for (let i = 0; i < childrenLength; i++) {\n    const childKey = children[i];\n    const offsetNode = $createOffsetNode(state, childKey, parent, nodeMap, offsetMap, blockOffsetSize);\n\n    if (currentNode === null) {\n      firstNode = offsetNode;\n    } else {\n      offsetNode.prev = currentNode;\n      currentNode.next = offsetNode;\n    }\n\n    currentNode = offsetNode;\n  }\n\n  return firstNode;\n}\n\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n\n  while (nodeKey !== null) {\n    const node = nodeMap === null ? lexical.$getNodeByKey(nodeKey) : nodeMap.get(nodeKey);\n\n    if (node === null || node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n\n  return children;\n}\nfunction $createOffsetView(editor, blockOffsetSize = 1, editorState) {\n  const targetEditorState = editorState || editor._pendingEditorState || editor._editorState;\n  const nodeMap = targetEditorState._nodeMap;\n  const root = nodeMap.get('root');\n  const offsetMap = new Map();\n  const state = {\n    offset: 0,\n    prevIsBlock: false\n  };\n  const node = $createOffsetChild(state, createChildrenArray(root, nodeMap), null, nodeMap, offsetMap, blockOffsetSize);\n  return new OffsetView(offsetMap, node, blockOffsetSize);\n}\n\nexports.$createOffsetView = $createOffsetView;\nexports.OffsetView = OffsetView;\nexports.createChildrenArray = createChildrenArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/offset/LexicalOffset.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/offset/LexicalOffset.js":
/*!*******************************************************!*\
  !*** ./node_modules/@lexical/offset/LexicalOffset.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalOffset =  true ? __webpack_require__(/*! ./LexicalOffset.dev.js */ \"(ssr)/./node_modules/@lexical/offset/LexicalOffset.dev.js\") : 0\nmodule.exports = LexicalOffset;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvb2Zmc2V0L0xleGljYWxPZmZzZXQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWixzQkFBc0IsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLHlGQUF3QixJQUFJLENBQWtDO0FBQ3JJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvb2Zmc2V0L0xleGljYWxPZmZzZXQuanM/OTA0MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgTGV4aWNhbE9mZnNldCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gcmVxdWlyZSgnLi9MZXhpY2FsT2Zmc2V0LmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsT2Zmc2V0LnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsT2Zmc2V0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/offset/LexicalOffset.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/overflow/LexicalOverflow.dev.js":
/*!***************************************************************!*\
  !*** ./node_modules/@lexical/overflow/LexicalOverflow.dev.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/** @module @lexical/overflow */\n\n/** @noInheritDoc */\nclass OverflowNode extends lexical.ElementNode {\n  static getType() {\n    return 'overflow';\n  }\n\n  static clone(node) {\n    return new OverflowNode(node.__key);\n  }\n\n  static importJSON(serializedNode) {\n    return $createOverflowNode();\n  }\n\n  static importDOM() {\n    return null;\n  }\n\n  constructor(key) {\n    super(key);\n    this.__type = 'overflow';\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      type: 'overflow'\n    };\n  }\n\n  createDOM(config) {\n    const div = document.createElement('span');\n    const className = config.theme.characterLimit;\n\n    if (typeof className === 'string') {\n      div.className = className;\n    }\n\n    return div;\n  }\n\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n\n  insertNewAfter(selection, restoreSelection = true) {\n    const parent = this.getParentOrThrow();\n    return parent.insertNewAfter(selection, restoreSelection);\n  }\n\n  excludeFromCopy() {\n    return true;\n  }\n\n}\nfunction $createOverflowNode() {\n  return lexical.$applyNodeReplacement(new OverflowNode());\n}\nfunction $isOverflowNode(node) {\n  return node instanceof OverflowNode;\n}\n\nexports.$createOverflowNode = $createOverflowNode;\nexports.$isOverflowNode = $isOverflowNode;\nexports.OverflowNode = OverflowNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvb3ZlcmZsb3cvTGV4aWNhbE92ZXJmbG93LmRldi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYixjQUFjLG1CQUFPLENBQUMsd0RBQVM7O0FBRS9COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQix1QkFBdUI7QUFDdkIsb0JBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvb3ZlcmZsb3cvTGV4aWNhbE92ZXJmbG93LmRldi5qcz8xYTA2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbGV4aWNhbCA9IHJlcXVpcmUoJ2xleGljYWwnKTtcblxuLyoqIEBtb2R1bGUgQGxleGljYWwvb3ZlcmZsb3cgKi9cblxuLyoqIEBub0luaGVyaXREb2MgKi9cbmNsYXNzIE92ZXJmbG93Tm9kZSBleHRlbmRzIGxleGljYWwuRWxlbWVudE5vZGUge1xuICBzdGF0aWMgZ2V0VHlwZSgpIHtcbiAgICByZXR1cm4gJ292ZXJmbG93JztcbiAgfVxuXG4gIHN0YXRpYyBjbG9uZShub2RlKSB7XG4gICAgcmV0dXJuIG5ldyBPdmVyZmxvd05vZGUobm9kZS5fX2tleSk7XG4gIH1cblxuICBzdGF0aWMgaW1wb3J0SlNPTihzZXJpYWxpemVkTm9kZSkge1xuICAgIHJldHVybiAkY3JlYXRlT3ZlcmZsb3dOb2RlKCk7XG4gIH1cblxuICBzdGF0aWMgaW1wb3J0RE9NKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3RydWN0b3Ioa2V5KSB7XG4gICAgc3VwZXIoa2V5KTtcbiAgICB0aGlzLl9fdHlwZSA9ICdvdmVyZmxvdyc7XG4gIH1cblxuICBleHBvcnRKU09OKCkge1xuICAgIHJldHVybiB7IC4uLnN1cGVyLmV4cG9ydEpTT04oKSxcbiAgICAgIHR5cGU6ICdvdmVyZmxvdydcbiAgICB9O1xuICB9XG5cbiAgY3JlYXRlRE9NKGNvbmZpZykge1xuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBjb25zdCBjbGFzc05hbWUgPSBjb25maWcudGhlbWUuY2hhcmFjdGVyTGltaXQ7XG5cbiAgICBpZiAodHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGRpdi5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpdjtcbiAgfVxuXG4gIHVwZGF0ZURPTShwcmV2Tm9kZSwgZG9tKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaW5zZXJ0TmV3QWZ0ZXIoc2VsZWN0aW9uLCByZXN0b3JlU2VsZWN0aW9uID0gdHJ1ZSkge1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50T3JUaHJvdygpO1xuICAgIHJldHVybiBwYXJlbnQuaW5zZXJ0TmV3QWZ0ZXIoc2VsZWN0aW9uLCByZXN0b3JlU2VsZWN0aW9uKTtcbiAgfVxuXG4gIGV4Y2x1ZGVGcm9tQ29weSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG59XG5mdW5jdGlvbiAkY3JlYXRlT3ZlcmZsb3dOb2RlKCkge1xuICByZXR1cm4gbGV4aWNhbC4kYXBwbHlOb2RlUmVwbGFjZW1lbnQobmV3IE92ZXJmbG93Tm9kZSgpKTtcbn1cbmZ1bmN0aW9uICRpc092ZXJmbG93Tm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3ZlcmZsb3dOb2RlO1xufVxuXG5leHBvcnRzLiRjcmVhdGVPdmVyZmxvd05vZGUgPSAkY3JlYXRlT3ZlcmZsb3dOb2RlO1xuZXhwb3J0cy4kaXNPdmVyZmxvd05vZGUgPSAkaXNPdmVyZmxvd05vZGU7XG5leHBvcnRzLk92ZXJmbG93Tm9kZSA9IE92ZXJmbG93Tm9kZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/overflow/LexicalOverflow.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/overflow/LexicalOverflow.js":
/*!***********************************************************!*\
  !*** ./node_modules/@lexical/overflow/LexicalOverflow.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalOverflow =  true ? __webpack_require__(/*! ./LexicalOverflow.dev.js */ \"(ssr)/./node_modules/@lexical/overflow/LexicalOverflow.dev.js\") : 0\nmodule.exports = LexicalOverflow;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvb3ZlcmZsb3cvTGV4aWNhbE92ZXJmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osd0JBQXdCLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQywrRkFBMEIsSUFBSSxDQUFvQztBQUMzSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL292ZXJmbG93L0xleGljYWxPdmVyZmxvdy5qcz9lYzM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsT3ZlcmZsb3cgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbE92ZXJmbG93LmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsT3ZlcmZsb3cucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxPdmVyZmxvdzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/overflow/LexicalOverflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/plain-text/LexicalPlainText.dev.js":
/*!******************************************************************!*\
  !*** ./node_modules/@lexical/plain-text/LexicalPlainText.dev.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar clipboard = __webpack_require__(/*! @lexical/clipboard */ \"(ssr)/./node_modules/@lexical/clipboard/LexicalClipboard.js\");\nvar selection = __webpack_require__(/*! @lexical/selection */ \"(ssr)/./node_modules/@lexical/selection/LexicalSelection.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nCAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nCAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\n\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent); // export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/** @module @lexical/plain-text */\n\nfunction onCopyForPlainText(event, editor) {\n  editor.update(() => {\n    const clipboardData = event instanceof KeyboardEvent ? null : event.clipboardData;\n    const selection = lexical.$getSelection();\n\n    if (selection !== null && clipboardData != null) {\n      event.preventDefault();\n      const htmlString = clipboard.$getHtmlContent(editor);\n\n      if (htmlString !== null) {\n        clipboardData.setData('text/html', htmlString);\n      }\n\n      clipboardData.setData('text/plain', selection.getTextContent());\n    }\n  });\n}\n\nfunction onPasteForPlainText(event, editor) {\n  event.preventDefault();\n  editor.update(() => {\n    const selection = lexical.$getSelection();\n    const clipboardData = event instanceof InputEvent || event instanceof KeyboardEvent ? null : event.clipboardData;\n\n    if (clipboardData != null && lexical.$isRangeSelection(selection)) {\n      clipboard.$insertDataTransferForPlainText(clipboardData, selection);\n    }\n  }, {\n    tag: 'paste'\n  });\n}\n\nfunction onCutForPlainText(event, editor) {\n  onCopyForPlainText(event, editor);\n  editor.update(() => {\n    const selection = lexical.$getSelection();\n\n    if (lexical.$isRangeSelection(selection)) {\n      selection.removeText();\n    }\n  });\n}\n\nfunction registerPlainText(editor) {\n  const removeListener = utils.mergeRegister(editor.registerCommand(lexical.DELETE_CHARACTER_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.deleteCharacter(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_WORD_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.deleteWord(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_LINE_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.deleteLine(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, eventOrText => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    if (typeof eventOrText === 'string') {\n      selection.insertText(eventOrText);\n    } else {\n      const dataTransfer = eventOrText.dataTransfer;\n\n      if (dataTransfer != null) {\n        clipboard.$insertDataTransferForPlainText(dataTransfer, selection);\n      } else {\n        const data = eventOrText.data;\n\n        if (data) {\n          selection.insertText(data);\n        }\n      }\n    }\n\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.REMOVE_TEXT_COMMAND, () => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.removeText();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_LINE_BREAK_COMMAND, selectStart => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.insertLineBreak(selectStart);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_PARAGRAPH_COMMAND, () => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.insertLineBreak();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, payload => {\n    const selection$1 = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection$1)) {\n      return false;\n    }\n\n    const event = payload;\n    const isHoldingShift = event.shiftKey;\n\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, true)) {\n      event.preventDefault();\n      selection.$moveCharacter(selection$1, isHoldingShift, true);\n      return true;\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_RIGHT_COMMAND, payload => {\n    const selection$1 = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection$1)) {\n      return false;\n    }\n\n    const event = payload;\n    const isHoldingShift = event.shiftKey;\n\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, false)) {\n      event.preventDefault();\n      selection.$moveCharacter(selection$1, isHoldingShift, false);\n      return true;\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    event.preventDefault();\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, true);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_DELETE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    event.preventDefault();\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, false);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ENTER_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    if (event !== null) {\n      // If we have beforeinput, then we can avoid blocking\n      // the default behavior. This ensures that the iOS can\n      // intercept that we're actually inserting a paragraph,\n      // and autocomplete, autocapitalize etc work as intended.\n      // This can also cause a strange performance issue in\n      // Safari, where there is a noticeable pause due to\n      // preventing the key down of enter.\n      if ((IS_IOS || IS_SAFARI || IS_APPLE_WEBKIT) && CAN_USE_BEFORE_INPUT) {\n        return false;\n      }\n\n      event.preventDefault();\n    }\n\n    return editor.dispatchCommand(lexical.INSERT_LINE_BREAK_COMMAND, false);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.COPY_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    onCopyForPlainText(event, editor);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CUT_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    onCutForPlainText(event, editor);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.PASTE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    onPasteForPlainText(event, editor);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DROP_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    } // TODO: Make drag and drop work at some point.\n\n\n    event.preventDefault();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DRAGSTART_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    } // TODO: Make drag and drop work at some point.\n\n\n    event.preventDefault();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR));\n  return removeListener;\n}\n\nexports.registerPlainText = registerPlainText;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/plain-text/LexicalPlainText.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/plain-text/LexicalPlainText.js":
/*!**************************************************************!*\
  !*** ./node_modules/@lexical/plain-text/LexicalPlainText.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalPlainText =  true ? __webpack_require__(/*! ./LexicalPlainText.dev.js */ \"(ssr)/./node_modules/@lexical/plain-text/LexicalPlainText.dev.js\") : 0\nmodule.exports = LexicalPlainText;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcGxhaW4tdGV4dC9MZXhpY2FsUGxhaW5UZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1oseUJBQXlCLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyxtR0FBMkIsSUFBSSxDQUFxQztBQUM5SSIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3BsYWluLXRleHQvTGV4aWNhbFBsYWluVGV4dC5qcz9jNTcyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsUGxhaW5UZXh0ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyByZXF1aXJlKCcuL0xleGljYWxQbGFpblRleHQuZGV2LmpzJykgOiByZXF1aXJlKCcuL0xleGljYWxQbGFpblRleHQucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxQbGFpblRleHQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/plain-text/LexicalPlainText.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalAutoFocusPlugin.dev.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalAutoFocusPlugin.dev.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction AutoFocusPlugin({\n  defaultSelection\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    editor.focus(() => {\n      // If we try and move selection to the same point with setBaseAndExtent, it won't\n      // trigger a re-focus on the element. So in the case this occurs, we'll need to correct it.\n      // Normally this is fine, Selection API !== Focus API, but fore the intents of the naming\n      // of this plugin, which should preserve focus too.\n      const activeElement = document.activeElement;\n      const rootElement = editor.getRootElement();\n\n      if (rootElement !== null && (activeElement === null || !rootElement.contains(activeElement))) {\n        // Note: preventScroll won't work in Webkit.\n        rootElement.focus({\n          preventScroll: true\n        });\n      }\n    }, {\n      defaultSelection\n    });\n  }, [defaultSelection, editor]);\n  return null;\n}\n\nexports.AutoFocusPlugin = AutoFocusPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEF1dG9Gb2N1c1BsdWdpbi5kZXYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBRWIsNkJBQTZCLG1CQUFPLENBQUMsNEdBQXVDO0FBQzVFLFlBQVksbUJBQU8sQ0FBQyx3R0FBTzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTs7QUFFQSx1QkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsQXV0b0ZvY3VzUGx1Z2luLmRldi5qcz8xZTIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTGV4aWNhbENvbXBvc2VyQ29udGV4dCA9IHJlcXVpcmUoJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnKTtcbnZhciByZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbmZ1bmN0aW9uIEF1dG9Gb2N1c1BsdWdpbih7XG4gIGRlZmF1bHRTZWxlY3Rpb25cbn0pIHtcbiAgY29uc3QgW2VkaXRvcl0gPSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0LnVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgcmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBlZGl0b3IuZm9jdXMoKCkgPT4ge1xuICAgICAgLy8gSWYgd2UgdHJ5IGFuZCBtb3ZlIHNlbGVjdGlvbiB0byB0aGUgc2FtZSBwb2ludCB3aXRoIHNldEJhc2VBbmRFeHRlbnQsIGl0IHdvbid0XG4gICAgICAvLyB0cmlnZ2VyIGEgcmUtZm9jdXMgb24gdGhlIGVsZW1lbnQuIFNvIGluIHRoZSBjYXNlIHRoaXMgb2NjdXJzLCB3ZSdsbCBuZWVkIHRvIGNvcnJlY3QgaXQuXG4gICAgICAvLyBOb3JtYWxseSB0aGlzIGlzIGZpbmUsIFNlbGVjdGlvbiBBUEkgIT09IEZvY3VzIEFQSSwgYnV0IGZvcmUgdGhlIGludGVudHMgb2YgdGhlIG5hbWluZ1xuICAgICAgLy8gb2YgdGhpcyBwbHVnaW4sIHdoaWNoIHNob3VsZCBwcmVzZXJ2ZSBmb2N1cyB0b28uXG4gICAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgIGNvbnN0IHJvb3RFbGVtZW50ID0gZWRpdG9yLmdldFJvb3RFbGVtZW50KCk7XG5cbiAgICAgIGlmIChyb290RWxlbWVudCAhPT0gbnVsbCAmJiAoYWN0aXZlRWxlbWVudCA9PT0gbnVsbCB8fCAhcm9vdEVsZW1lbnQuY29udGFpbnMoYWN0aXZlRWxlbWVudCkpKSB7XG4gICAgICAgIC8vIE5vdGU6IHByZXZlbnRTY3JvbGwgd29uJ3Qgd29yayBpbiBXZWJraXQuXG4gICAgICAgIHJvb3RFbGVtZW50LmZvY3VzKHtcbiAgICAgICAgICBwcmV2ZW50U2Nyb2xsOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHRTZWxlY3Rpb25cbiAgICB9KTtcbiAgfSwgW2RlZmF1bHRTZWxlY3Rpb24sIGVkaXRvcl0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0cy5BdXRvRm9jdXNQbHVnaW4gPSBBdXRvRm9jdXNQbHVnaW47XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalAutoFocusPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalAutoFocusPlugin.js":
/*!***************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalAutoFocusPlugin.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalAutoFocusPlugin =  true ? __webpack_require__(/*! ./LexicalAutoFocusPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalAutoFocusPlugin.dev.js\") : 0\nmodule.exports = LexicalAutoFocusPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEF1dG9Gb2N1c1BsdWdpbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLCtCQUErQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsMEdBQWlDLElBQUksQ0FBMkM7QUFDaEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsQXV0b0ZvY3VzUGx1Z2luLmpzPzVmMDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxBdXRvRm9jdXNQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbEF1dG9Gb2N1c1BsdWdpbi5kZXYuanMnKSA6IHJlcXVpcmUoJy4vTGV4aWNhbEF1dG9Gb2N1c1BsdWdpbi5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbEF1dG9Gb2N1c1BsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalAutoFocusPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalBlockWithAlignableContents.dev.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalBlockWithAlignableContents.dev.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar LexicalDecoratorBlockNode = __webpack_require__(/*! @lexical/react/LexicalDecoratorBlockNode */ \"(ssr)/./node_modules/@lexical/react/LexicalDecoratorBlockNode.js\");\nvar useLexicalNodeSelection = __webpack_require__(/*! @lexical/react/useLexicalNodeSelection */ \"(ssr)/./node_modules/@lexical/react/useLexicalNodeSelection.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction BlockWithAlignableContents({\n  children,\n  format,\n  nodeKey,\n  className\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const [isSelected, setSelected, clearSelection] = useLexicalNodeSelection.useLexicalNodeSelection(nodeKey);\n  const ref = React.useRef(null);\n  const onDelete = React.useCallback(event => {\n    if (isSelected && lexical.$isNodeSelection(lexical.$getSelection())) {\n      event.preventDefault();\n      editor.update(() => {\n        const node = lexical.$getNodeByKey(nodeKey);\n        if (node === null) return;\n        lexical.$setSelection(node.selectPrevious());\n\n        if (lexical.$isDecoratorNode(node)) {\n          node.remove();\n        }\n      });\n    }\n\n    return false;\n  }, [editor, isSelected, nodeKey]);\n  React.useEffect(() => {\n    return utils.mergeRegister(editor.registerCommand(lexical.FORMAT_ELEMENT_COMMAND, formatType => {\n      if (isSelected) {\n        const selection = lexical.$getSelection();\n\n        if (lexical.$isNodeSelection(selection)) {\n          const node = lexical.$getNodeByKey(nodeKey);\n\n          if (LexicalDecoratorBlockNode.$isDecoratorBlockNode(node)) {\n            node.setFormat(formatType);\n          }\n        } else if (lexical.$isRangeSelection(selection)) {\n          const nodes = selection.getNodes();\n\n          for (const node of nodes) {\n            if (LexicalDecoratorBlockNode.$isDecoratorBlockNode(node)) {\n              node.setFormat(formatType);\n            } else {\n              const element = utils.$getNearestBlockElementAncestorOrThrow(node);\n              element.setFormat(formatType);\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return false;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.CLICK_COMMAND, event => {\n      if (event.target === ref.current) {\n        event.preventDefault();\n\n        if (!event.shiftKey) {\n          clearSelection();\n        }\n\n        setSelected(!isSelected);\n        return true;\n      }\n\n      return false;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_DELETE_COMMAND, onDelete, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, onDelete, lexical.COMMAND_PRIORITY_LOW));\n  }, [clearSelection, editor, isSelected, nodeKey, onDelete, setSelected]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: [className.base, isSelected ? className.focus : null].filter(Boolean).join(' '),\n    ref: ref,\n    style: {\n      textAlign: format ? format : undefined\n    }\n  }, children);\n}\n\nexports.BlockWithAlignableContents = BlockWithAlignableContents;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEJsb2NrV2l0aEFsaWduYWJsZUNvbnRlbnRzLmRldi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyw0R0FBdUM7QUFDNUUsZ0NBQWdDLG1CQUFPLENBQUMsa0hBQTBDO0FBQ2xGLDhCQUE4QixtQkFBTyxDQUFDLDhHQUF3QztBQUM5RSxZQUFZLG1CQUFPLENBQUMsMkVBQWdCO0FBQ3BDLGNBQWMsbUJBQU8sQ0FBQyx3REFBUztBQUMvQixZQUFZLG1CQUFPLENBQUMsd0dBQU87O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsQmxvY2tXaXRoQWxpZ25hYmxlQ29udGVudHMuZGV2LmpzP2I0OTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBMZXhpY2FsQ29tcG9zZXJDb250ZXh0ID0gcmVxdWlyZSgnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCcpO1xudmFyIExleGljYWxEZWNvcmF0b3JCbG9ja05vZGUgPSByZXF1aXJlKCdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsRGVjb3JhdG9yQmxvY2tOb2RlJyk7XG52YXIgdXNlTGV4aWNhbE5vZGVTZWxlY3Rpb24gPSByZXF1aXJlKCdAbGV4aWNhbC9yZWFjdC91c2VMZXhpY2FsTm9kZVNlbGVjdGlvbicpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnQGxleGljYWwvdXRpbHMnKTtcbnZhciBsZXhpY2FsID0gcmVxdWlyZSgnbGV4aWNhbCcpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuZnVuY3Rpb24gQmxvY2tXaXRoQWxpZ25hYmxlQ29udGVudHMoe1xuICBjaGlsZHJlbixcbiAgZm9ybWF0LFxuICBub2RlS2V5LFxuICBjbGFzc05hbWVcbn0pIHtcbiAgY29uc3QgW2VkaXRvcl0gPSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0LnVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgY29uc3QgW2lzU2VsZWN0ZWQsIHNldFNlbGVjdGVkLCBjbGVhclNlbGVjdGlvbl0gPSB1c2VMZXhpY2FsTm9kZVNlbGVjdGlvbi51c2VMZXhpY2FsTm9kZVNlbGVjdGlvbihub2RlS2V5KTtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBvbkRlbGV0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoaXNTZWxlY3RlZCAmJiBsZXhpY2FsLiRpc05vZGVTZWxlY3Rpb24obGV4aWNhbC4kZ2V0U2VsZWN0aW9uKCkpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZWRpdG9yLnVwZGF0ZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBsZXhpY2FsLiRnZXROb2RlQnlLZXkobm9kZUtleSk7XG4gICAgICAgIGlmIChub2RlID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGxleGljYWwuJHNldFNlbGVjdGlvbihub2RlLnNlbGVjdFByZXZpb3VzKCkpO1xuXG4gICAgICAgIGlmIChsZXhpY2FsLiRpc0RlY29yYXRvck5vZGUobm9kZSkpIHtcbiAgICAgICAgICBub2RlLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sIFtlZGl0b3IsIGlzU2VsZWN0ZWQsIG5vZGVLZXldKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gdXRpbHMubWVyZ2VSZWdpc3RlcihlZGl0b3IucmVnaXN0ZXJDb21tYW5kKGxleGljYWwuRk9STUFUX0VMRU1FTlRfQ09NTUFORCwgZm9ybWF0VHlwZSA9PiB7XG4gICAgICBpZiAoaXNTZWxlY3RlZCkge1xuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBsZXhpY2FsLiRnZXRTZWxlY3Rpb24oKTtcblxuICAgICAgICBpZiAobGV4aWNhbC4kaXNOb2RlU2VsZWN0aW9uKHNlbGVjdGlvbikpIHtcbiAgICAgICAgICBjb25zdCBub2RlID0gbGV4aWNhbC4kZ2V0Tm9kZUJ5S2V5KG5vZGVLZXkpO1xuXG4gICAgICAgICAgaWYgKExleGljYWxEZWNvcmF0b3JCbG9ja05vZGUuJGlzRGVjb3JhdG9yQmxvY2tOb2RlKG5vZGUpKSB7XG4gICAgICAgICAgICBub2RlLnNldEZvcm1hdChmb3JtYXRUeXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGV4aWNhbC4kaXNSYW5nZVNlbGVjdGlvbihzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgY29uc3Qgbm9kZXMgPSBzZWxlY3Rpb24uZ2V0Tm9kZXMoKTtcblxuICAgICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgICAgICAgaWYgKExleGljYWxEZWNvcmF0b3JCbG9ja05vZGUuJGlzRGVjb3JhdG9yQmxvY2tOb2RlKG5vZGUpKSB7XG4gICAgICAgICAgICAgIG5vZGUuc2V0Rm9ybWF0KGZvcm1hdFR5cGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHV0aWxzLiRnZXROZWFyZXN0QmxvY2tFbGVtZW50QW5jZXN0b3JPclRocm93KG5vZGUpO1xuICAgICAgICAgICAgICBlbGVtZW50LnNldEZvcm1hdChmb3JtYXRUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sIGxleGljYWwuQ09NTUFORF9QUklPUklUWV9MT1cpLCBlZGl0b3IucmVnaXN0ZXJDb21tYW5kKGxleGljYWwuQ0xJQ0tfQ09NTUFORCwgZXZlbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gcmVmLmN1cnJlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpZiAoIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFNlbGVjdGVkKCFpc1NlbGVjdGVkKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCBsZXhpY2FsLkNPTU1BTkRfUFJJT1JJVFlfTE9XKSwgZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChsZXhpY2FsLktFWV9ERUxFVEVfQ09NTUFORCwgb25EZWxldGUsIGxleGljYWwuQ09NTUFORF9QUklPUklUWV9MT1cpLCBlZGl0b3IucmVnaXN0ZXJDb21tYW5kKGxleGljYWwuS0VZX0JBQ0tTUEFDRV9DT01NQU5ELCBvbkRlbGV0ZSwgbGV4aWNhbC5DT01NQU5EX1BSSU9SSVRZX0xPVykpO1xuICB9LCBbY2xlYXJTZWxlY3Rpb24sIGVkaXRvciwgaXNTZWxlY3RlZCwgbm9kZUtleSwgb25EZWxldGUsIHNldFNlbGVjdGVkXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBbY2xhc3NOYW1lLmJhc2UsIGlzU2VsZWN0ZWQgPyBjbGFzc05hbWUuZm9jdXMgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiB7XG4gICAgICB0ZXh0QWxpZ246IGZvcm1hdCA/IGZvcm1hdCA6IHVuZGVmaW5lZFxuICAgIH1cbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5leHBvcnRzLkJsb2NrV2l0aEFsaWduYWJsZUNvbnRlbnRzID0gQmxvY2tXaXRoQWxpZ25hYmxlQ29udGVudHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalBlockWithAlignableContents.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalBlockWithAlignableContents.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalBlockWithAlignableContents.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalBlockWithAlignableContents =  true ? __webpack_require__(/*! ./LexicalBlockWithAlignableContents.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalBlockWithAlignableContents.dev.js\") : 0\nmodule.exports = LexicalBlockWithAlignableContents;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEJsb2NrV2l0aEFsaWduYWJsZUNvbnRlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osMENBQTBDLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyxnSUFBNEMsSUFBSSxDQUFzRDtBQUNqTSIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxCbG9ja1dpdGhBbGlnbmFibGVDb250ZW50cy5qcz83ZDY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsQmxvY2tXaXRoQWxpZ25hYmxlQ29udGVudHMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbEJsb2NrV2l0aEFsaWduYWJsZUNvbnRlbnRzLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsQmxvY2tXaXRoQWxpZ25hYmxlQ29udGVudHMucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxCbG9ja1dpdGhBbGlnbmFibGVDb250ZW50czsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalBlockWithAlignableContents.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalCharacterLimitPlugin.dev.js":
/*!************************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalCharacterLimitPlugin.dev.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar overflow = __webpack_require__(/*! @lexical/overflow */ \"(ssr)/./node_modules/@lexical/overflow/LexicalOverflow.js\");\nvar text = __webpack_require__(/*! @lexical/text */ \"(ssr)/./node_modules/@lexical/text/LexicalText.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction useCharacterLimit(editor, maxCharacters, optional = Object.freeze({})) {\n  const {\n    strlen = input => input.length,\n    // UTF-16\n    remainingCharacters = () => {\n      return;\n    }\n  } = optional;\n  React.useEffect(() => {\n    if (!editor.hasNodes([overflow.OverflowNode])) {\n      {\n        throw Error(`useCharacterLimit: OverflowNode not registered on editor`);\n      }\n    }\n  }, [editor]);\n  React.useEffect(() => {\n    let text$1 = editor.getEditorState().read(text.$rootTextContent);\n    let lastComputedTextLength = 0;\n    return utils.mergeRegister(editor.registerTextContentListener(currentText => {\n      text$1 = currentText;\n    }), editor.registerUpdateListener(({\n      dirtyLeaves\n    }) => {\n      const isComposing = editor.isComposing();\n      const hasDirtyLeaves = dirtyLeaves.size > 0;\n\n      if (isComposing || !hasDirtyLeaves) {\n        return;\n      }\n\n      const textLength = strlen(text$1);\n      const textLengthAboveThreshold = textLength > maxCharacters || lastComputedTextLength !== null && lastComputedTextLength > maxCharacters;\n      const diff = maxCharacters - textLength;\n      remainingCharacters(diff);\n\n      if (lastComputedTextLength === null || textLengthAboveThreshold) {\n        const offset = findOffset(text$1, maxCharacters, strlen);\n        editor.update(() => {\n          $wrapOverflowedNodes(offset);\n        }, {\n          tag: 'history-merge'\n        });\n      }\n\n      lastComputedTextLength = textLength;\n    }));\n  }, [editor, maxCharacters, remainingCharacters, strlen]);\n}\n\nfunction findOffset(text, maxCharacters, strlen) {\n  // @ts-ignore This is due to be added in a later version of TS\n  const Segmenter = Intl.Segmenter;\n  let offsetUtf16 = 0;\n  let offset = 0;\n\n  if (typeof Segmenter === 'function') {\n    const segmenter = new Segmenter();\n    const graphemes = segmenter.segment(text);\n\n    for (const {\n      segment: grapheme\n    } of graphemes) {\n      const nextOffset = offset + strlen(grapheme);\n\n      if (nextOffset > maxCharacters) {\n        break;\n      }\n\n      offset = nextOffset;\n      offsetUtf16 += grapheme.length;\n    }\n  } else {\n    const codepoints = Array.from(text);\n    const codepointsLength = codepoints.length;\n\n    for (let i = 0; i < codepointsLength; i++) {\n      const codepoint = codepoints[i];\n      const nextOffset = offset + strlen(codepoint);\n\n      if (nextOffset > maxCharacters) {\n        break;\n      }\n\n      offset = nextOffset;\n      offsetUtf16 += codepoint.length;\n    }\n  }\n\n  return offsetUtf16;\n}\n\nfunction $wrapOverflowedNodes(offset) {\n  const dfsNodes = utils.$dfs();\n  const dfsNodesLength = dfsNodes.length;\n  let accumulatedLength = 0;\n\n  for (let i = 0; i < dfsNodesLength; i += 1) {\n    const {\n      node\n    } = dfsNodes[i];\n\n    if (overflow.$isOverflowNode(node)) {\n      const previousLength = accumulatedLength;\n      const nextLength = accumulatedLength + node.getTextContentSize();\n\n      if (nextLength <= offset) {\n        const parent = node.getParent();\n        const previousSibling = node.getPreviousSibling();\n        const nextSibling = node.getNextSibling();\n        $unwrapNode(node);\n        const selection = lexical.$getSelection(); // Restore selection when the overflow children are removed\n\n        if (lexical.$isRangeSelection(selection) && (!selection.anchor.getNode().isAttached() || !selection.focus.getNode().isAttached())) {\n          if (lexical.$isTextNode(previousSibling)) {\n            previousSibling.select();\n          } else if (lexical.$isTextNode(nextSibling)) {\n            nextSibling.select();\n          } else if (parent !== null) {\n            parent.select();\n          }\n        }\n      } else if (previousLength < offset) {\n        const descendant = node.getFirstDescendant();\n        const descendantLength = descendant !== null ? descendant.getTextContentSize() : 0;\n        const previousPlusDescendantLength = previousLength + descendantLength; // For simple text we can redimension the overflow into a smaller and more accurate\n        // container\n\n        const firstDescendantIsSimpleText = lexical.$isTextNode(descendant) && descendant.isSimpleText();\n        const firstDescendantDoesNotOverflow = previousPlusDescendantLength <= offset;\n\n        if (firstDescendantIsSimpleText || firstDescendantDoesNotOverflow) {\n          $unwrapNode(node);\n        }\n      }\n    } else if (lexical.$isLeafNode(node)) {\n      const previousAccumulatedLength = accumulatedLength;\n      accumulatedLength += node.getTextContentSize();\n\n      if (accumulatedLength > offset && !overflow.$isOverflowNode(node.getParent())) {\n        const previousSelection = lexical.$getSelection();\n        let overflowNode; // For simple text we can improve the limit accuracy by splitting the TextNode\n        // on the split point\n\n        if (previousAccumulatedLength < offset && lexical.$isTextNode(node) && node.isSimpleText()) {\n          const [, overflowedText] = node.splitText(offset - previousAccumulatedLength);\n          overflowNode = $wrapNode(overflowedText);\n        } else {\n          overflowNode = $wrapNode(node);\n        }\n\n        if (previousSelection !== null) {\n          lexical.$setSelection(previousSelection);\n        }\n\n        mergePrevious(overflowNode);\n      }\n    }\n  }\n}\n\nfunction $wrapNode(node) {\n  const overflowNode = overflow.$createOverflowNode();\n  node.insertBefore(overflowNode);\n  overflowNode.append(node);\n  return overflowNode;\n}\n\nfunction $unwrapNode(node) {\n  const children = node.getChildren();\n  const childrenLength = children.length;\n\n  for (let i = 0; i < childrenLength; i++) {\n    node.insertBefore(children[i]);\n  }\n\n  node.remove();\n  return childrenLength > 0 ? children[childrenLength - 1] : null;\n}\n\nfunction mergePrevious(overflowNode) {\n  const previousNode = overflowNode.getPreviousSibling();\n\n  if (!overflow.$isOverflowNode(previousNode)) {\n    return;\n  }\n\n  const firstChild = overflowNode.getFirstChild();\n  const previousNodeChildren = previousNode.getChildren();\n  const previousNodeChildrenLength = previousNodeChildren.length;\n\n  if (firstChild === null) {\n    overflowNode.append(...previousNodeChildren);\n  } else {\n    for (let i = 0; i < previousNodeChildrenLength; i++) {\n      firstChild.insertBefore(previousNodeChildren[i]);\n    }\n  }\n\n  const selection = lexical.$getSelection();\n\n  if (lexical.$isRangeSelection(selection)) {\n    const anchor = selection.anchor;\n    const anchorNode = anchor.getNode();\n    const focus = selection.focus;\n    const focusNode = anchor.getNode();\n\n    if (anchorNode.is(previousNode)) {\n      anchor.set(overflowNode.getKey(), anchor.offset, 'element');\n    } else if (anchorNode.is(overflowNode)) {\n      anchor.set(overflowNode.getKey(), previousNodeChildrenLength + anchor.offset, 'element');\n    }\n\n    if (focusNode.is(previousNode)) {\n      focus.set(overflowNode.getKey(), focus.offset, 'element');\n    } else if (focusNode.is(overflowNode)) {\n      focus.set(overflowNode.getKey(), previousNodeChildrenLength + focus.offset, 'element');\n    }\n  }\n\n  previousNode.remove();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CHARACTER_LIMIT = 5;\nlet textEncoderInstance = null;\n\nfunction textEncoder() {\n  if (window.TextEncoder === undefined) {\n    return null;\n  }\n\n  if (textEncoderInstance === null) {\n    textEncoderInstance = new window.TextEncoder();\n  }\n\n  return textEncoderInstance;\n}\n\nfunction utf8Length(text) {\n  const currentTextEncoder = textEncoder();\n\n  if (currentTextEncoder === null) {\n    // http://stackoverflow.com/a/5515960/210370\n    const m = encodeURIComponent(text).match(/%[89ABab]/g);\n    return text.length + (m ? m.length : 0);\n  }\n\n  return currentTextEncoder.encode(text).length;\n}\n\nfunction CharacterLimitPlugin({\n  charset = 'UTF-16',\n  maxLength = CHARACTER_LIMIT\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const [remainingCharacters, setRemainingCharacters] = React.useState(maxLength);\n  const characterLimitProps = React.useMemo(() => ({\n    remainingCharacters: setRemainingCharacters,\n    strlen: text => {\n      if (charset === 'UTF-8') {\n        return utf8Length(text);\n      } else if (charset === 'UTF-16') {\n        return text.length;\n      } else {\n        throw new Error('Unrecognized charset');\n      }\n    }\n  }), [charset]);\n  useCharacterLimit(editor, maxLength, characterLimitProps);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: `characters-limit ${remainingCharacters < 0 ? 'characters-limit-exceeded' : ''}`\n  }, remainingCharacters);\n}\n\nexports.CharacterLimitPlugin = CharacterLimitPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalCharacterLimitPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalCharacterLimitPlugin.js":
/*!********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalCharacterLimitPlugin.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalCharacterLimitPlugin =  true ? __webpack_require__(/*! ./LexicalCharacterLimitPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalCharacterLimitPlugin.dev.js\") : 0\nmodule.exports = LexicalCharacterLimitPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENoYXJhY3RlckxpbWl0UGx1Z2luLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osb0NBQW9DLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyxvSEFBc0MsSUFBSSxDQUFnRDtBQUMvSyIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxDaGFyYWN0ZXJMaW1pdFBsdWdpbi5qcz85NTY5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsQ2hhcmFjdGVyTGltaXRQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbENoYXJhY3RlckxpbWl0UGx1Z2luLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsQ2hhcmFjdGVyTGltaXRQbHVnaW4ucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxDaGFyYWN0ZXJMaW1pdFBsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalCharacterLimitPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalCheckListPlugin.dev.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalCheckListPlugin.dev.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar list = __webpack_require__(/*! @lexical/list */ \"(ssr)/./node_modules/@lexical/list/LexicalList.js\");\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction CheckListPlugin() {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    return utils.mergeRegister(editor.registerCommand(list.INSERT_CHECK_LIST_COMMAND, () => {\n      list.insertList(editor, 'check');\n      return true;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, event => {\n      return handleArrownUpOrDown(event, editor, false);\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, event => {\n      return handleArrownUpOrDown(event, editor, true);\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ESCAPE_COMMAND, event => {\n      const activeItem = getActiveCheckListItem();\n\n      if (activeItem != null) {\n        const rootElement = editor.getRootElement();\n\n        if (rootElement != null) {\n          rootElement.focus();\n        }\n\n        return true;\n      }\n\n      return false;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_SPACE_COMMAND, event => {\n      const activeItem = getActiveCheckListItem();\n\n      if (activeItem != null && editor.isEditable()) {\n        editor.update(() => {\n          const listItemNode = lexical.$getNearestNodeFromDOMNode(activeItem);\n\n          if (list.$isListItemNode(listItemNode)) {\n            event.preventDefault();\n            listItemNode.toggleChecked();\n          }\n        });\n        return true;\n      }\n\n      return false;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, event => {\n      return editor.getEditorState().read(() => {\n        const selection = lexical.$getSelection();\n\n        if (lexical.$isRangeSelection(selection) && selection.isCollapsed()) {\n          const {\n            anchor\n          } = selection;\n          const isElement = anchor.type === 'element';\n\n          if (isElement || anchor.offset === 0) {\n            const anchorNode = anchor.getNode();\n            const elementNode = utils.$findMatchingParent(anchorNode, node => lexical.$isElementNode(node) && !node.isInline());\n\n            if (list.$isListItemNode(elementNode)) {\n              const parent = elementNode.getParent();\n\n              if (list.$isListNode(parent) && parent.getListType() === 'check' && (isElement || elementNode.getFirstDescendant() === anchorNode)) {\n                const domNode = editor.getElementByKey(elementNode.__key);\n\n                if (domNode != null && document.activeElement !== domNode) {\n                  domNode.focus();\n                  event.preventDefault();\n                  return true;\n                }\n              }\n            }\n          }\n        }\n\n        return false;\n      });\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerRootListener((rootElement, prevElement) => {\n      if (rootElement !== null) {\n        rootElement.addEventListener('click', handleClick);\n        rootElement.addEventListener('pointerdown', handlePointerDown);\n      }\n\n      if (prevElement !== null) {\n        prevElement.removeEventListener('click', handleClick);\n        prevElement.removeEventListener('pointerdown', handlePointerDown);\n      }\n    }));\n  });\n  return null;\n}\n\nfunction handleCheckItemEvent(event, callback) {\n  const target = event.target;\n\n  if (target === null || !utils.isHTMLElement(target)) {\n    return;\n  } // Ignore clicks on LI that have nested lists\n\n\n  const firstChild = target.firstChild;\n\n  if (firstChild != null && utils.isHTMLElement(firstChild) && (firstChild.tagName === 'UL' || firstChild.tagName === 'OL')) {\n    return;\n  }\n\n  const parentNode = target.parentNode; // @ts-ignore internal field\n\n  if (!parentNode || parentNode.__lexicalListType !== 'check') {\n    return;\n  }\n\n  const pageX = event.pageX;\n  const rect = target.getBoundingClientRect();\n\n  if (target.dir === 'rtl' ? pageX < rect.right && pageX > rect.right - 20 : pageX > rect.left && pageX < rect.left + 20) {\n    callback();\n  }\n}\n\nfunction handleClick(event) {\n  handleCheckItemEvent(event, () => {\n    const domNode = event.target;\n    const editor = findEditor(domNode);\n\n    if (editor != null && editor.isEditable()) {\n      editor.update(() => {\n        if (event.target) {\n          const node = lexical.$getNearestNodeFromDOMNode(domNode);\n\n          if (list.$isListItemNode(node)) {\n            domNode.focus();\n            node.toggleChecked();\n          }\n        }\n      });\n    }\n  });\n}\n\nfunction handlePointerDown(event) {\n  handleCheckItemEvent(event, () => {\n    // Prevents caret moving when clicking on check mark\n    event.preventDefault();\n  });\n}\n\nfunction findEditor(target) {\n  let node = target;\n\n  while (node) {\n    // @ts-ignore internal field\n    if (node.__lexicalEditor) {\n      // @ts-ignore internal field\n      return node.__lexicalEditor;\n    }\n\n    node = node.parentNode;\n  }\n\n  return null;\n}\n\nfunction getActiveCheckListItem() {\n  const activeElement = document.activeElement;\n  return activeElement != null && activeElement.tagName === 'LI' && activeElement.parentNode != null && // @ts-ignore internal field\n  activeElement.parentNode.__lexicalListType === 'check' ? activeElement : null;\n}\n\nfunction findCheckListItemSibling(node, backward) {\n  let sibling = backward ? node.getPreviousSibling() : node.getNextSibling();\n  let parent = node; // Going up in a tree to get non-null sibling\n\n  while (sibling == null && list.$isListItemNode(parent)) {\n    // Get li -> parent ul/ol -> parent li\n    parent = parent.getParentOrThrow().getParent();\n\n    if (parent != null) {\n      sibling = backward ? parent.getPreviousSibling() : parent.getNextSibling();\n    }\n  } // Going down in a tree to get first non-nested list item\n\n\n  while (list.$isListItemNode(sibling)) {\n    const firstChild = backward ? sibling.getLastChild() : sibling.getFirstChild();\n\n    if (!list.$isListNode(firstChild)) {\n      return sibling;\n    }\n\n    sibling = backward ? firstChild.getLastChild() : firstChild.getFirstChild();\n  }\n\n  return null;\n}\n\nfunction handleArrownUpOrDown(event, editor, backward) {\n  const activeItem = getActiveCheckListItem();\n\n  if (activeItem != null) {\n    editor.update(() => {\n      const listItem = lexical.$getNearestNodeFromDOMNode(activeItem);\n\n      if (!list.$isListItemNode(listItem)) {\n        return;\n      }\n\n      const nextListItem = findCheckListItemSibling(listItem, backward);\n\n      if (nextListItem != null) {\n        nextListItem.selectStart();\n        const dom = editor.getElementByKey(nextListItem.__key);\n\n        if (dom != null) {\n          event.preventDefault();\n          setTimeout(() => {\n            dom.focus();\n          }, 0);\n        }\n      }\n    });\n  }\n\n  return false;\n}\n\nexports.CheckListPlugin = CheckListPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalCheckListPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalCheckListPlugin.js":
/*!***************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalCheckListPlugin.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalCheckListPlugin =  true ? __webpack_require__(/*! ./LexicalCheckListPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalCheckListPlugin.dev.js\") : 0\nmodule.exports = LexicalCheckListPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENoZWNrTGlzdFBsdWdpbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLCtCQUErQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsMEdBQWlDLElBQUksQ0FBMkM7QUFDaEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ2hlY2tMaXN0UGx1Z2luLmpzPzE0NTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxDaGVja0xpc3RQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbENoZWNrTGlzdFBsdWdpbi5kZXYuanMnKSA6IHJlcXVpcmUoJy4vTGV4aWNhbENoZWNrTGlzdFBsdWdpbi5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbENoZWNrTGlzdFBsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalCheckListPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalClearEditorPlugin.dev.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalClearEditorPlugin.dev.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst useLayoutEffectImpl = CAN_USE_DOM ? react.useLayoutEffect : react.useEffect;\nvar useLayoutEffect = useLayoutEffectImpl;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction ClearEditorPlugin({\n  onClear\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  useLayoutEffect(() => {\n    return editor.registerCommand(lexical.CLEAR_EDITOR_COMMAND, payload => {\n      editor.update(() => {\n        if (onClear == null) {\n          const root = lexical.$getRoot();\n          const selection = lexical.$getSelection();\n          const paragraph = lexical.$createParagraphNode();\n          root.clear();\n          root.append(paragraph);\n\n          if (selection !== null) {\n            paragraph.select();\n          }\n        } else {\n          onClear();\n        }\n      });\n      return true;\n    }, lexical.COMMAND_PRIORITY_EDITOR);\n  }, [editor, onClear]);\n  return null;\n}\n\nexports.ClearEditorPlugin = ClearEditorPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENsZWFyRWRpdG9yUGx1Z2luLmRldi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyw0R0FBdUM7QUFDNUUsY0FBYyxtQkFBTyxDQUFDLHdEQUFTO0FBQy9CLFlBQVksbUJBQU8sQ0FBQyx3R0FBTzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxDbGVhckVkaXRvclBsdWdpbi5kZXYuanM/ZDRjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIExleGljYWxDb21wb3NlckNvbnRleHQgPSByZXF1aXJlKCdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXJDb250ZXh0Jyk7XG52YXIgbGV4aWNhbCA9IHJlcXVpcmUoJ2xleGljYWwnKTtcbnZhciByZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbmNvbnN0IENBTl9VU0VfRE9NID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuY29uc3QgdXNlTGF5b3V0RWZmZWN0SW1wbCA9IENBTl9VU0VfRE9NID8gcmVhY3QudXNlTGF5b3V0RWZmZWN0IDogcmVhY3QudXNlRWZmZWN0O1xudmFyIHVzZUxheW91dEVmZmVjdCA9IHVzZUxheW91dEVmZmVjdEltcGw7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbmZ1bmN0aW9uIENsZWFyRWRpdG9yUGx1Z2luKHtcbiAgb25DbGVhclxufSkge1xuICBjb25zdCBbZWRpdG9yXSA9IExleGljYWxDb21wb3NlckNvbnRleHQudXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCgpO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiBlZGl0b3IucmVnaXN0ZXJDb21tYW5kKGxleGljYWwuQ0xFQVJfRURJVE9SX0NPTU1BTkQsIHBheWxvYWQgPT4ge1xuICAgICAgZWRpdG9yLnVwZGF0ZSgoKSA9PiB7XG4gICAgICAgIGlmIChvbkNsZWFyID09IG51bGwpIHtcbiAgICAgICAgICBjb25zdCByb290ID0gbGV4aWNhbC4kZ2V0Um9vdCgpO1xuICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGxleGljYWwuJGdldFNlbGVjdGlvbigpO1xuICAgICAgICAgIGNvbnN0IHBhcmFncmFwaCA9IGxleGljYWwuJGNyZWF0ZVBhcmFncmFwaE5vZGUoKTtcbiAgICAgICAgICByb290LmNsZWFyKCk7XG4gICAgICAgICAgcm9vdC5hcHBlbmQocGFyYWdyYXBoKTtcblxuICAgICAgICAgIGlmIChzZWxlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHBhcmFncmFwaC5zZWxlY3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25DbGVhcigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sIGxleGljYWwuQ09NTUFORF9QUklPUklUWV9FRElUT1IpO1xuICB9LCBbZWRpdG9yLCBvbkNsZWFyXSk7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnRzLkNsZWFyRWRpdG9yUGx1Z2luID0gQ2xlYXJFZGl0b3JQbHVnaW47XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalClearEditorPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalClearEditorPlugin.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalClearEditorPlugin.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalClearEditorPlugin =  true ? __webpack_require__(/*! ./LexicalClearEditorPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalClearEditorPlugin.dev.js\") : 0\nmodule.exports = LexicalClearEditorPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENsZWFyRWRpdG9yUGx1Z2luLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osaUNBQWlDLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyw4R0FBbUMsSUFBSSxDQUE2QztBQUN0SyIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxDbGVhckVkaXRvclBsdWdpbi5qcz81YTA0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsQ2xlYXJFZGl0b3JQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbENsZWFyRWRpdG9yUGx1Z2luLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsQ2xlYXJFZGl0b3JQbHVnaW4ucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxDbGVhckVkaXRvclBsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalClearEditorPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalCollaborationContext.dev.js":
/*!************************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalCollaborationContext.dev.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst entries = [['Cat', 'rgb(125, 50, 0)'], ['Dog', 'rgb(100, 0, 0)'], ['Rabbit', 'rgb(150, 0, 0)'], ['Frog', 'rgb(200, 0, 0)'], ['Fox', 'rgb(200, 75, 0)'], ['Hedgehog', 'rgb(0, 75, 0)'], ['Pigeon', 'rgb(0, 125, 0)'], ['Squirrel', 'rgb(75, 100, 0)'], ['Bear', 'rgb(125, 100, 0)'], ['Tiger', 'rgb(0, 0, 150)'], ['Leopard', 'rgb(0, 0, 200)'], ['Zebra', 'rgb(0, 0, 250)'], ['Wolf', 'rgb(0, 100, 150)'], ['Owl', 'rgb(0, 100, 100)'], ['Gull', 'rgb(100, 0, 100)'], ['Squid', 'rgb(150, 0, 150)']];\nconst randomEntry = entries[Math.floor(Math.random() * entries.length)];\nconst CollaborationContext = /*#__PURE__*/react.createContext({\n  clientID: 0,\n  color: randomEntry[1],\n  isCollabActive: false,\n  name: randomEntry[0],\n  yjsDocMap: new Map()\n});\nfunction useCollaborationContext(username, color) {\n  const collabContext = react.useContext(CollaborationContext);\n\n  if (username != null) {\n    collabContext.name = username;\n  }\n\n  if (color != null) {\n    collabContext.color = color;\n  }\n\n  return collabContext;\n}\n\nexports.CollaborationContext = CollaborationContext;\nexports.useCollaborationContext = useCollaborationContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbGxhYm9yYXRpb25Db250ZXh0LmRldi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsd0dBQU87O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUIsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbGxhYm9yYXRpb25Db250ZXh0LmRldi5qcz80NzBmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5jb25zdCBlbnRyaWVzID0gW1snQ2F0JywgJ3JnYigxMjUsIDUwLCAwKSddLCBbJ0RvZycsICdyZ2IoMTAwLCAwLCAwKSddLCBbJ1JhYmJpdCcsICdyZ2IoMTUwLCAwLCAwKSddLCBbJ0Zyb2cnLCAncmdiKDIwMCwgMCwgMCknXSwgWydGb3gnLCAncmdiKDIwMCwgNzUsIDApJ10sIFsnSGVkZ2Vob2cnLCAncmdiKDAsIDc1LCAwKSddLCBbJ1BpZ2VvbicsICdyZ2IoMCwgMTI1LCAwKSddLCBbJ1NxdWlycmVsJywgJ3JnYig3NSwgMTAwLCAwKSddLCBbJ0JlYXInLCAncmdiKDEyNSwgMTAwLCAwKSddLCBbJ1RpZ2VyJywgJ3JnYigwLCAwLCAxNTApJ10sIFsnTGVvcGFyZCcsICdyZ2IoMCwgMCwgMjAwKSddLCBbJ1plYnJhJywgJ3JnYigwLCAwLCAyNTApJ10sIFsnV29sZicsICdyZ2IoMCwgMTAwLCAxNTApJ10sIFsnT3dsJywgJ3JnYigwLCAxMDAsIDEwMCknXSwgWydHdWxsJywgJ3JnYigxMDAsIDAsIDEwMCknXSwgWydTcXVpZCcsICdyZ2IoMTUwLCAwLCAxNTApJ11dO1xuY29uc3QgcmFuZG9tRW50cnkgPSBlbnRyaWVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGVudHJpZXMubGVuZ3RoKV07XG5jb25zdCBDb2xsYWJvcmF0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgY2xpZW50SUQ6IDAsXG4gIGNvbG9yOiByYW5kb21FbnRyeVsxXSxcbiAgaXNDb2xsYWJBY3RpdmU6IGZhbHNlLFxuICBuYW1lOiByYW5kb21FbnRyeVswXSxcbiAgeWpzRG9jTWFwOiBuZXcgTWFwKClcbn0pO1xuZnVuY3Rpb24gdXNlQ29sbGFib3JhdGlvbkNvbnRleHQodXNlcm5hbWUsIGNvbG9yKSB7XG4gIGNvbnN0IGNvbGxhYkNvbnRleHQgPSByZWFjdC51c2VDb250ZXh0KENvbGxhYm9yYXRpb25Db250ZXh0KTtcblxuICBpZiAodXNlcm5hbWUgIT0gbnVsbCkge1xuICAgIGNvbGxhYkNvbnRleHQubmFtZSA9IHVzZXJuYW1lO1xuICB9XG5cbiAgaWYgKGNvbG9yICE9IG51bGwpIHtcbiAgICBjb2xsYWJDb250ZXh0LmNvbG9yID0gY29sb3I7XG4gIH1cblxuICByZXR1cm4gY29sbGFiQ29udGV4dDtcbn1cblxuZXhwb3J0cy5Db2xsYWJvcmF0aW9uQ29udGV4dCA9IENvbGxhYm9yYXRpb25Db250ZXh0O1xuZXhwb3J0cy51c2VDb2xsYWJvcmF0aW9uQ29udGV4dCA9IHVzZUNvbGxhYm9yYXRpb25Db250ZXh0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalCollaborationContext.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalCollaborationContext.js":
/*!********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalCollaborationContext.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalCollaborationContext =  true ? __webpack_require__(/*! ./LexicalCollaborationContext.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalCollaborationContext.dev.js\") : 0\nmodule.exports = LexicalCollaborationContext;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbGxhYm9yYXRpb25Db250ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osb0NBQW9DLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyxvSEFBc0MsSUFBSSxDQUFnRDtBQUMvSyIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb2xsYWJvcmF0aW9uQ29udGV4dC5qcz9jMWViIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsQ29sbGFib3JhdGlvbkNvbnRleHQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbENvbGxhYm9yYXRpb25Db250ZXh0LmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsQ29sbGFib3JhdGlvbkNvbnRleHQucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxDb2xsYWJvcmF0aW9uQ29udGV4dDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalCollaborationContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalComposer.dev.js":
/*!************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalComposer.dev.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst useLayoutEffectImpl = CAN_USE_DOM ? React.useLayoutEffect : React.useEffect;\nvar useLayoutEffect = useLayoutEffectImpl;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst HISTORY_MERGE_OPTIONS = {\n  tag: 'history-merge'\n};\nfunction LexicalComposer({\n  initialConfig,\n  children\n}) {\n  const composerContext = React.useMemo(() => {\n    const {\n      theme,\n      namespace,\n      editor__DEPRECATED: initialEditor,\n      nodes,\n      onError,\n      editorState: initialEditorState\n    } = initialConfig;\n    const context = LexicalComposerContext.createLexicalComposerContext(null, theme);\n    let editor = initialEditor || null;\n\n    if (editor === null) {\n      const newEditor = lexical.createEditor({\n        editable: false,\n        namespace,\n        nodes,\n        onError: error => onError(error, newEditor),\n        theme\n      });\n      initializeEditor(newEditor, initialEditorState);\n      editor = newEditor;\n    }\n\n    return [editor, context];\n  }, // We only do this for init\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  useLayoutEffect(() => {\n    const isEditable = initialConfig.editable;\n    const [editor] = composerContext;\n    editor.setEditable(isEditable !== undefined ? isEditable : true); // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/React.createElement(LexicalComposerContext.LexicalComposerContext.Provider, {\n    value: composerContext\n  }, children);\n}\n\nfunction initializeEditor(editor, initialEditorState) {\n  if (initialEditorState === null) {\n    return;\n  } else if (initialEditorState === undefined) {\n    editor.update(() => {\n      const root = lexical.$getRoot();\n\n      if (root.isEmpty()) {\n        const paragraph = lexical.$createParagraphNode();\n        root.append(paragraph);\n        const activeElement = CAN_USE_DOM ? document.activeElement : null;\n\n        if (lexical.$getSelection() !== null || activeElement !== null && activeElement === editor.getRootElement()) {\n          paragraph.select();\n        }\n      }\n    }, HISTORY_MERGE_OPTIONS);\n  } else if (initialEditorState !== null) {\n    switch (typeof initialEditorState) {\n      case 'string':\n        {\n          const parsedEditorState = editor.parseEditorState(initialEditorState);\n          editor.setEditorState(parsedEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n\n      case 'object':\n        {\n          editor.setEditorState(initialEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n\n      case 'function':\n        {\n          editor.update(() => {\n            const root = lexical.$getRoot();\n\n            if (root.isEmpty()) {\n              initialEditorState(editor);\n            }\n          }, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n    }\n  }\n}\n\nexports.LexicalComposer = LexicalComposer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyLmRldi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyw0R0FBdUM7QUFDNUUsY0FBYyxtQkFBTyxDQUFDLHdEQUFTO0FBQy9CLFlBQVksbUJBQU8sQ0FBQyx3R0FBTzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFO0FBQ3RFO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyLmRldi5qcz84OTI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTGV4aWNhbENvbXBvc2VyQ29udGV4dCA9IHJlcXVpcmUoJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnKTtcbnZhciBsZXhpY2FsID0gcmVxdWlyZSgnbGV4aWNhbCcpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuY29uc3QgQ0FOX1VTRV9ET00gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5jb25zdCB1c2VMYXlvdXRFZmZlY3RJbXBsID0gQ0FOX1VTRV9ET00gPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG52YXIgdXNlTGF5b3V0RWZmZWN0ID0gdXNlTGF5b3V0RWZmZWN0SW1wbDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuY29uc3QgSElTVE9SWV9NRVJHRV9PUFRJT05TID0ge1xuICB0YWc6ICdoaXN0b3J5LW1lcmdlJ1xufTtcbmZ1bmN0aW9uIExleGljYWxDb21wb3Nlcih7XG4gIGluaXRpYWxDb25maWcsXG4gIGNoaWxkcmVuXG59KSB7XG4gIGNvbnN0IGNvbXBvc2VyQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lLFxuICAgICAgbmFtZXNwYWNlLFxuICAgICAgZWRpdG9yX19ERVBSRUNBVEVEOiBpbml0aWFsRWRpdG9yLFxuICAgICAgbm9kZXMsXG4gICAgICBvbkVycm9yLFxuICAgICAgZWRpdG9yU3RhdGU6IGluaXRpYWxFZGl0b3JTdGF0ZVxuICAgIH0gPSBpbml0aWFsQ29uZmlnO1xuICAgIGNvbnN0IGNvbnRleHQgPSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0LmNyZWF0ZUxleGljYWxDb21wb3NlckNvbnRleHQobnVsbCwgdGhlbWUpO1xuICAgIGxldCBlZGl0b3IgPSBpbml0aWFsRWRpdG9yIHx8IG51bGw7XG5cbiAgICBpZiAoZWRpdG9yID09PSBudWxsKSB7XG4gICAgICBjb25zdCBuZXdFZGl0b3IgPSBsZXhpY2FsLmNyZWF0ZUVkaXRvcih7XG4gICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBub2RlcyxcbiAgICAgICAgb25FcnJvcjogZXJyb3IgPT4gb25FcnJvcihlcnJvciwgbmV3RWRpdG9yKSxcbiAgICAgICAgdGhlbWVcbiAgICAgIH0pO1xuICAgICAgaW5pdGlhbGl6ZUVkaXRvcihuZXdFZGl0b3IsIGluaXRpYWxFZGl0b3JTdGF0ZSk7XG4gICAgICBlZGl0b3IgPSBuZXdFZGl0b3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtlZGl0b3IsIGNvbnRleHRdO1xuICB9LCAvLyBXZSBvbmx5IGRvIHRoaXMgZm9yIGluaXRcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICBbXSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaXNFZGl0YWJsZSA9IGluaXRpYWxDb25maWcuZWRpdGFibGU7XG4gICAgY29uc3QgW2VkaXRvcl0gPSBjb21wb3NlckNvbnRleHQ7XG4gICAgZWRpdG9yLnNldEVkaXRhYmxlKGlzRWRpdGFibGUgIT09IHVuZGVmaW5lZCA/IGlzRWRpdGFibGUgOiB0cnVlKTsgLy8gV2Ugb25seSBkbyB0aGlzIGZvciBpbml0XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMZXhpY2FsQ29tcG9zZXJDb250ZXh0LkxleGljYWxDb21wb3NlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29tcG9zZXJDb250ZXh0XG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZUVkaXRvcihlZGl0b3IsIGluaXRpYWxFZGl0b3JTdGF0ZSkge1xuICBpZiAoaW5pdGlhbEVkaXRvclN0YXRlID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKGluaXRpYWxFZGl0b3JTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZWRpdG9yLnVwZGF0ZSgoKSA9PiB7XG4gICAgICBjb25zdCByb290ID0gbGV4aWNhbC4kZ2V0Um9vdCgpO1xuXG4gICAgICBpZiAocm9vdC5pc0VtcHR5KCkpIHtcbiAgICAgICAgY29uc3QgcGFyYWdyYXBoID0gbGV4aWNhbC4kY3JlYXRlUGFyYWdyYXBoTm9kZSgpO1xuICAgICAgICByb290LmFwcGVuZChwYXJhZ3JhcGgpO1xuICAgICAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gQ0FOX1VTRV9ET00gPyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IDogbnVsbDtcblxuICAgICAgICBpZiAobGV4aWNhbC4kZ2V0U2VsZWN0aW9uKCkgIT09IG51bGwgfHwgYWN0aXZlRWxlbWVudCAhPT0gbnVsbCAmJiBhY3RpdmVFbGVtZW50ID09PSBlZGl0b3IuZ2V0Um9vdEVsZW1lbnQoKSkge1xuICAgICAgICAgIHBhcmFncmFwaC5zZWxlY3QoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIEhJU1RPUllfTUVSR0VfT1BUSU9OUyk7XG4gIH0gZWxzZSBpZiAoaW5pdGlhbEVkaXRvclN0YXRlICE9PSBudWxsKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgaW5pdGlhbEVkaXRvclN0YXRlKSB7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgcGFyc2VkRWRpdG9yU3RhdGUgPSBlZGl0b3IucGFyc2VFZGl0b3JTdGF0ZShpbml0aWFsRWRpdG9yU3RhdGUpO1xuICAgICAgICAgIGVkaXRvci5zZXRFZGl0b3JTdGF0ZShwYXJzZWRFZGl0b3JTdGF0ZSwgSElTVE9SWV9NRVJHRV9PUFRJT05TKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgZWRpdG9yLnNldEVkaXRvclN0YXRlKGluaXRpYWxFZGl0b3JTdGF0ZSwgSElTVE9SWV9NRVJHRV9PUFRJT05TKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgIHtcbiAgICAgICAgICBlZGl0b3IudXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJvb3QgPSBsZXhpY2FsLiRnZXRSb290KCk7XG5cbiAgICAgICAgICAgIGlmIChyb290LmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICBpbml0aWFsRWRpdG9yU3RhdGUoZWRpdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBISVNUT1JZX01FUkdFX09QVElPTlMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuTGV4aWNhbENvbXBvc2VyID0gTGV4aWNhbENvbXBvc2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalComposer.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalComposer.js":
/*!********************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalComposer.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalComposer =  true ? __webpack_require__(/*! ./LexicalComposer.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalComposer.dev.js\") : 0\nmodule.exports = LexicalComposer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osd0JBQXdCLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyw0RkFBMEIsSUFBSSxDQUFvQztBQUMzSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3Nlci5qcz8xMjVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsQ29tcG9zZXIgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbENvbXBvc2VyLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsQ29tcG9zZXIucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxDb21wb3NlcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalComposer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalComposerContext.dev.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalComposerContext.dev.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst LexicalComposerContext = /*#__PURE__*/react.createContext(null);\nfunction createLexicalComposerContext(parent, theme) {\n  let parentContext = null;\n\n  if (parent != null) {\n    parentContext = parent[1];\n  }\n\n  function getTheme() {\n    if (theme != null) {\n      return theme;\n    }\n\n    return parentContext != null ? parentContext.getTheme() : null;\n  }\n\n  return {\n    getTheme\n  };\n}\nfunction useLexicalComposerContext() {\n  const composerContext = react.useContext(LexicalComposerContext);\n\n  if (composerContext == null) {\n    {\n      throw Error(`LexicalComposerContext.useLexicalComposerContext: cannot find a LexicalComposerContext`);\n    }\n  }\n\n  return composerContext;\n}\n\nexports.LexicalComposerContext = LexicalComposerContext;\nexports.createLexicalComposerContext = createLexicalComposerContext;\nexports.useLexicalComposerContext = useLexicalComposerContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dC5kZXYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHdHQUFPOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDhCQUE4QjtBQUM5QixvQ0FBb0M7QUFDcEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dC5kZXYuanM/YjhjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuY29uc3QgTGV4aWNhbENvbXBvc2VyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuZnVuY3Rpb24gY3JlYXRlTGV4aWNhbENvbXBvc2VyQ29udGV4dChwYXJlbnQsIHRoZW1lKSB7XG4gIGxldCBwYXJlbnRDb250ZXh0ID0gbnVsbDtcblxuICBpZiAocGFyZW50ICE9IG51bGwpIHtcbiAgICBwYXJlbnRDb250ZXh0ID0gcGFyZW50WzFdO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgaWYgKHRoZW1lICE9IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGVtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyZW50Q29udGV4dCAhPSBudWxsID8gcGFyZW50Q29udGV4dC5nZXRUaGVtZSgpIDogbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0VGhlbWVcbiAgfTtcbn1cbmZ1bmN0aW9uIHVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKSB7XG4gIGNvbnN0IGNvbXBvc2VyQ29udGV4dCA9IHJlYWN0LnVzZUNvbnRleHQoTGV4aWNhbENvbXBvc2VyQ29udGV4dCk7XG5cbiAgaWYgKGNvbXBvc2VyQ29udGV4dCA9PSBudWxsKSB7XG4gICAge1xuICAgICAgdGhyb3cgRXJyb3IoYExleGljYWxDb21wb3NlckNvbnRleHQudXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dDogY2Fubm90IGZpbmQgYSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0YCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbXBvc2VyQ29udGV4dDtcbn1cblxuZXhwb3J0cy5MZXhpY2FsQ29tcG9zZXJDb250ZXh0ID0gTGV4aWNhbENvbXBvc2VyQ29udGV4dDtcbmV4cG9ydHMuY3JlYXRlTGV4aWNhbENvbXBvc2VyQ29udGV4dCA9IGNyZWF0ZUxleGljYWxDb21wb3NlckNvbnRleHQ7XG5leHBvcnRzLnVzZUxleGljYWxDb21wb3NlckNvbnRleHQgPSB1c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalComposerContext.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js":
/*!***************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalComposerContext.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalComposerContext =  true ? __webpack_require__(/*! ./LexicalComposerContext.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.dev.js\") : 0\nmodule.exports = LexicalComposerContext;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLCtCQUErQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsMEdBQWlDLElBQUksQ0FBMkM7QUFDaEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXJDb250ZXh0LmpzPzUxZGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxDb21wb3NlckNvbnRleHQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbENvbXBvc2VyQ29udGV4dC5kZXYuanMnKSA6IHJlcXVpcmUoJy4vTGV4aWNhbENvbXBvc2VyQ29udGV4dC5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbENvbXBvc2VyQ29udGV4dDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalContentEditable.dev.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalContentEditable.dev.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst useLayoutEffectImpl = CAN_USE_DOM ? React.useLayoutEffect : React.useEffect;\nvar useLayoutEffect = useLayoutEffectImpl;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction ContentEditable({\n  ariaActiveDescendant,\n  ariaAutoComplete,\n  ariaControls,\n  ariaDescribedBy,\n  ariaExpanded,\n  ariaLabel,\n  ariaLabelledBy,\n  ariaMultiline,\n  ariaOwns,\n  ariaRequired,\n  autoCapitalize,\n  className,\n  id,\n  role = 'textbox',\n  spellCheck = true,\n  style,\n  tabIndex,\n  'data-testid': testid\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const [isEditable, setEditable] = React.useState(false);\n  const ref = React.useCallback(rootElement => {\n    editor.setRootElement(rootElement);\n  }, [editor]);\n  useLayoutEffect(() => {\n    setEditable(editor.isEditable());\n    return editor.registerEditableListener(currentIsEditable => {\n      setEditable(currentIsEditable);\n    });\n  }, [editor]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-activedescendant\": !isEditable ? undefined : ariaActiveDescendant,\n    \"aria-autocomplete\": !isEditable ? 'none' : ariaAutoComplete,\n    \"aria-controls\": !isEditable ? undefined : ariaControls,\n    \"aria-describedby\": ariaDescribedBy,\n    \"aria-expanded\": !isEditable ? undefined : role === 'combobox' ? !!ariaExpanded : undefined,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-multiline\": ariaMultiline,\n    \"aria-owns\": !isEditable ? undefined : ariaOwns,\n    \"aria-required\": ariaRequired,\n    autoCapitalize: autoCapitalize,\n    className: className,\n    contentEditable: isEditable,\n    \"data-testid\": testid,\n    id: id,\n    ref: ref,\n    role: !isEditable ? undefined : role,\n    spellCheck: spellCheck,\n    style: style,\n    tabIndex: tabIndex\n  });\n}\n\nexports.ContentEditable = ContentEditable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbnRlbnRFZGl0YWJsZS5kZXYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBRWIsNkJBQTZCLG1CQUFPLENBQUMsNEdBQXVDO0FBQzVFLFlBQVksbUJBQU8sQ0FBQyx3R0FBTzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLHVCQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb250ZW50RWRpdGFibGUuZGV2LmpzPzY5MjYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBMZXhpY2FsQ29tcG9zZXJDb250ZXh0ID0gcmVxdWlyZSgnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCcpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuY29uc3QgQ0FOX1VTRV9ET00gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5jb25zdCB1c2VMYXlvdXRFZmZlY3RJbXBsID0gQ0FOX1VTRV9ET00gPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG52YXIgdXNlTGF5b3V0RWZmZWN0ID0gdXNlTGF5b3V0RWZmZWN0SW1wbDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuZnVuY3Rpb24gQ29udGVudEVkaXRhYmxlKHtcbiAgYXJpYUFjdGl2ZURlc2NlbmRhbnQsXG4gIGFyaWFBdXRvQ29tcGxldGUsXG4gIGFyaWFDb250cm9scyxcbiAgYXJpYURlc2NyaWJlZEJ5LFxuICBhcmlhRXhwYW5kZWQsXG4gIGFyaWFMYWJlbCxcbiAgYXJpYUxhYmVsbGVkQnksXG4gIGFyaWFNdWx0aWxpbmUsXG4gIGFyaWFPd25zLFxuICBhcmlhUmVxdWlyZWQsXG4gIGF1dG9DYXBpdGFsaXplLFxuICBjbGFzc05hbWUsXG4gIGlkLFxuICByb2xlID0gJ3RleHRib3gnLFxuICBzcGVsbENoZWNrID0gdHJ1ZSxcbiAgc3R5bGUsXG4gIHRhYkluZGV4LFxuICAnZGF0YS10ZXN0aWQnOiB0ZXN0aWRcbn0pIHtcbiAgY29uc3QgW2VkaXRvcl0gPSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0LnVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgY29uc3QgW2lzRWRpdGFibGUsIHNldEVkaXRhYmxlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlQ2FsbGJhY2socm9vdEVsZW1lbnQgPT4ge1xuICAgIGVkaXRvci5zZXRSb290RWxlbWVudChyb290RWxlbWVudCk7XG4gIH0sIFtlZGl0b3JdKTtcbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBzZXRFZGl0YWJsZShlZGl0b3IuaXNFZGl0YWJsZSgpKTtcbiAgICByZXR1cm4gZWRpdG9yLnJlZ2lzdGVyRWRpdGFibGVMaXN0ZW5lcihjdXJyZW50SXNFZGl0YWJsZSA9PiB7XG4gICAgICBzZXRFZGl0YWJsZShjdXJyZW50SXNFZGl0YWJsZSk7XG4gICAgfSk7XG4gIH0sIFtlZGl0b3JdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiOiAhaXNFZGl0YWJsZSA/IHVuZGVmaW5lZCA6IGFyaWFBY3RpdmVEZXNjZW5kYW50LFxuICAgIFwiYXJpYS1hdXRvY29tcGxldGVcIjogIWlzRWRpdGFibGUgPyAnbm9uZScgOiBhcmlhQXV0b0NvbXBsZXRlLFxuICAgIFwiYXJpYS1jb250cm9sc1wiOiAhaXNFZGl0YWJsZSA/IHVuZGVmaW5lZCA6IGFyaWFDb250cm9scyxcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogYXJpYURlc2NyaWJlZEJ5LFxuICAgIFwiYXJpYS1leHBhbmRlZFwiOiAhaXNFZGl0YWJsZSA/IHVuZGVmaW5lZCA6IHJvbGUgPT09ICdjb21ib2JveCcgPyAhIWFyaWFFeHBhbmRlZCA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGFyaWFMYWJlbGxlZEJ5LFxuICAgIFwiYXJpYS1tdWx0aWxpbmVcIjogYXJpYU11bHRpbGluZSxcbiAgICBcImFyaWEtb3duc1wiOiAhaXNFZGl0YWJsZSA/IHVuZGVmaW5lZCA6IGFyaWFPd25zLFxuICAgIFwiYXJpYS1yZXF1aXJlZFwiOiBhcmlhUmVxdWlyZWQsXG4gICAgYXV0b0NhcGl0YWxpemU6IGF1dG9DYXBpdGFsaXplLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIGNvbnRlbnRFZGl0YWJsZTogaXNFZGl0YWJsZSxcbiAgICBcImRhdGEtdGVzdGlkXCI6IHRlc3RpZCxcbiAgICBpZDogaWQsXG4gICAgcmVmOiByZWYsXG4gICAgcm9sZTogIWlzRWRpdGFibGUgPyB1bmRlZmluZWQgOiByb2xlLFxuICAgIHNwZWxsQ2hlY2s6IHNwZWxsQ2hlY2ssXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHRhYkluZGV4OiB0YWJJbmRleFxuICB9KTtcbn1cblxuZXhwb3J0cy5Db250ZW50RWRpdGFibGUgPSBDb250ZW50RWRpdGFibGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalContentEditable.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalContentEditable.js":
/*!***************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalContentEditable.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalContentEditable =  true ? __webpack_require__(/*! ./LexicalContentEditable.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalContentEditable.dev.js\") : 0\nmodule.exports = LexicalContentEditable;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbnRlbnRFZGl0YWJsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLCtCQUErQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsMEdBQWlDLElBQUksQ0FBMkM7QUFDaEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29udGVudEVkaXRhYmxlLmpzP2JiZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxDb250ZW50RWRpdGFibGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbENvbnRlbnRFZGl0YWJsZS5kZXYuanMnKSA6IHJlcXVpcmUoJy4vTGV4aWNhbENvbnRlbnRFZGl0YWJsZS5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbENvbnRlbnRFZGl0YWJsZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalContentEditable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalDecoratorBlockNode.dev.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalDecoratorBlockNode.dev.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass DecoratorBlockNode extends lexical.DecoratorNode {\n  constructor(format, key) {\n    super(key);\n    this.__format = format || '';\n  }\n\n  exportJSON() {\n    return {\n      format: this.__format || '',\n      type: 'decorator-block',\n      version: 1\n    };\n  }\n\n  createDOM() {\n    return document.createElement('div');\n  }\n\n  updateDOM() {\n    return false;\n  }\n\n  setFormat(format) {\n    const self = this.getWritable();\n    self.__format = format;\n  }\n\n}\nfunction $isDecoratorBlockNode(node) {\n  return node instanceof DecoratorBlockNode;\n}\n\nexports.$isDecoratorBlockNode = $isDecoratorBlockNode;\nexports.DecoratorBlockNode = DecoratorBlockNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbERlY29yYXRvckJsb2NrTm9kZS5kZXYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBRWIsY0FBYyxtQkFBTyxDQUFDLHdEQUFTOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0IsMEJBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbERlY29yYXRvckJsb2NrTm9kZS5kZXYuanM/MzgyMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGxleGljYWwgPSByZXF1aXJlKCdsZXhpY2FsJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbmNsYXNzIERlY29yYXRvckJsb2NrTm9kZSBleHRlbmRzIGxleGljYWwuRGVjb3JhdG9yTm9kZSB7XG4gIGNvbnN0cnVjdG9yKGZvcm1hdCwga2V5KSB7XG4gICAgc3VwZXIoa2V5KTtcbiAgICB0aGlzLl9fZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICB9XG5cbiAgZXhwb3J0SlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybWF0OiB0aGlzLl9fZm9ybWF0IHx8ICcnLFxuICAgICAgdHlwZTogJ2RlY29yYXRvci1ibG9jaycsXG4gICAgICB2ZXJzaW9uOiAxXG4gICAgfTtcbiAgfVxuXG4gIGNyZWF0ZURPTSgpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIH1cblxuICB1cGRhdGVET00oKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc2V0Rm9ybWF0KGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzLmdldFdyaXRhYmxlKCk7XG4gICAgc2VsZi5fX2Zvcm1hdCA9IGZvcm1hdDtcbiAgfVxuXG59XG5mdW5jdGlvbiAkaXNEZWNvcmF0b3JCbG9ja05vZGUobm9kZSkge1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIERlY29yYXRvckJsb2NrTm9kZTtcbn1cblxuZXhwb3J0cy4kaXNEZWNvcmF0b3JCbG9ja05vZGUgPSAkaXNEZWNvcmF0b3JCbG9ja05vZGU7XG5leHBvcnRzLkRlY29yYXRvckJsb2NrTm9kZSA9IERlY29yYXRvckJsb2NrTm9kZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalDecoratorBlockNode.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalDecoratorBlockNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalDecoratorBlockNode.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalDecoratorBlockNode =  true ? __webpack_require__(/*! ./LexicalDecoratorBlockNode.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalDecoratorBlockNode.dev.js\") : 0\nmodule.exports = LexicalDecoratorBlockNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbERlY29yYXRvckJsb2NrTm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLGtDQUFrQyxLQUFzQyxHQUFHLG1CQUFPLENBQUMsZ0hBQW9DLElBQUksQ0FBOEM7QUFDeksiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsRGVjb3JhdG9yQmxvY2tOb2RlLmpzPzUyY2UiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxEZWNvcmF0b3JCbG9ja05vZGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbERlY29yYXRvckJsb2NrTm9kZS5kZXYuanMnKSA6IHJlcXVpcmUoJy4vTGV4aWNhbERlY29yYXRvckJsb2NrTm9kZS5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbERlY29yYXRvckJsb2NrTm9kZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalDecoratorBlockNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalErrorBoundary.dev.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalErrorBoundary.dev.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\n\nvar changedArray = function changedArray(a, b) {\n  if (a === void 0) {\n    a = [];\n  }\n\n  if (b === void 0) {\n    b = [];\n  }\n\n  return a.length !== b.length || a.some(function (item, index) {\n    return !Object.is(item, b[index]);\n  });\n};\n\nvar initialState = {\n  error: null\n};\n\nvar ErrorBoundary = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ErrorBoundary, _React$Component);\n\n  function ErrorBoundary() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n    _this.state = initialState;\n\n    _this.resetErrorBoundary = function () {\n      var _this$props;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);\n\n      _this.reset();\n    };\n\n    return _this;\n  }\n\n  ErrorBoundary.getDerivedStateFromError = function getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  };\n\n  var _proto = ErrorBoundary.prototype;\n\n  _proto.reset = function reset() {\n    this.setState(initialState);\n  };\n\n  _proto.componentDidCatch = function componentDidCatch(error, info) {\n    var _this$props$onError, _this$props2;\n\n    (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var error = this.state.error;\n    var resetKeys = this.props.resetKeys; // There's an edge case where if the thing that triggered the error\n    // happens to *also* be in the resetKeys array, we'd end up resetting\n    // the error boundary immediately. This would likely trigger a second\n    // error to be thrown.\n    // So we make sure that we don't check the resetKeys on the first call\n    // of cDU after the error is set\n\n    if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {\n      var _this$props$onResetKe, _this$props3;\n\n      (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);\n      this.reset();\n    }\n  };\n\n  _proto.render = function render() {\n    var error = this.state.error;\n    var _this$props4 = this.props,\n        fallbackRender = _this$props4.fallbackRender,\n        FallbackComponent = _this$props4.FallbackComponent,\n        fallback = _this$props4.fallback;\n\n    if (error !== null) {\n      var _props = {\n        error: error,\n        resetErrorBoundary: this.resetErrorBoundary\n      };\n\n      if ( /*#__PURE__*/React.isValidElement(fallback)) {\n        return fallback;\n      } else if (typeof fallbackRender === 'function') {\n        return fallbackRender(_props);\n      } else if (FallbackComponent) {\n        return /*#__PURE__*/React.createElement(FallbackComponent, _props);\n      } else {\n        throw new Error('react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop');\n      }\n    }\n\n    return this.props.children;\n  };\n\n  return ErrorBoundary;\n}(React.Component);\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction LexicalErrorBoundary({\n  children,\n  onError\n}) {\n  return /*#__PURE__*/React.createElement(ErrorBoundary, {\n    fallback: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        border: '1px solid #f00',\n        color: '#f00',\n        padding: '8px'\n      }\n    }, \"An error was thrown.\"),\n    onError: onError\n  }, children);\n}\n\nmodule.exports = LexicalErrorBoundary;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEVycm9yQm91bmRhcnkuZGV2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViLFlBQVksbUJBQU8sQ0FBQyx3R0FBTzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlFQUF5RSxhQUFhO0FBQ3RGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDZFQUE2RSxlQUFlO0FBQzVGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxFcnJvckJvdW5kYXJ5LmRldi5qcz9hZWI5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxudmFyIGNoYW5nZWRBcnJheSA9IGZ1bmN0aW9uIGNoYW5nZWRBcnJheShhLCBiKSB7XG4gIGlmIChhID09PSB2b2lkIDApIHtcbiAgICBhID0gW107XG4gIH1cblxuICBpZiAoYiA9PT0gdm9pZCAwKSB7XG4gICAgYiA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIGEubGVuZ3RoICE9PSBiLmxlbmd0aCB8fCBhLnNvbWUoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgcmV0dXJuICFPYmplY3QuaXMoaXRlbSwgYltpbmRleF0pO1xuICB9KTtcbn07XG5cbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gIGVycm9yOiBudWxsXG59O1xuXG52YXIgRXJyb3JCb3VuZGFyeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShFcnJvckJvdW5kYXJ5LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBFcnJvckJvdW5kYXJ5KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBfYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIF9hcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoX2FyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlO1xuXG4gICAgX3RoaXMucmVzZXRFcnJvckJvdW5kYXJ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzO1xuXG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5wcm9wcy5vblJlc2V0ID09IG51bGwgPyB2b2lkIDAgOiAoX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcykub25SZXNldC5hcHBseShfdGhpcyRwcm9wcywgYXJncyk7XG5cbiAgICAgIF90aGlzLnJlc2V0KCk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIEVycm9yQm91bmRhcnkuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBlcnJvclxuICAgIH07XG4gIH07XG5cbiAgdmFyIF9wcm90byA9IEVycm9yQm91bmRhcnkucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoaW5pdGlhbFN0YXRlKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkQ2F0Y2ggPSBmdW5jdGlvbiBjb21wb25lbnREaWRDYXRjaChlcnJvciwgaW5mbykge1xuICAgIHZhciBfdGhpcyRwcm9wcyRvbkVycm9yLCBfdGhpcyRwcm9wczI7XG5cbiAgICAoX3RoaXMkcHJvcHMkb25FcnJvciA9IChfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzKS5vbkVycm9yKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkcHJvcHMkb25FcnJvci5jYWxsKF90aGlzJHByb3BzMiwgZXJyb3IsIGluZm8pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgZXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgIHZhciByZXNldEtleXMgPSB0aGlzLnByb3BzLnJlc2V0S2V5czsgLy8gVGhlcmUncyBhbiBlZGdlIGNhc2Ugd2hlcmUgaWYgdGhlIHRoaW5nIHRoYXQgdHJpZ2dlcmVkIHRoZSBlcnJvclxuICAgIC8vIGhhcHBlbnMgdG8gKmFsc28qIGJlIGluIHRoZSByZXNldEtleXMgYXJyYXksIHdlJ2QgZW5kIHVwIHJlc2V0dGluZ1xuICAgIC8vIHRoZSBlcnJvciBib3VuZGFyeSBpbW1lZGlhdGVseS4gVGhpcyB3b3VsZCBsaWtlbHkgdHJpZ2dlciBhIHNlY29uZFxuICAgIC8vIGVycm9yIHRvIGJlIHRocm93bi5cbiAgICAvLyBTbyB3ZSBtYWtlIHN1cmUgdGhhdCB3ZSBkb24ndCBjaGVjayB0aGUgcmVzZXRLZXlzIG9uIHRoZSBmaXJzdCBjYWxsXG4gICAgLy8gb2YgY0RVIGFmdGVyIHRoZSBlcnJvciBpcyBzZXRcblxuICAgIGlmIChlcnJvciAhPT0gbnVsbCAmJiBwcmV2U3RhdGUuZXJyb3IgIT09IG51bGwgJiYgY2hhbmdlZEFycmF5KHByZXZQcm9wcy5yZXNldEtleXMsIHJlc2V0S2V5cykpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyRvblJlc2V0S2UsIF90aGlzJHByb3BzMztcblxuICAgICAgKF90aGlzJHByb3BzJG9uUmVzZXRLZSA9IChfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzKS5vblJlc2V0S2V5c0NoYW5nZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHByb3BzJG9uUmVzZXRLZS5jYWxsKF90aGlzJHByb3BzMywgcHJldlByb3BzLnJlc2V0S2V5cywgcmVzZXRLZXlzKTtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgZXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBmYWxsYmFja1JlbmRlciA9IF90aGlzJHByb3BzNC5mYWxsYmFja1JlbmRlcixcbiAgICAgICAgRmFsbGJhY2tDb21wb25lbnQgPSBfdGhpcyRwcm9wczQuRmFsbGJhY2tDb21wb25lbnQsXG4gICAgICAgIGZhbGxiYWNrID0gX3RoaXMkcHJvcHM0LmZhbGxiYWNrO1xuXG4gICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICB2YXIgX3Byb3BzID0ge1xuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIHJlc2V0RXJyb3JCb3VuZGFyeTogdGhpcy5yZXNldEVycm9yQm91bmRhcnlcbiAgICAgIH07XG5cbiAgICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGZhbGxiYWNrKSkge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmYWxsYmFja1JlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2tSZW5kZXIoX3Byb3BzKTtcbiAgICAgIH0gZWxzZSBpZiAoRmFsbGJhY2tDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZhbGxiYWNrQ29tcG9uZW50LCBfcHJvcHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWFjdC1lcnJvci1ib3VuZGFyeSByZXF1aXJlcyBlaXRoZXIgYSBmYWxsYmFjaywgZmFsbGJhY2tSZW5kZXIsIG9yIEZhbGxiYWNrQ29tcG9uZW50IHByb3AnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfTtcblxuICByZXR1cm4gRXJyb3JCb3VuZGFyeTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuZnVuY3Rpb24gTGV4aWNhbEVycm9yQm91bmRhcnkoe1xuICBjaGlsZHJlbixcbiAgb25FcnJvclxufSkge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRXJyb3JCb3VuZGFyeSwge1xuICAgIGZhbGxiYWNrOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBzdHlsZToge1xuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgI2YwMCcsXG4gICAgICAgIGNvbG9yOiAnI2YwMCcsXG4gICAgICAgIHBhZGRpbmc6ICc4cHgnXG4gICAgICB9XG4gICAgfSwgXCJBbiBlcnJvciB3YXMgdGhyb3duLlwiKSxcbiAgICBvbkVycm9yOiBvbkVycm9yXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsRXJyb3JCb3VuZGFyeTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalErrorBoundary.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalErrorBoundary.js":
/*!*************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalErrorBoundary.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalErrorBoundary =  true ? __webpack_require__(/*! ./LexicalErrorBoundary.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalErrorBoundary.dev.js\") : 0\nmodule.exports = LexicalErrorBoundary;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEVycm9yQm91bmRhcnkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWiw2QkFBNkIsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLHNHQUErQixJQUFJLENBQXlDO0FBQzFKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEVycm9yQm91bmRhcnkuanM/Y2YyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgTGV4aWNhbEVycm9yQm91bmRhcnkgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbEVycm9yQm91bmRhcnkuZGV2LmpzJykgOiByZXF1aXJlKCcuL0xleGljYWxFcnJvckJvdW5kYXJ5LnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsRXJyb3JCb3VuZGFyeTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalErrorBoundary.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalHashtagPlugin.dev.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalHashtagPlugin.dev.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar hashtag = __webpack_require__(/*! @lexical/hashtag */ \"(ssr)/./node_modules/@lexical/hashtag/LexicalHashtag.js\");\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar useLexicalTextEntity = __webpack_require__(/*! @lexical/react/useLexicalTextEntity */ \"(ssr)/./node_modules/@lexical/react/useLexicalTextEntity.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getHashtagRegexStringChars() {\n  // Latin accented characters\n  // Excludes 0xd7 from the range\n  // (the multiplication sign, confusable with \"x\").\n  // Also excludes 0xf7, the division sign\n  const latinAccents = '\\xc0-\\xd6' + '\\xd8-\\xf6' + '\\xf8-\\xff' + '\\u0100-\\u024f' + '\\u0253-\\u0254' + '\\u0256-\\u0257' + '\\u0259' + '\\u025b' + '\\u0263' + '\\u0268' + '\\u026f' + '\\u0272' + '\\u0289' + '\\u028b' + '\\u02bb' + '\\u0300-\\u036f' + '\\u1e00-\\u1eff'; // Cyrillic (Russian, Ukrainian, etc.)\n\n  const nonLatinChars = '\\u0400-\\u04ff' + // Cyrillic\n  '\\u0500-\\u0527' + // Cyrillic Supplement\n  '\\u2de0-\\u2dff' + // Cyrillic Extended A\n  '\\ua640-\\ua69f' + // Cyrillic Extended B\n  '\\u0591-\\u05bf' + // Hebrew\n  '\\u05c1-\\u05c2' + '\\u05c4-\\u05c5' + '\\u05c7' + '\\u05d0-\\u05ea' + '\\u05f0-\\u05f4' + '\\ufb12-\\ufb28' + // Hebrew Presentation Forms\n  '\\ufb2a-\\ufb36' + '\\ufb38-\\ufb3c' + '\\ufb3e' + '\\ufb40-\\ufb41' + '\\ufb43-\\ufb44' + '\\ufb46-\\ufb4f' + '\\u0610-\\u061a' + // Arabic\n  '\\u0620-\\u065f' + '\\u066e-\\u06d3' + '\\u06d5-\\u06dc' + '\\u06de-\\u06e8' + '\\u06ea-\\u06ef' + '\\u06fa-\\u06fc' + '\\u06ff' + '\\u0750-\\u077f' + // Arabic Supplement\n  '\\u08a0' + // Arabic Extended A\n  '\\u08a2-\\u08ac' + '\\u08e4-\\u08fe' + '\\ufb50-\\ufbb1' + // Arabic Pres. Forms A\n  '\\ufbd3-\\ufd3d' + '\\ufd50-\\ufd8f' + '\\ufd92-\\ufdc7' + '\\ufdf0-\\ufdfb' + '\\ufe70-\\ufe74' + // Arabic Pres. Forms B\n  '\\ufe76-\\ufefc' + '\\u200c-\\u200c' + // Zero-Width Non-Joiner\n  '\\u0e01-\\u0e3a' + // Thai\n  '\\u0e40-\\u0e4e' + // Hangul (Korean)\n  '\\u1100-\\u11ff' + // Hangul Jamo\n  '\\u3130-\\u3185' + // Hangul Compatibility Jamo\n  '\\uA960-\\uA97F' + // Hangul Jamo Extended-A\n  '\\uAC00-\\uD7AF' + // Hangul Syllables\n  '\\uD7B0-\\uD7FF' + // Hangul Jamo Extended-B\n  '\\uFFA1-\\uFFDC'; // Half-width Hangul\n\n  const charCode = String.fromCharCode;\n  const cjkChars = '\\u30A1-\\u30FA\\u30FC-\\u30FE' + // Katakana (full-width)\n  '\\uFF66-\\uFF9F' + // Katakana (half-width)\n  '\\uFF10-\\uFF19\\uFF21-\\uFF3A' + '\\uFF41-\\uFF5A' + // Latin (full-width)\n  '\\u3041-\\u3096\\u3099-\\u309E' + // Hiragana\n  '\\u3400-\\u4DBF' + // Kanji (CJK Extension A)\n  '\\u4E00-\\u9FFF' + // Kanji (Unified)\n  // Disabled as it breaks the Regex.\n  // charCode(0x20000) + '-' + charCode(0x2A6DF) + // Kanji (CJK Extension B)\n  charCode(0x2a700) + '-' + charCode(0x2b73f) + // Kanji (CJK Extension C)\n  charCode(0x2b740) + '-' + charCode(0x2b81f) + // Kanji (CJK Extension D)\n  charCode(0x2f800) + '-' + charCode(0x2fa1f) + '\\u3003\\u3005\\u303B'; // Kanji (CJK supplement)\n\n  const otherChars = latinAccents + nonLatinChars + cjkChars; // equivalent of \\p{L}\n\n  const unicodeLetters = '\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u0241\\u0250-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EE\\u037A\\u0386' + '\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03CE\\u03D0-\\u03F5\\u03F7-\\u0481' + '\\u048A-\\u04CE\\u04D0-\\u04F9\\u0500-\\u050F\\u0531-\\u0556\\u0559\\u0561-\\u0587' + '\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u063A\\u0640-\\u064A\\u066E-\\u066F' + '\\u0671-\\u06D3\\u06D5\\u06E5-\\u06E6\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710' + '\\u0712-\\u072F\\u074D-\\u076D\\u0780-\\u07A5\\u07B1\\u0904-\\u0939\\u093D\\u0950' + '\\u0958-\\u0961\\u097D\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0' + '\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1' + '\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33' + '\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D' + '\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD' + '\\u0AD0\\u0AE0-\\u0AE1\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30' + '\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83' + '\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F' + '\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0C05-\\u0C0C\\u0C0E-\\u0C10' + '\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C60-\\u0C61\\u0C85-\\u0C8C' + '\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE' + '\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39' + '\\u0D60-\\u0D61\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6' + '\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E46\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88' + '\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7' + '\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6' + '\\u0EDC-\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6A\\u0F88-\\u0F8B\\u1000-\\u1021' + '\\u1023-\\u1027\\u1029-\\u102A\\u1050-\\u1055\\u10A0-\\u10C5\\u10D0-\\u10FA\\u10FC' + '\\u1100-\\u1159\\u115F-\\u11A2\\u11A8-\\u11F9\\u1200-\\u1248\\u124A-\\u124D' + '\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0' + '\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310' + '\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C' + '\\u166F-\\u1676\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711' + '\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7' + '\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974' + '\\u1980-\\u19A9\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1D00-\\u1DBF\\u1E00-\\u1E9B' + '\\u1EA0-\\u1EF9\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D' + '\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC' + '\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC' + '\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u2094\\u2102\\u2107' + '\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D' + '\\u212F-\\u2131\\u2133-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u2C00-\\u2C2E' + '\\u2C30-\\u2C5E\\u2C80-\\u2CE4\\u2D00-\\u2D25\\u2D30-\\u2D65\\u2D6F\\u2D80-\\u2D96' + '\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6' + '\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3006\\u3031-\\u3035' + '\\u303B-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF' + '\\u3105-\\u312C\\u3131-\\u318E\\u31A0-\\u31B7\\u31F0-\\u31FF\\u3400-\\u4DB5' + '\\u4E00-\\u9FBB\\uA000-\\uA48C\\uA800-\\uA801\\uA803-\\uA805\\uA807-\\uA80A' + '\\uA80C-\\uA822\\uAC00-\\uD7A3\\uF900-\\uFA2D\\uFA30-\\uFA6A\\uFA70-\\uFAD9' + '\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C' + '\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F' + '\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A' + '\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7' + '\\uFFDA-\\uFFDC'; // equivalent of \\p{Mn}\\p{Mc}\n\n  const unicodeAccents = '\\u0300-\\u036F\\u0483-\\u0486\\u0591-\\u05B9\\u05BB-\\u05BD\\u05BF' + '\\u05C1-\\u05C2\\u05C4-\\u05C5\\u05C7\\u0610-\\u0615\\u064B-\\u065E\\u0670' + '\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7-\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A' + '\\u07A6-\\u07B0\\u0901-\\u0903\\u093C\\u093E-\\u094D\\u0951-\\u0954\\u0962-\\u0963' + '\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7-\\u09C8\\u09CB-\\u09CD\\u09D7' + '\\u09E2-\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47-\\u0A48\\u0A4B-\\u0A4D' + '\\u0A70-\\u0A71\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD' + '\\u0AE2-\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B43\\u0B47-\\u0B48\\u0B4B-\\u0B4D' + '\\u0B56-\\u0B57\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7' + '\\u0C01-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55-\\u0C56' + '\\u0C82-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5-\\u0CD6' + '\\u0D02-\\u0D03\\u0D3E-\\u0D43\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D82-\\u0D83' + '\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2-\\u0DF3\\u0E31\\u0E34-\\u0E3A' + '\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB-\\u0EBC\\u0EC8-\\u0ECD\\u0F18-\\u0F19' + '\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F3F\\u0F71-\\u0F84\\u0F86-\\u0F87\\u0F90-\\u0F97' + '\\u0F99-\\u0FBC\\u0FC6\\u102C-\\u1032\\u1036-\\u1039\\u1056-\\u1059\\u135F' + '\\u1712-\\u1714\\u1732-\\u1734\\u1752-\\u1753\\u1772-\\u1773\\u17B6-\\u17D3\\u17DD' + '\\u180B-\\u180D\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u19B0-\\u19C0\\u19C8-\\u19C9' + '\\u1A17-\\u1A1B\\u1DC0-\\u1DC3\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20EB\\u302A-\\u302F' + '\\u3099-\\u309A\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uFB1E\\uFE00-\\uFE0F' + '\\uFE20-\\uFE23'; // equivalent of \\p{Dn}\n\n  const unicodeDigits = '\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u0966-\\u096F\\u09E6-\\u09EF' + '\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F' + '\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29' + '\\u1040-\\u1049\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9' + '\\uFF10-\\uFF19'; // An alpha char is a unicode chars including unicode marks or\n  // letter or char in otherChars range\n\n  const alpha = unicodeLetters + unicodeAccents + otherChars; // A numeric character is any with the number digit property, or\n  // underscore. These characters can be included in hashtags, but a hashtag\n  // cannot have only these characters.\n\n  const numeric = unicodeDigits + '_'; // Alphanumeric char is any alpha char or a unicode char with decimal\n  // number property \\p{Nd}\n\n  const alphanumeric = alpha + numeric;\n  const hashChars = '#\\\\uFF03'; // normal '#' or full-width '#'\n\n  return {\n    alpha,\n    alphanumeric,\n    hashChars\n  };\n}\n\nfunction getHashtagRegexString() {\n  const {\n    alpha,\n    alphanumeric,\n    hashChars\n  } = getHashtagRegexStringChars();\n  const hashtagAlpha = '[' + alpha + ']';\n  const hashtagAlphanumeric = '[' + alphanumeric + ']';\n  const hashtagBoundary = '^|$|[^&/' + alphanumeric + ']';\n  const hashCharList = '[' + hashChars + ']'; // A hashtag contains characters, numbers and underscores,\n  // but not all numbers.\n\n  const hashtag = '(' + hashtagBoundary + ')(' + hashCharList + ')(' + hashtagAlphanumeric + '*' + hashtagAlpha + hashtagAlphanumeric + '*)';\n  return hashtag;\n}\n\nconst REGEX = new RegExp(getHashtagRegexString(), 'i');\nfunction HashtagPlugin() {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    if (!editor.hasNodes([hashtag.HashtagNode])) {\n      throw new Error('HashtagPlugin: HashtagNode not registered on editor');\n    }\n  }, [editor]);\n  const createHashtagNode = react.useCallback(textNode => {\n    return hashtag.$createHashtagNode(textNode.getTextContent());\n  }, []);\n  const getHashtagMatch = react.useCallback(text => {\n    const matchArr = REGEX.exec(text);\n\n    if (matchArr === null) {\n      return null;\n    }\n\n    const hashtagLength = matchArr[3].length + 1;\n    const startOffset = matchArr.index + matchArr[1].length;\n    const endOffset = startOffset + hashtagLength;\n    return {\n      end: endOffset,\n      start: startOffset\n    };\n  }, []);\n  useLexicalTextEntity.useLexicalTextEntity(getHashtagMatch, hashtag.HashtagNode, createHashtagNode);\n  return null;\n}\n\nexports.HashtagPlugin = HashtagPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalHashtagPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalHashtagPlugin.js":
/*!*************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalHashtagPlugin.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalHashtagPlugin =  true ? __webpack_require__(/*! ./LexicalHashtagPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalHashtagPlugin.dev.js\") : 0\nmodule.exports = LexicalHashtagPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEhhc2h0YWdQbHVnaW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWiw2QkFBNkIsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLHNHQUErQixJQUFJLENBQXlDO0FBQzFKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEhhc2h0YWdQbHVnaW4uanM/MmU3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgTGV4aWNhbEhhc2h0YWdQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbEhhc2h0YWdQbHVnaW4uZGV2LmpzJykgOiByZXF1aXJlKCcuL0xleGljYWxIYXNodGFnUGx1Z2luLnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsSGFzaHRhZ1BsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalHashtagPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalHistoryPlugin.dev.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalHistoryPlugin.dev.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar history = __webpack_require__(/*! @lexical/history */ \"(ssr)/./node_modules/@lexical/history/LexicalHistory.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction useHistory(editor, externalHistoryState, delay = 1000) {\n  const historyState = react.useMemo(() => externalHistoryState || history.createEmptyHistoryState(), [externalHistoryState]);\n  react.useEffect(() => {\n    return history.registerHistory(editor, historyState, delay);\n  }, [delay, editor, historyState]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction HistoryPlugin({\n  externalHistoryState\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  useHistory(editor, externalHistoryState);\n  return null;\n}\n\nexports.createEmptyHistoryState = history.createEmptyHistoryState;\nexports.HistoryPlugin = HistoryPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEhpc3RvcnlQbHVnaW4uZGV2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViLDZCQUE2QixtQkFBTyxDQUFDLDRHQUF1QztBQUM1RSxjQUFjLG1CQUFPLENBQUMsaUZBQWtCO0FBQ3hDLFlBQVksbUJBQU8sQ0FBQyx3R0FBTzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCO0FBQy9CLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxIaXN0b3J5UGx1Z2luLmRldi5qcz80ZjNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTGV4aWNhbENvbXBvc2VyQ29udGV4dCA9IHJlcXVpcmUoJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnKTtcbnZhciBoaXN0b3J5ID0gcmVxdWlyZSgnQGxleGljYWwvaGlzdG9yeScpO1xudmFyIHJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuZnVuY3Rpb24gdXNlSGlzdG9yeShlZGl0b3IsIGV4dGVybmFsSGlzdG9yeVN0YXRlLCBkZWxheSA9IDEwMDApIHtcbiAgY29uc3QgaGlzdG9yeVN0YXRlID0gcmVhY3QudXNlTWVtbygoKSA9PiBleHRlcm5hbEhpc3RvcnlTdGF0ZSB8fCBoaXN0b3J5LmNyZWF0ZUVtcHR5SGlzdG9yeVN0YXRlKCksIFtleHRlcm5hbEhpc3RvcnlTdGF0ZV0pO1xuICByZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiBoaXN0b3J5LnJlZ2lzdGVySGlzdG9yeShlZGl0b3IsIGhpc3RvcnlTdGF0ZSwgZGVsYXkpO1xuICB9LCBbZGVsYXksIGVkaXRvciwgaGlzdG9yeVN0YXRlXSk7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbmZ1bmN0aW9uIEhpc3RvcnlQbHVnaW4oe1xuICBleHRlcm5hbEhpc3RvcnlTdGF0ZVxufSkge1xuICBjb25zdCBbZWRpdG9yXSA9IExleGljYWxDb21wb3NlckNvbnRleHQudXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCgpO1xuICB1c2VIaXN0b3J5KGVkaXRvciwgZXh0ZXJuYWxIaXN0b3J5U3RhdGUpO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0cy5jcmVhdGVFbXB0eUhpc3RvcnlTdGF0ZSA9IGhpc3RvcnkuY3JlYXRlRW1wdHlIaXN0b3J5U3RhdGU7XG5leHBvcnRzLkhpc3RvcnlQbHVnaW4gPSBIaXN0b3J5UGx1Z2luO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalHistoryPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalHistoryPlugin.js":
/*!*************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalHistoryPlugin.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalHistoryPlugin =  true ? __webpack_require__(/*! ./LexicalHistoryPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalHistoryPlugin.dev.js\") : 0\nmodule.exports = LexicalHistoryPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEhpc3RvcnlQbHVnaW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWiw2QkFBNkIsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLHNHQUErQixJQUFJLENBQXlDO0FBQzFKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEhpc3RvcnlQbHVnaW4uanM/NWM3OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgTGV4aWNhbEhpc3RvcnlQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbEhpc3RvcnlQbHVnaW4uZGV2LmpzJykgOiByZXF1aXJlKCcuL0xleGljYWxIaXN0b3J5UGx1Z2luLnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsSGlzdG9yeVBsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalHistoryPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalHorizontalRuleNode.dev.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalHorizontalRuleNode.dev.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar useLexicalNodeSelection = __webpack_require__(/*! @lexical/react/useLexicalNodeSelection */ \"(ssr)/./node_modules/@lexical/react/useLexicalNodeSelection.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst INSERT_HORIZONTAL_RULE_COMMAND = lexical.createCommand('INSERT_HORIZONTAL_RULE_COMMAND');\n\nfunction HorizontalRuleComponent({\n  nodeKey\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const [isSelected, setSelected, clearSelection] = useLexicalNodeSelection.useLexicalNodeSelection(nodeKey);\n  const onDelete = React.useCallback(payload => {\n    if (isSelected && lexical.$isNodeSelection(lexical.$getSelection())) {\n      const event = payload;\n      event.preventDefault();\n      const node = lexical.$getNodeByKey(nodeKey);\n\n      if ($isHorizontalRuleNode(node)) {\n        node.remove();\n      }\n\n      setSelected(false);\n    }\n\n    return false;\n  }, [isSelected, nodeKey, setSelected]);\n  React.useEffect(() => {\n    return utils.mergeRegister(editor.registerCommand(lexical.CLICK_COMMAND, event => {\n      const hrElem = editor.getElementByKey(nodeKey);\n\n      if (event.target === hrElem) {\n        if (!event.shiftKey) {\n          clearSelection();\n        }\n\n        setSelected(!isSelected);\n        return true;\n      }\n\n      return false;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_DELETE_COMMAND, onDelete, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, onDelete, lexical.COMMAND_PRIORITY_LOW));\n  }, [clearSelection, editor, isSelected, nodeKey, onDelete, setSelected]);\n  React.useEffect(() => {\n    const hrElem = editor.getElementByKey(nodeKey);\n\n    if (hrElem !== null) {\n      hrElem.className = isSelected ? 'selected' : '';\n    }\n  }, [editor, isSelected, nodeKey]);\n  return null;\n}\n\nclass HorizontalRuleNode extends lexical.DecoratorNode {\n  static getType() {\n    return 'horizontalrule';\n  }\n\n  static clone(node) {\n    return new HorizontalRuleNode(node.__key);\n  }\n\n  static importJSON(serializedNode) {\n    return $createHorizontalRuleNode();\n  }\n\n  static importDOM() {\n    return {\n      hr: () => ({\n        conversion: convertHorizontalRuleElement,\n        priority: 0\n      })\n    };\n  }\n\n  exportJSON() {\n    return {\n      type: 'horizontalrule',\n      version: 1\n    };\n  }\n\n  exportDOM() {\n    return {\n      element: document.createElement('hr')\n    };\n  }\n\n  createDOM() {\n    return document.createElement('hr');\n  }\n\n  getTextContent() {\n    return '\\n';\n  }\n\n  isInline() {\n    return false;\n  }\n\n  updateDOM() {\n    return false;\n  }\n\n  decorate() {\n    return /*#__PURE__*/React.createElement(HorizontalRuleComponent, {\n      nodeKey: this.__key\n    });\n  }\n\n}\n\nfunction convertHorizontalRuleElement() {\n  return {\n    node: $createHorizontalRuleNode()\n  };\n}\n\nfunction $createHorizontalRuleNode() {\n  return lexical.$applyNodeReplacement(new HorizontalRuleNode());\n}\nfunction $isHorizontalRuleNode(node) {\n  return node instanceof HorizontalRuleNode;\n}\n\nexports.$createHorizontalRuleNode = $createHorizontalRuleNode;\nexports.$isHorizontalRuleNode = $isHorizontalRuleNode;\nexports.HorizontalRuleNode = HorizontalRuleNode;\nexports.INSERT_HORIZONTAL_RULE_COMMAND = INSERT_HORIZONTAL_RULE_COMMAND;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEhvcml6b250YWxSdWxlTm9kZS5kZXYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBRWIsNkJBQTZCLG1CQUFPLENBQUMsNEdBQXVDO0FBQzVFLDhCQUE4QixtQkFBTyxDQUFDLDhHQUF3QztBQUM5RSxZQUFZLG1CQUFPLENBQUMsMkVBQWdCO0FBQ3BDLGNBQWMsbUJBQU8sQ0FBQyx3REFBUztBQUMvQixZQUFZLG1CQUFPLENBQUMsd0dBQU87O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUNBQWlDO0FBQ2pDLDZCQUE2QjtBQUM3QiwwQkFBMEI7QUFDMUIsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEhvcml6b250YWxSdWxlTm9kZS5kZXYuanM/YWRmNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIExleGljYWxDb21wb3NlckNvbnRleHQgPSByZXF1aXJlKCdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXJDb250ZXh0Jyk7XG52YXIgdXNlTGV4aWNhbE5vZGVTZWxlY3Rpb24gPSByZXF1aXJlKCdAbGV4aWNhbC9yZWFjdC91c2VMZXhpY2FsTm9kZVNlbGVjdGlvbicpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnQGxleGljYWwvdXRpbHMnKTtcbnZhciBsZXhpY2FsID0gcmVxdWlyZSgnbGV4aWNhbCcpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuY29uc3QgSU5TRVJUX0hPUklaT05UQUxfUlVMRV9DT01NQU5EID0gbGV4aWNhbC5jcmVhdGVDb21tYW5kKCdJTlNFUlRfSE9SSVpPTlRBTF9SVUxFX0NPTU1BTkQnKTtcblxuZnVuY3Rpb24gSG9yaXpvbnRhbFJ1bGVDb21wb25lbnQoe1xuICBub2RlS2V5XG59KSB7XG4gIGNvbnN0IFtlZGl0b3JdID0gTGV4aWNhbENvbXBvc2VyQ29udGV4dC51c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KCk7XG4gIGNvbnN0IFtpc1NlbGVjdGVkLCBzZXRTZWxlY3RlZCwgY2xlYXJTZWxlY3Rpb25dID0gdXNlTGV4aWNhbE5vZGVTZWxlY3Rpb24udXNlTGV4aWNhbE5vZGVTZWxlY3Rpb24obm9kZUtleSk7XG4gIGNvbnN0IG9uRGVsZXRlID0gUmVhY3QudXNlQ2FsbGJhY2socGF5bG9hZCA9PiB7XG4gICAgaWYgKGlzU2VsZWN0ZWQgJiYgbGV4aWNhbC4kaXNOb2RlU2VsZWN0aW9uKGxleGljYWwuJGdldFNlbGVjdGlvbigpKSkge1xuICAgICAgY29uc3QgZXZlbnQgPSBwYXlsb2FkO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IG5vZGUgPSBsZXhpY2FsLiRnZXROb2RlQnlLZXkobm9kZUtleSk7XG5cbiAgICAgIGlmICgkaXNIb3Jpem9udGFsUnVsZU5vZGUobm9kZSkpIHtcbiAgICAgICAgbm9kZS5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgc2V0U2VsZWN0ZWQoZmFsc2UpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSwgW2lzU2VsZWN0ZWQsIG5vZGVLZXksIHNldFNlbGVjdGVkXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuIHV0aWxzLm1lcmdlUmVnaXN0ZXIoZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChsZXhpY2FsLkNMSUNLX0NPTU1BTkQsIGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IGhyRWxlbSA9IGVkaXRvci5nZXRFbGVtZW50QnlLZXkobm9kZUtleSk7XG5cbiAgICAgIGlmIChldmVudC50YXJnZXQgPT09IGhyRWxlbSkge1xuICAgICAgICBpZiAoIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFNlbGVjdGVkKCFpc1NlbGVjdGVkKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCBsZXhpY2FsLkNPTU1BTkRfUFJJT1JJVFlfTE9XKSwgZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChsZXhpY2FsLktFWV9ERUxFVEVfQ09NTUFORCwgb25EZWxldGUsIGxleGljYWwuQ09NTUFORF9QUklPUklUWV9MT1cpLCBlZGl0b3IucmVnaXN0ZXJDb21tYW5kKGxleGljYWwuS0VZX0JBQ0tTUEFDRV9DT01NQU5ELCBvbkRlbGV0ZSwgbGV4aWNhbC5DT01NQU5EX1BSSU9SSVRZX0xPVykpO1xuICB9LCBbY2xlYXJTZWxlY3Rpb24sIGVkaXRvciwgaXNTZWxlY3RlZCwgbm9kZUtleSwgb25EZWxldGUsIHNldFNlbGVjdGVkXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaHJFbGVtID0gZWRpdG9yLmdldEVsZW1lbnRCeUtleShub2RlS2V5KTtcblxuICAgIGlmIChockVsZW0gIT09IG51bGwpIHtcbiAgICAgIGhyRWxlbS5jbGFzc05hbWUgPSBpc1NlbGVjdGVkID8gJ3NlbGVjdGVkJyA6ICcnO1xuICAgIH1cbiAgfSwgW2VkaXRvciwgaXNTZWxlY3RlZCwgbm9kZUtleV0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuY2xhc3MgSG9yaXpvbnRhbFJ1bGVOb2RlIGV4dGVuZHMgbGV4aWNhbC5EZWNvcmF0b3JOb2RlIHtcbiAgc3RhdGljIGdldFR5cGUoKSB7XG4gICAgcmV0dXJuICdob3Jpem9udGFscnVsZSc7XG4gIH1cblxuICBzdGF0aWMgY2xvbmUobm9kZSkge1xuICAgIHJldHVybiBuZXcgSG9yaXpvbnRhbFJ1bGVOb2RlKG5vZGUuX19rZXkpO1xuICB9XG5cbiAgc3RhdGljIGltcG9ydEpTT04oc2VyaWFsaXplZE5vZGUpIHtcbiAgICByZXR1cm4gJGNyZWF0ZUhvcml6b250YWxSdWxlTm9kZSgpO1xuICB9XG5cbiAgc3RhdGljIGltcG9ydERPTSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaHI6ICgpID0+ICh7XG4gICAgICAgIGNvbnZlcnNpb246IGNvbnZlcnRIb3Jpem9udGFsUnVsZUVsZW1lbnQsXG4gICAgICAgIHByaW9yaXR5OiAwXG4gICAgICB9KVxuICAgIH07XG4gIH1cblxuICBleHBvcnRKU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnaG9yaXpvbnRhbHJ1bGUnLFxuICAgICAgdmVyc2lvbjogMVxuICAgIH07XG4gIH1cblxuICBleHBvcnRET00oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2hyJylcbiAgICB9O1xuICB9XG5cbiAgY3JlYXRlRE9NKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdocicpO1xuICB9XG5cbiAgZ2V0VGV4dENvbnRlbnQoKSB7XG4gICAgcmV0dXJuICdcXG4nO1xuICB9XG5cbiAgaXNJbmxpbmUoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdXBkYXRlRE9NKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGRlY29yYXRlKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChIb3Jpem9udGFsUnVsZUNvbXBvbmVudCwge1xuICAgICAgbm9kZUtleTogdGhpcy5fX2tleVxuICAgIH0pO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gY29udmVydEhvcml6b250YWxSdWxlRWxlbWVudCgpIHtcbiAgcmV0dXJuIHtcbiAgICBub2RlOiAkY3JlYXRlSG9yaXpvbnRhbFJ1bGVOb2RlKClcbiAgfTtcbn1cblxuZnVuY3Rpb24gJGNyZWF0ZUhvcml6b250YWxSdWxlTm9kZSgpIHtcbiAgcmV0dXJuIGxleGljYWwuJGFwcGx5Tm9kZVJlcGxhY2VtZW50KG5ldyBIb3Jpem9udGFsUnVsZU5vZGUoKSk7XG59XG5mdW5jdGlvbiAkaXNIb3Jpem9udGFsUnVsZU5vZGUobm9kZSkge1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIEhvcml6b250YWxSdWxlTm9kZTtcbn1cblxuZXhwb3J0cy4kY3JlYXRlSG9yaXpvbnRhbFJ1bGVOb2RlID0gJGNyZWF0ZUhvcml6b250YWxSdWxlTm9kZTtcbmV4cG9ydHMuJGlzSG9yaXpvbnRhbFJ1bGVOb2RlID0gJGlzSG9yaXpvbnRhbFJ1bGVOb2RlO1xuZXhwb3J0cy5Ib3Jpem9udGFsUnVsZU5vZGUgPSBIb3Jpem9udGFsUnVsZU5vZGU7XG5leHBvcnRzLklOU0VSVF9IT1JJWk9OVEFMX1JVTEVfQ09NTUFORCA9IElOU0VSVF9IT1JJWk9OVEFMX1JVTEVfQ09NTUFORDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalHorizontalRuleNode.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalHorizontalRuleNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalHorizontalRuleNode.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalHorizontalRuleNode =  true ? __webpack_require__(/*! ./LexicalHorizontalRuleNode.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalHorizontalRuleNode.dev.js\") : 0\nmodule.exports = LexicalHorizontalRuleNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEhvcml6b250YWxSdWxlTm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLGtDQUFrQyxLQUFzQyxHQUFHLG1CQUFPLENBQUMsZ0hBQW9DLElBQUksQ0FBOEM7QUFDeksiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsSG9yaXpvbnRhbFJ1bGVOb2RlLmpzPzU4OTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxIb3Jpem9udGFsUnVsZU5vZGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbEhvcml6b250YWxSdWxlTm9kZS5kZXYuanMnKSA6IHJlcXVpcmUoJy4vTGV4aWNhbEhvcml6b250YWxSdWxlTm9kZS5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbEhvcml6b250YWxSdWxlTm9kZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalHorizontalRuleNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalHorizontalRulePlugin.dev.js":
/*!************************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalHorizontalRulePlugin.dev.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar LexicalHorizontalRuleNode = __webpack_require__(/*! @lexical/react/LexicalHorizontalRuleNode */ \"(ssr)/./node_modules/@lexical/react/LexicalHorizontalRuleNode.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction HorizontalRulePlugin() {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    return editor.registerCommand(LexicalHorizontalRuleNode.INSERT_HORIZONTAL_RULE_COMMAND, type => {\n      const selection = lexical.$getSelection();\n\n      if (!lexical.$isRangeSelection(selection)) {\n        return false;\n      }\n\n      const focusNode = selection.focus.getNode();\n\n      if (focusNode !== null) {\n        const horizontalRuleNode = LexicalHorizontalRuleNode.$createHorizontalRuleNode();\n        utils.$insertNodeToNearestRoot(horizontalRuleNode);\n      }\n\n      return true;\n    }, lexical.COMMAND_PRIORITY_EDITOR);\n  }, [editor]);\n  return null;\n}\n\nexports.HorizontalRulePlugin = HorizontalRulePlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEhvcml6b250YWxSdWxlUGx1Z2luLmRldi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyw0R0FBdUM7QUFDNUUsZ0NBQWdDLG1CQUFPLENBQUMsa0hBQTBDO0FBQ2xGLFlBQVksbUJBQU8sQ0FBQywyRUFBZ0I7QUFDcEMsY0FBYyxtQkFBTyxDQUFDLHdEQUFTO0FBQy9CLFlBQVksbUJBQU8sQ0FBQyx3R0FBTzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTs7QUFFQSw0QkFBNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsSG9yaXpvbnRhbFJ1bGVQbHVnaW4uZGV2LmpzP2Q3NWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBMZXhpY2FsQ29tcG9zZXJDb250ZXh0ID0gcmVxdWlyZSgnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCcpO1xudmFyIExleGljYWxIb3Jpem9udGFsUnVsZU5vZGUgPSByZXF1aXJlKCdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsSG9yaXpvbnRhbFJ1bGVOb2RlJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCdAbGV4aWNhbC91dGlscycpO1xudmFyIGxleGljYWwgPSByZXF1aXJlKCdsZXhpY2FsJyk7XG52YXIgcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5mdW5jdGlvbiBIb3Jpem9udGFsUnVsZVBsdWdpbigpIHtcbiAgY29uc3QgW2VkaXRvcl0gPSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0LnVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgcmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChMZXhpY2FsSG9yaXpvbnRhbFJ1bGVOb2RlLklOU0VSVF9IT1JJWk9OVEFMX1JVTEVfQ09NTUFORCwgdHlwZSA9PiB7XG4gICAgICBjb25zdCBzZWxlY3Rpb24gPSBsZXhpY2FsLiRnZXRTZWxlY3Rpb24oKTtcblxuICAgICAgaWYgKCFsZXhpY2FsLiRpc1JhbmdlU2VsZWN0aW9uKHNlbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXMuZ2V0Tm9kZSgpO1xuXG4gICAgICBpZiAoZm9jdXNOb2RlICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWxSdWxlTm9kZSA9IExleGljYWxIb3Jpem9udGFsUnVsZU5vZGUuJGNyZWF0ZUhvcml6b250YWxSdWxlTm9kZSgpO1xuICAgICAgICB1dGlscy4kaW5zZXJ0Tm9kZVRvTmVhcmVzdFJvb3QoaG9yaXpvbnRhbFJ1bGVOb2RlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSwgbGV4aWNhbC5DT01NQU5EX1BSSU9SSVRZX0VESVRPUik7XG4gIH0sIFtlZGl0b3JdKTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydHMuSG9yaXpvbnRhbFJ1bGVQbHVnaW4gPSBIb3Jpem9udGFsUnVsZVBsdWdpbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalHorizontalRulePlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalHorizontalRulePlugin.js":
/*!********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalHorizontalRulePlugin.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalHorizontalRulePlugin =  true ? __webpack_require__(/*! ./LexicalHorizontalRulePlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalHorizontalRulePlugin.dev.js\") : 0\nmodule.exports = LexicalHorizontalRulePlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbEhvcml6b250YWxSdWxlUGx1Z2luLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osb0NBQW9DLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyxvSEFBc0MsSUFBSSxDQUFnRDtBQUMvSyIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxIb3Jpem9udGFsUnVsZVBsdWdpbi5qcz8xOWZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsSG9yaXpvbnRhbFJ1bGVQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbEhvcml6b250YWxSdWxlUGx1Z2luLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsSG9yaXpvbnRhbFJ1bGVQbHVnaW4ucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxIb3Jpem9udGFsUnVsZVBsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalHorizontalRulePlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalLinkPlugin.dev.js":
/*!**************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalLinkPlugin.dev.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar link = __webpack_require__(/*! @lexical/link */ \"(ssr)/./node_modules/@lexical/link/LexicalLink.js\");\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction LinkPlugin({\n  validateUrl\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    if (!editor.hasNodes([link.LinkNode])) {\n      throw new Error('LinkPlugin: LinkNode not registered on editor');\n    }\n\n    return utils.mergeRegister(editor.registerCommand(link.TOGGLE_LINK_COMMAND, payload => {\n      if (payload === null) {\n        link.toggleLink(payload);\n        return true;\n      } else if (typeof payload === 'string') {\n        if (validateUrl === undefined || validateUrl(payload)) {\n          link.toggleLink(payload);\n          return true;\n        }\n\n        return false;\n      } else {\n        const {\n          url,\n          target,\n          rel\n        } = payload;\n        link.toggleLink(url, {\n          rel,\n          target\n        });\n        return true;\n      }\n    }, lexical.COMMAND_PRIORITY_LOW), validateUrl !== undefined ? editor.registerCommand(lexical.PASTE_COMMAND, event => {\n      const selection = lexical.$getSelection();\n\n      if (!lexical.$isRangeSelection(selection) || selection.isCollapsed() || !(event instanceof ClipboardEvent) || event.clipboardData == null) {\n        return false;\n      }\n\n      const clipboardText = event.clipboardData.getData('text');\n\n      if (!validateUrl(clipboardText)) {\n        return false;\n      } // If we select nodes that are elements then avoid applying the link.\n\n\n      if (!selection.getNodes().some(node => lexical.$isElementNode(node))) {\n        editor.dispatchCommand(link.TOGGLE_LINK_COMMAND, clipboardText);\n        event.preventDefault();\n        return true;\n      }\n\n      return false;\n    }, lexical.COMMAND_PRIORITY_LOW) : () => {// Don't paste arbritrary text as a link when there's no validate function\n    });\n  }, [editor, validateUrl]);\n  return null;\n}\n\nexports.LinkPlugin = LinkPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbExpbmtQbHVnaW4uZGV2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViLFdBQVcsbUJBQU8sQ0FBQyx3RUFBZTtBQUNsQyw2QkFBNkIsbUJBQU8sQ0FBQyw0R0FBdUM7QUFDNUUsWUFBWSxtQkFBTyxDQUFDLDJFQUFnQjtBQUNwQyxjQUFjLG1CQUFPLENBQUMsd0RBQVM7QUFDL0IsWUFBWSxtQkFBTyxDQUFDLHdHQUFPOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFFBQVE7OztBQUdSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLLHlDQUF5QztBQUM5QyxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7O0FBRUEsa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbExpbmtQbHVnaW4uZGV2LmpzP2VmMjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBsaW5rID0gcmVxdWlyZSgnQGxleGljYWwvbGluaycpO1xudmFyIExleGljYWxDb21wb3NlckNvbnRleHQgPSByZXF1aXJlKCdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXJDb250ZXh0Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCdAbGV4aWNhbC91dGlscycpO1xudmFyIGxleGljYWwgPSByZXF1aXJlKCdsZXhpY2FsJyk7XG52YXIgcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5mdW5jdGlvbiBMaW5rUGx1Z2luKHtcbiAgdmFsaWRhdGVVcmxcbn0pIHtcbiAgY29uc3QgW2VkaXRvcl0gPSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0LnVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgcmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWVkaXRvci5oYXNOb2RlcyhbbGluay5MaW5rTm9kZV0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xpbmtQbHVnaW46IExpbmtOb2RlIG5vdCByZWdpc3RlcmVkIG9uIGVkaXRvcicpO1xuICAgIH1cblxuICAgIHJldHVybiB1dGlscy5tZXJnZVJlZ2lzdGVyKGVkaXRvci5yZWdpc3RlckNvbW1hbmQobGluay5UT0dHTEVfTElOS19DT01NQU5ELCBwYXlsb2FkID0+IHtcbiAgICAgIGlmIChwYXlsb2FkID09PSBudWxsKSB7XG4gICAgICAgIGxpbmsudG9nZ2xlTGluayhwYXlsb2FkKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXlsb2FkID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodmFsaWRhdGVVcmwgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0ZVVybChwYXlsb2FkKSkge1xuICAgICAgICAgIGxpbmsudG9nZ2xlTGluayhwYXlsb2FkKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB1cmwsXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIHJlbFxuICAgICAgICB9ID0gcGF5bG9hZDtcbiAgICAgICAgbGluay50b2dnbGVMaW5rKHVybCwge1xuICAgICAgICAgIHJlbCxcbiAgICAgICAgICB0YXJnZXRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0sIGxleGljYWwuQ09NTUFORF9QUklPUklUWV9MT1cpLCB2YWxpZGF0ZVVybCAhPT0gdW5kZWZpbmVkID8gZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChsZXhpY2FsLlBBU1RFX0NPTU1BTkQsIGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGxleGljYWwuJGdldFNlbGVjdGlvbigpO1xuXG4gICAgICBpZiAoIWxleGljYWwuJGlzUmFuZ2VTZWxlY3Rpb24oc2VsZWN0aW9uKSB8fCBzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSB8fCAhKGV2ZW50IGluc3RhbmNlb2YgQ2xpcGJvYXJkRXZlbnQpIHx8IGV2ZW50LmNsaXBib2FyZERhdGEgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNsaXBib2FyZFRleHQgPSBldmVudC5jbGlwYm9hcmREYXRhLmdldERhdGEoJ3RleHQnKTtcblxuICAgICAgaWYgKCF2YWxpZGF0ZVVybChjbGlwYm9hcmRUZXh0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IC8vIElmIHdlIHNlbGVjdCBub2RlcyB0aGF0IGFyZSBlbGVtZW50cyB0aGVuIGF2b2lkIGFwcGx5aW5nIHRoZSBsaW5rLlxuXG5cbiAgICAgIGlmICghc2VsZWN0aW9uLmdldE5vZGVzKCkuc29tZShub2RlID0+IGxleGljYWwuJGlzRWxlbWVudE5vZGUobm9kZSkpKSB7XG4gICAgICAgIGVkaXRvci5kaXNwYXRjaENvbW1hbmQobGluay5UT0dHTEVfTElOS19DT01NQU5ELCBjbGlwYm9hcmRUZXh0KTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCBsZXhpY2FsLkNPTU1BTkRfUFJJT1JJVFlfTE9XKSA6ICgpID0+IHsvLyBEb24ndCBwYXN0ZSBhcmJyaXRyYXJ5IHRleHQgYXMgYSBsaW5rIHdoZW4gdGhlcmUncyBubyB2YWxpZGF0ZSBmdW5jdGlvblxuICAgIH0pO1xuICB9LCBbZWRpdG9yLCB2YWxpZGF0ZVVybF0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0cy5MaW5rUGx1Z2luID0gTGlua1BsdWdpbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalLinkPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalLinkPlugin.js":
/*!**********************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalLinkPlugin.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalLinkPlugin =  true ? __webpack_require__(/*! ./LexicalLinkPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalLinkPlugin.dev.js\") : 0\nmodule.exports = LexicalLinkPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbExpbmtQbHVnaW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWiwwQkFBMEIsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLGdHQUE0QixJQUFJLENBQXNDO0FBQ2pKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbExpbmtQbHVnaW4uanM/MDMxMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgTGV4aWNhbExpbmtQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbExpbmtQbHVnaW4uZGV2LmpzJykgOiByZXF1aXJlKCcuL0xleGljYWxMaW5rUGx1Z2luLnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsTGlua1BsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalLinkPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalListPlugin.dev.js":
/*!**************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalListPlugin.dev.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar list = __webpack_require__(/*! @lexical/list */ \"(ssr)/./node_modules/@lexical/list/LexicalList.js\");\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction useList(editor) {\n  react.useEffect(() => {\n    return utils.mergeRegister(editor.registerCommand(list.INSERT_ORDERED_LIST_COMMAND, () => {\n      list.insertList(editor, 'number');\n      return true;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(list.INSERT_UNORDERED_LIST_COMMAND, () => {\n      list.insertList(editor, 'bullet');\n      return true;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(list.REMOVE_LIST_COMMAND, () => {\n      list.removeList(editor);\n      return true;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.INSERT_PARAGRAPH_COMMAND, () => {\n      const hasHandledInsertParagraph = list.$handleListInsertParagraph();\n\n      if (hasHandledInsertParagraph) {\n        return true;\n      }\n\n      return false;\n    }, lexical.COMMAND_PRIORITY_LOW));\n  }, [editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction ListPlugin() {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    if (!editor.hasNodes([list.ListNode, list.ListItemNode])) {\n      throw new Error('ListPlugin: ListNode and/or ListItemNode not registered on editor');\n    }\n  }, [editor]);\n  useList(editor);\n  return null;\n}\n\nexports.ListPlugin = ListPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbExpc3RQbHVnaW4uZGV2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViLFdBQVcsbUJBQU8sQ0FBQyx3RUFBZTtBQUNsQyw2QkFBNkIsbUJBQU8sQ0FBQyw0R0FBdUM7QUFDNUUsWUFBWSxtQkFBTyxDQUFDLHdHQUFPO0FBQzNCLFlBQVksbUJBQU8sQ0FBQywyRUFBZ0I7QUFDcEMsY0FBYyxtQkFBTyxDQUFDLHdEQUFTOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxMaXN0UGx1Z2luLmRldi5qcz9mNDU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbGlzdCA9IHJlcXVpcmUoJ0BsZXhpY2FsL2xpc3QnKTtcbnZhciBMZXhpY2FsQ29tcG9zZXJDb250ZXh0ID0gcmVxdWlyZSgnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCcpO1xudmFyIHJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ0BsZXhpY2FsL3V0aWxzJyk7XG52YXIgbGV4aWNhbCA9IHJlcXVpcmUoJ2xleGljYWwnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuZnVuY3Rpb24gdXNlTGlzdChlZGl0b3IpIHtcbiAgcmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gdXRpbHMubWVyZ2VSZWdpc3RlcihlZGl0b3IucmVnaXN0ZXJDb21tYW5kKGxpc3QuSU5TRVJUX09SREVSRURfTElTVF9DT01NQU5ELCAoKSA9PiB7XG4gICAgICBsaXN0Lmluc2VydExpc3QoZWRpdG9yLCAnbnVtYmVyJyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LCBsZXhpY2FsLkNPTU1BTkRfUFJJT1JJVFlfTE9XKSwgZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChsaXN0LklOU0VSVF9VTk9SREVSRURfTElTVF9DT01NQU5ELCAoKSA9PiB7XG4gICAgICBsaXN0Lmluc2VydExpc3QoZWRpdG9yLCAnYnVsbGV0Jyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LCBsZXhpY2FsLkNPTU1BTkRfUFJJT1JJVFlfTE9XKSwgZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChsaXN0LlJFTU9WRV9MSVNUX0NPTU1BTkQsICgpID0+IHtcbiAgICAgIGxpc3QucmVtb3ZlTGlzdChlZGl0b3IpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSwgbGV4aWNhbC5DT01NQU5EX1BSSU9SSVRZX0xPVyksIGVkaXRvci5yZWdpc3RlckNvbW1hbmQobGV4aWNhbC5JTlNFUlRfUEFSQUdSQVBIX0NPTU1BTkQsICgpID0+IHtcbiAgICAgIGNvbnN0IGhhc0hhbmRsZWRJbnNlcnRQYXJhZ3JhcGggPSBsaXN0LiRoYW5kbGVMaXN0SW5zZXJ0UGFyYWdyYXBoKCk7XG5cbiAgICAgIGlmIChoYXNIYW5kbGVkSW5zZXJ0UGFyYWdyYXBoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSwgbGV4aWNhbC5DT01NQU5EX1BSSU9SSVRZX0xPVykpO1xuICB9LCBbZWRpdG9yXSk7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbmZ1bmN0aW9uIExpc3RQbHVnaW4oKSB7XG4gIGNvbnN0IFtlZGl0b3JdID0gTGV4aWNhbENvbXBvc2VyQ29udGV4dC51c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KCk7XG4gIHJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFlZGl0b3IuaGFzTm9kZXMoW2xpc3QuTGlzdE5vZGUsIGxpc3QuTGlzdEl0ZW1Ob2RlXSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTGlzdFBsdWdpbjogTGlzdE5vZGUgYW5kL29yIExpc3RJdGVtTm9kZSBub3QgcmVnaXN0ZXJlZCBvbiBlZGl0b3InKTtcbiAgICB9XG4gIH0sIFtlZGl0b3JdKTtcbiAgdXNlTGlzdChlZGl0b3IpO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0cy5MaXN0UGx1Z2luID0gTGlzdFBsdWdpbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalListPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalListPlugin.js":
/*!**********************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalListPlugin.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalListPlugin =  true ? __webpack_require__(/*! ./LexicalListPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalListPlugin.dev.js\") : 0\nmodule.exports = LexicalListPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbExpc3RQbHVnaW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWiwwQkFBMEIsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLGdHQUE0QixJQUFJLENBQXNDO0FBQ2pKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbExpc3RQbHVnaW4uanM/NGExMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgTGV4aWNhbExpc3RQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbExpc3RQbHVnaW4uZGV2LmpzJykgOiByZXF1aXJlKCcuL0xleGljYWxMaXN0UGx1Z2luLnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsTGlzdFBsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalListPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.dev.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.dev.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar markdown = __webpack_require__(/*! @lexical/markdown */ \"(ssr)/./node_modules/@lexical/markdown/LexicalMarkdown.js\");\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar LexicalHorizontalRuleNode = __webpack_require__(/*! @lexical/react/LexicalHorizontalRuleNode */ \"(ssr)/./node_modules/@lexical/react/LexicalHorizontalRuleNode.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst HR = {\n  dependencies: [LexicalHorizontalRuleNode.HorizontalRuleNode],\n  export: node => {\n    return LexicalHorizontalRuleNode.$isHorizontalRuleNode(node) ? '***' : null;\n  },\n  regExp: /^(---|\\*\\*\\*|___)\\s?$/,\n  replace: (parentNode, _1, _2, isImport) => {\n    const line = LexicalHorizontalRuleNode.$createHorizontalRuleNode(); // TODO: Get rid of isImport flag\n\n    if (isImport || parentNode.getNextSibling() != null) {\n      parentNode.replace(line);\n    } else {\n      parentNode.insertBefore(line);\n    }\n\n    line.selectNext();\n  },\n  type: 'element'\n};\nconst DEFAULT_TRANSFORMERS = [HR, ...markdown.TRANSFORMERS];\nfunction MarkdownShortcutPlugin({\n  transformers = DEFAULT_TRANSFORMERS\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    return markdown.registerMarkdownShortcuts(editor, transformers);\n  }, [editor, transformers]);\n  return null;\n}\n\nexports.DEFAULT_TRANSFORMERS = DEFAULT_TRANSFORMERS;\nexports.MarkdownShortcutPlugin = MarkdownShortcutPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbE1hcmtkb3duU2hvcnRjdXRQbHVnaW4uZGV2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxvRkFBbUI7QUFDMUMsNkJBQTZCLG1CQUFPLENBQUMsNEdBQXVDO0FBQzVFLGdDQUFnQyxtQkFBTyxDQUFDLGtIQUEwQztBQUNsRixZQUFZLG1CQUFPLENBQUMsd0dBQU87O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHdFQUF3RTs7QUFFeEU7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCLDhCQUE4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxNYXJrZG93blNob3J0Y3V0UGx1Z2luLmRldi5qcz9lNTJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbWFya2Rvd24gPSByZXF1aXJlKCdAbGV4aWNhbC9tYXJrZG93bicpO1xudmFyIExleGljYWxDb21wb3NlckNvbnRleHQgPSByZXF1aXJlKCdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXJDb250ZXh0Jyk7XG52YXIgTGV4aWNhbEhvcml6b250YWxSdWxlTm9kZSA9IHJlcXVpcmUoJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxIb3Jpem9udGFsUnVsZU5vZGUnKTtcbnZhciByZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbmNvbnN0IEhSID0ge1xuICBkZXBlbmRlbmNpZXM6IFtMZXhpY2FsSG9yaXpvbnRhbFJ1bGVOb2RlLkhvcml6b250YWxSdWxlTm9kZV0sXG4gIGV4cG9ydDogbm9kZSA9PiB7XG4gICAgcmV0dXJuIExleGljYWxIb3Jpem9udGFsUnVsZU5vZGUuJGlzSG9yaXpvbnRhbFJ1bGVOb2RlKG5vZGUpID8gJyoqKicgOiBudWxsO1xuICB9LFxuICByZWdFeHA6IC9eKC0tLXxcXCpcXCpcXCp8X19fKVxccz8kLyxcbiAgcmVwbGFjZTogKHBhcmVudE5vZGUsIF8xLCBfMiwgaXNJbXBvcnQpID0+IHtcbiAgICBjb25zdCBsaW5lID0gTGV4aWNhbEhvcml6b250YWxSdWxlTm9kZS4kY3JlYXRlSG9yaXpvbnRhbFJ1bGVOb2RlKCk7IC8vIFRPRE86IEdldCByaWQgb2YgaXNJbXBvcnQgZmxhZ1xuXG4gICAgaWYgKGlzSW1wb3J0IHx8IHBhcmVudE5vZGUuZ2V0TmV4dFNpYmxpbmcoKSAhPSBudWxsKSB7XG4gICAgICBwYXJlbnROb2RlLnJlcGxhY2UobGluZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGxpbmUpO1xuICAgIH1cblxuICAgIGxpbmUuc2VsZWN0TmV4dCgpO1xuICB9LFxuICB0eXBlOiAnZWxlbWVudCdcbn07XG5jb25zdCBERUZBVUxUX1RSQU5TRk9STUVSUyA9IFtIUiwgLi4ubWFya2Rvd24uVFJBTlNGT1JNRVJTXTtcbmZ1bmN0aW9uIE1hcmtkb3duU2hvcnRjdXRQbHVnaW4oe1xuICB0cmFuc2Zvcm1lcnMgPSBERUZBVUxUX1RSQU5TRk9STUVSU1xufSkge1xuICBjb25zdCBbZWRpdG9yXSA9IExleGljYWxDb21wb3NlckNvbnRleHQudXNlTGV4aWNhbENvbXBvc2VyQ29udGV4dCgpO1xuICByZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiBtYXJrZG93bi5yZWdpc3Rlck1hcmtkb3duU2hvcnRjdXRzKGVkaXRvciwgdHJhbnNmb3JtZXJzKTtcbiAgfSwgW2VkaXRvciwgdHJhbnNmb3JtZXJzXSk7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnRzLkRFRkFVTFRfVFJBTlNGT1JNRVJTID0gREVGQVVMVF9UUkFOU0ZPUk1FUlM7XG5leHBvcnRzLk1hcmtkb3duU2hvcnRjdXRQbHVnaW4gPSBNYXJrZG93blNob3J0Y3V0UGx1Z2luO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalMarkdownShortcutPlugin =  true ? __webpack_require__(/*! ./LexicalMarkdownShortcutPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.dev.js\") : 0\nmodule.exports = LexicalMarkdownShortcutPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbE1hcmtkb3duU2hvcnRjdXRQbHVnaW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWixzQ0FBc0MsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLHdIQUF3QyxJQUFJLENBQWtEO0FBQ3JMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbE1hcmtkb3duU2hvcnRjdXRQbHVnaW4uanM/OTYyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgTGV4aWNhbE1hcmtkb3duU2hvcnRjdXRQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbE1hcmtkb3duU2hvcnRjdXRQbHVnaW4uZGV2LmpzJykgOiByZXF1aXJlKCcuL0xleGljYWxNYXJrZG93blNob3J0Y3V0UGx1Z2luLnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsTWFya2Rvd25TaG9ydGN1dFBsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalNestedComposer.dev.js":
/*!******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalNestedComposer.dev.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalCollaborationContext = __webpack_require__(/*! @lexical/react/LexicalCollaborationContext */ \"(ssr)/./node_modules/@lexical/react/LexicalCollaborationContext.js\");\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction LexicalNestedComposer({\n  initialEditor,\n  children,\n  initialNodes,\n  initialTheme,\n  skipCollabChecks\n}) {\n  const wasCollabPreviouslyReadyRef = React.useRef(false);\n  const parentContext = React.useContext(LexicalComposerContext.LexicalComposerContext);\n\n  if (parentContext == null) {\n    {\n      throw Error(`Unexpected parent context null on a nested composer`);\n    }\n  }\n\n  const [parentEditor, {\n    getTheme: getParentTheme\n  }] = parentContext;\n  const composerContext = React.useMemo(() => {\n    const composerTheme = initialTheme || getParentTheme() || undefined;\n    const context = LexicalComposerContext.createLexicalComposerContext(parentContext, composerTheme);\n\n    if (composerTheme !== undefined) {\n      initialEditor._config.theme = composerTheme;\n    }\n\n    initialEditor._parentEditor = parentEditor;\n\n    if (!initialNodes) {\n      const parentNodes = initialEditor._nodes = new Map(parentEditor._nodes);\n\n      for (const [type, entry] of parentNodes) {\n        initialEditor._nodes.set(type, {\n          klass: entry.klass,\n          replace: entry.replace,\n          replaceWithKlass: entry.replaceWithKlass,\n          transforms: new Set()\n        });\n      }\n    } else {\n      for (const klass of initialNodes) {\n        const type = klass.getType();\n\n        initialEditor._nodes.set(type, {\n          klass,\n          replace: null,\n          replaceWithKlass: null,\n          transforms: new Set()\n        });\n      }\n    }\n\n    initialEditor._config.namespace = parentEditor._config.namespace;\n    initialEditor._editable = parentEditor._editable;\n    return [initialEditor, context];\n  }, // We only do this for init\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []); // If collaboration is enabled, make sure we don't render the children until the collaboration subdocument is ready.\n\n  const {\n    isCollabActive,\n    yjsDocMap\n  } = LexicalCollaborationContext.useCollaborationContext();\n  const isCollabReady = skipCollabChecks || wasCollabPreviouslyReadyRef.current || yjsDocMap.has(initialEditor.getKey());\n  React.useEffect(() => {\n    if (isCollabReady) {\n      wasCollabPreviouslyReadyRef.current = true;\n    }\n  }, [isCollabReady]); // Update `isEditable` state of nested editor in response to the same change on parent editor.\n\n  React.useEffect(() => {\n    return parentEditor.registerEditableListener(editable => {\n      initialEditor.setEditable(editable);\n    });\n  }, [initialEditor, parentEditor]);\n  return /*#__PURE__*/React.createElement(LexicalComposerContext.LexicalComposerContext.Provider, {\n    value: composerContext\n  }, !isCollabActive || isCollabReady ? children : null);\n}\n\nexports.LexicalNestedComposer = LexicalNestedComposer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbE5lc3RlZENvbXBvc2VyLmRldi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYixrQ0FBa0MsbUJBQU8sQ0FBQyxzSEFBNEM7QUFDdEYsNkJBQTZCLG1CQUFPLENBQUMsNEdBQXVDO0FBQzVFLFlBQVksbUJBQU8sQ0FBQyx3R0FBTzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxvQkFBb0I7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSw2QkFBNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsTmVzdGVkQ29tcG9zZXIuZGV2LmpzP2Y5ZmQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBMZXhpY2FsQ29sbGFib3JhdGlvbkNvbnRleHQgPSByZXF1aXJlKCdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29sbGFib3JhdGlvbkNvbnRleHQnKTtcbnZhciBMZXhpY2FsQ29tcG9zZXJDb250ZXh0ID0gcmVxdWlyZSgnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCcpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuZnVuY3Rpb24gTGV4aWNhbE5lc3RlZENvbXBvc2VyKHtcbiAgaW5pdGlhbEVkaXRvcixcbiAgY2hpbGRyZW4sXG4gIGluaXRpYWxOb2RlcyxcbiAgaW5pdGlhbFRoZW1lLFxuICBza2lwQ29sbGFiQ2hlY2tzXG59KSB7XG4gIGNvbnN0IHdhc0NvbGxhYlByZXZpb3VzbHlSZWFkeVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IHBhcmVudENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KExleGljYWxDb21wb3NlckNvbnRleHQuTGV4aWNhbENvbXBvc2VyQ29udGV4dCk7XG5cbiAgaWYgKHBhcmVudENvbnRleHQgPT0gbnVsbCkge1xuICAgIHtcbiAgICAgIHRocm93IEVycm9yKGBVbmV4cGVjdGVkIHBhcmVudCBjb250ZXh0IG51bGwgb24gYSBuZXN0ZWQgY29tcG9zZXJgKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBbcGFyZW50RWRpdG9yLCB7XG4gICAgZ2V0VGhlbWU6IGdldFBhcmVudFRoZW1lXG4gIH1dID0gcGFyZW50Q29udGV4dDtcbiAgY29uc3QgY29tcG9zZXJDb250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgY29tcG9zZXJUaGVtZSA9IGluaXRpYWxUaGVtZSB8fCBnZXRQYXJlbnRUaGVtZSgpIHx8IHVuZGVmaW5lZDtcbiAgICBjb25zdCBjb250ZXh0ID0gTGV4aWNhbENvbXBvc2VyQ29udGV4dC5jcmVhdGVMZXhpY2FsQ29tcG9zZXJDb250ZXh0KHBhcmVudENvbnRleHQsIGNvbXBvc2VyVGhlbWUpO1xuXG4gICAgaWYgKGNvbXBvc2VyVGhlbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaW5pdGlhbEVkaXRvci5fY29uZmlnLnRoZW1lID0gY29tcG9zZXJUaGVtZTtcbiAgICB9XG5cbiAgICBpbml0aWFsRWRpdG9yLl9wYXJlbnRFZGl0b3IgPSBwYXJlbnRFZGl0b3I7XG5cbiAgICBpZiAoIWluaXRpYWxOb2Rlcykge1xuICAgICAgY29uc3QgcGFyZW50Tm9kZXMgPSBpbml0aWFsRWRpdG9yLl9ub2RlcyA9IG5ldyBNYXAocGFyZW50RWRpdG9yLl9ub2Rlcyk7XG5cbiAgICAgIGZvciAoY29uc3QgW3R5cGUsIGVudHJ5XSBvZiBwYXJlbnROb2Rlcykge1xuICAgICAgICBpbml0aWFsRWRpdG9yLl9ub2Rlcy5zZXQodHlwZSwge1xuICAgICAgICAgIGtsYXNzOiBlbnRyeS5rbGFzcyxcbiAgICAgICAgICByZXBsYWNlOiBlbnRyeS5yZXBsYWNlLFxuICAgICAgICAgIHJlcGxhY2VXaXRoS2xhc3M6IGVudHJ5LnJlcGxhY2VXaXRoS2xhc3MsXG4gICAgICAgICAgdHJhbnNmb3JtczogbmV3IFNldCgpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IGtsYXNzIG9mIGluaXRpYWxOb2Rlcykge1xuICAgICAgICBjb25zdCB0eXBlID0ga2xhc3MuZ2V0VHlwZSgpO1xuXG4gICAgICAgIGluaXRpYWxFZGl0b3IuX25vZGVzLnNldCh0eXBlLCB7XG4gICAgICAgICAga2xhc3MsXG4gICAgICAgICAgcmVwbGFjZTogbnVsbCxcbiAgICAgICAgICByZXBsYWNlV2l0aEtsYXNzOiBudWxsLFxuICAgICAgICAgIHRyYW5zZm9ybXM6IG5ldyBTZXQoKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0aWFsRWRpdG9yLl9jb25maWcubmFtZXNwYWNlID0gcGFyZW50RWRpdG9yLl9jb25maWcubmFtZXNwYWNlO1xuICAgIGluaXRpYWxFZGl0b3IuX2VkaXRhYmxlID0gcGFyZW50RWRpdG9yLl9lZGl0YWJsZTtcbiAgICByZXR1cm4gW2luaXRpYWxFZGl0b3IsIGNvbnRleHRdO1xuICB9LCAvLyBXZSBvbmx5IGRvIHRoaXMgZm9yIGluaXRcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICBbXSk7IC8vIElmIGNvbGxhYm9yYXRpb24gaXMgZW5hYmxlZCwgbWFrZSBzdXJlIHdlIGRvbid0IHJlbmRlciB0aGUgY2hpbGRyZW4gdW50aWwgdGhlIGNvbGxhYm9yYXRpb24gc3ViZG9jdW1lbnQgaXMgcmVhZHkuXG5cbiAgY29uc3Qge1xuICAgIGlzQ29sbGFiQWN0aXZlLFxuICAgIHlqc0RvY01hcFxuICB9ID0gTGV4aWNhbENvbGxhYm9yYXRpb25Db250ZXh0LnVzZUNvbGxhYm9yYXRpb25Db250ZXh0KCk7XG4gIGNvbnN0IGlzQ29sbGFiUmVhZHkgPSBza2lwQ29sbGFiQ2hlY2tzIHx8IHdhc0NvbGxhYlByZXZpb3VzbHlSZWFkeVJlZi5jdXJyZW50IHx8IHlqc0RvY01hcC5oYXMoaW5pdGlhbEVkaXRvci5nZXRLZXkoKSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzQ29sbGFiUmVhZHkpIHtcbiAgICAgIHdhc0NvbGxhYlByZXZpb3VzbHlSZWFkeVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH0sIFtpc0NvbGxhYlJlYWR5XSk7IC8vIFVwZGF0ZSBgaXNFZGl0YWJsZWAgc3RhdGUgb2YgbmVzdGVkIGVkaXRvciBpbiByZXNwb25zZSB0byB0aGUgc2FtZSBjaGFuZ2Ugb24gcGFyZW50IGVkaXRvci5cblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiBwYXJlbnRFZGl0b3IucmVnaXN0ZXJFZGl0YWJsZUxpc3RlbmVyKGVkaXRhYmxlID0+IHtcbiAgICAgIGluaXRpYWxFZGl0b3Iuc2V0RWRpdGFibGUoZWRpdGFibGUpO1xuICAgIH0pO1xuICB9LCBbaW5pdGlhbEVkaXRvciwgcGFyZW50RWRpdG9yXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMZXhpY2FsQ29tcG9zZXJDb250ZXh0LkxleGljYWxDb21wb3NlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29tcG9zZXJDb250ZXh0XG4gIH0sICFpc0NvbGxhYkFjdGl2ZSB8fCBpc0NvbGxhYlJlYWR5ID8gY2hpbGRyZW4gOiBudWxsKTtcbn1cblxuZXhwb3J0cy5MZXhpY2FsTmVzdGVkQ29tcG9zZXIgPSBMZXhpY2FsTmVzdGVkQ29tcG9zZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalNestedComposer.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalNestedComposer.js":
/*!**************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalNestedComposer.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalNestedComposer =  true ? __webpack_require__(/*! ./LexicalNestedComposer.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalNestedComposer.dev.js\") : 0\nmodule.exports = LexicalNestedComposer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbE5lc3RlZENvbXBvc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osOEJBQThCLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyx3R0FBZ0MsSUFBSSxDQUEwQztBQUM3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxOZXN0ZWRDb21wb3Nlci5qcz8yNDQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsTmVzdGVkQ29tcG9zZXIgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbE5lc3RlZENvbXBvc2VyLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsTmVzdGVkQ29tcG9zZXIucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxOZXN0ZWRDb21wb3NlcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalNestedComposer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalPlainTextPlugin.dev.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalPlainTextPlugin.dev.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar useLexicalEditable = __webpack_require__(/*! @lexical/react/useLexicalEditable */ \"(ssr)/./node_modules/@lexical/react/useLexicalEditable.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar text = __webpack_require__(/*! @lexical/text */ \"(ssr)/./node_modules/@lexical/text/LexicalText.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar reactDom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar dragon = __webpack_require__(/*! @lexical/dragon */ \"(ssr)/./node_modules/@lexical/dragon/LexicalDragon.js\");\nvar plainText = __webpack_require__(/*! @lexical/plain-text */ \"(ssr)/./node_modules/@lexical/plain-text/LexicalPlainText.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst useLayoutEffectImpl = CAN_USE_DOM ? React.useLayoutEffect : React.useEffect;\nvar useLayoutEffect = useLayoutEffectImpl;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction canShowPlaceholderFromCurrentEditorState(editor) {\n  const currentCanShowPlaceholder = editor.getEditorState().read(text.$canShowPlaceholderCurry(editor.isComposing()));\n  return currentCanShowPlaceholder;\n}\n\nfunction useCanShowPlaceholder(editor) {\n  const [canShowPlaceholder, setCanShowPlaceholder] = React.useState(() => canShowPlaceholderFromCurrentEditorState(editor));\n  useLayoutEffect(() => {\n    function resetCanShowPlaceholder() {\n      const currentCanShowPlaceholder = canShowPlaceholderFromCurrentEditorState(editor);\n      setCanShowPlaceholder(currentCanShowPlaceholder);\n    }\n\n    resetCanShowPlaceholder();\n    return utils.mergeRegister(editor.registerUpdateListener(() => {\n      resetCanShowPlaceholder();\n    }), editor.registerEditableListener(() => {\n      resetCanShowPlaceholder();\n    }));\n  }, [editor]);\n  return canShowPlaceholder;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction useDecorators(editor, ErrorBoundary) {\n  const [decorators, setDecorators] = React.useState(() => editor.getDecorators()); // Subscribe to changes\n\n  useLayoutEffect(() => {\n    return editor.registerDecoratorListener(nextDecorators => {\n      reactDom.flushSync(() => {\n        setDecorators(nextDecorators);\n      });\n    });\n  }, [editor]);\n  React.useEffect(() => {\n    // If the content editable mounts before the subscription is added, then\n    // nothing will be rendered on initial pass. We can get around that by\n    // ensuring that we set the value.\n    setDecorators(editor.getDecorators());\n  }, [editor]); // Return decorators defined as React Portals\n\n  return React.useMemo(() => {\n    const decoratedPortals = [];\n    const decoratorKeys = Object.keys(decorators);\n\n    for (let i = 0; i < decoratorKeys.length; i++) {\n      const nodeKey = decoratorKeys[i];\n      const reactDecorator = /*#__PURE__*/React.createElement(ErrorBoundary, {\n        onError: e => editor._onError(e)\n      }, /*#__PURE__*/React.createElement(React.Suspense, {\n        fallback: null\n      }, decorators[nodeKey]));\n      const element = editor.getElementByKey(nodeKey);\n\n      if (element !== null) {\n        decoratedPortals.push( /*#__PURE__*/reactDom.createPortal(reactDecorator, element));\n      }\n    }\n\n    return decoratedPortals;\n  }, [ErrorBoundary, decorators, editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction usePlainTextSetup(editor) {\n  useLayoutEffect(() => {\n    return utils.mergeRegister(plainText.registerPlainText(editor), dragon.registerDragonSupport(editor)); // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction PlainTextPlugin({\n  contentEditable,\n  placeholder,\n  ErrorBoundary\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const decorators = useDecorators(editor, ErrorBoundary);\n  usePlainTextSetup(editor);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, contentEditable, /*#__PURE__*/React.createElement(Placeholder, {\n    content: placeholder\n  }), decorators);\n}\n\nfunction Placeholder({\n  content\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const showPlaceholder = useCanShowPlaceholder(editor);\n  const editable = useLexicalEditable();\n\n  if (!showPlaceholder) {\n    return null;\n  }\n\n  if (typeof content === 'function') {\n    return content(editable);\n  } else {\n    return content;\n  }\n}\n\nexports.PlainTextPlugin = PlainTextPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalPlainTextPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalPlainTextPlugin.js":
/*!***************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalPlainTextPlugin.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalPlainTextPlugin =  true ? __webpack_require__(/*! ./LexicalPlainTextPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalPlainTextPlugin.dev.js\") : 0\nmodule.exports = LexicalPlainTextPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFBsYWluVGV4dFBsdWdpbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLCtCQUErQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsMEdBQWlDLElBQUksQ0FBMkM7QUFDaEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsUGxhaW5UZXh0UGx1Z2luLmpzPzYzOTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxQbGFpblRleHRQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbFBsYWluVGV4dFBsdWdpbi5kZXYuanMnKSA6IHJlcXVpcmUoJy4vTGV4aWNhbFBsYWluVGV4dFBsdWdpbi5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbFBsYWluVGV4dFBsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalPlainTextPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalRichTextPlugin.dev.js":
/*!******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalRichTextPlugin.dev.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar useLexicalEditable = __webpack_require__(/*! @lexical/react/useLexicalEditable */ \"(ssr)/./node_modules/@lexical/react/useLexicalEditable.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar text = __webpack_require__(/*! @lexical/text */ \"(ssr)/./node_modules/@lexical/text/LexicalText.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar reactDom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar dragon = __webpack_require__(/*! @lexical/dragon */ \"(ssr)/./node_modules/@lexical/dragon/LexicalDragon.js\");\nvar richText = __webpack_require__(/*! @lexical/rich-text */ \"(ssr)/./node_modules/@lexical/rich-text/LexicalRichText.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst useLayoutEffectImpl = CAN_USE_DOM ? React.useLayoutEffect : React.useEffect;\nvar useLayoutEffect = useLayoutEffectImpl;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction canShowPlaceholderFromCurrentEditorState(editor) {\n  const currentCanShowPlaceholder = editor.getEditorState().read(text.$canShowPlaceholderCurry(editor.isComposing()));\n  return currentCanShowPlaceholder;\n}\n\nfunction useCanShowPlaceholder(editor) {\n  const [canShowPlaceholder, setCanShowPlaceholder] = React.useState(() => canShowPlaceholderFromCurrentEditorState(editor));\n  useLayoutEffect(() => {\n    function resetCanShowPlaceholder() {\n      const currentCanShowPlaceholder = canShowPlaceholderFromCurrentEditorState(editor);\n      setCanShowPlaceholder(currentCanShowPlaceholder);\n    }\n\n    resetCanShowPlaceholder();\n    return utils.mergeRegister(editor.registerUpdateListener(() => {\n      resetCanShowPlaceholder();\n    }), editor.registerEditableListener(() => {\n      resetCanShowPlaceholder();\n    }));\n  }, [editor]);\n  return canShowPlaceholder;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction useDecorators(editor, ErrorBoundary) {\n  const [decorators, setDecorators] = React.useState(() => editor.getDecorators()); // Subscribe to changes\n\n  useLayoutEffect(() => {\n    return editor.registerDecoratorListener(nextDecorators => {\n      reactDom.flushSync(() => {\n        setDecorators(nextDecorators);\n      });\n    });\n  }, [editor]);\n  React.useEffect(() => {\n    // If the content editable mounts before the subscription is added, then\n    // nothing will be rendered on initial pass. We can get around that by\n    // ensuring that we set the value.\n    setDecorators(editor.getDecorators());\n  }, [editor]); // Return decorators defined as React Portals\n\n  return React.useMemo(() => {\n    const decoratedPortals = [];\n    const decoratorKeys = Object.keys(decorators);\n\n    for (let i = 0; i < decoratorKeys.length; i++) {\n      const nodeKey = decoratorKeys[i];\n      const reactDecorator = /*#__PURE__*/React.createElement(ErrorBoundary, {\n        onError: e => editor._onError(e)\n      }, /*#__PURE__*/React.createElement(React.Suspense, {\n        fallback: null\n      }, decorators[nodeKey]));\n      const element = editor.getElementByKey(nodeKey);\n\n      if (element !== null) {\n        decoratedPortals.push( /*#__PURE__*/reactDom.createPortal(reactDecorator, element));\n      }\n    }\n\n    return decoratedPortals;\n  }, [ErrorBoundary, decorators, editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction useRichTextSetup(editor) {\n  useLayoutEffect(() => {\n    return utils.mergeRegister(richText.registerRichText(editor), dragon.registerDragonSupport(editor)); // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction RichTextPlugin({\n  contentEditable,\n  placeholder,\n  ErrorBoundary\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const decorators = useDecorators(editor, ErrorBoundary);\n  useRichTextSetup(editor);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, contentEditable, /*#__PURE__*/React.createElement(Placeholder, {\n    content: placeholder\n  }), decorators);\n}\n\nfunction Placeholder({\n  content\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const showPlaceholder = useCanShowPlaceholder(editor);\n  const editable = useLexicalEditable();\n\n  if (!showPlaceholder) {\n    return null;\n  }\n\n  if (typeof content === 'function') {\n    return content(editable);\n  } else {\n    return content;\n  }\n}\n\nexports.RichTextPlugin = RichTextPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalRichTextPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalRichTextPlugin.js":
/*!**************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalRichTextPlugin.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalRichTextPlugin =  true ? __webpack_require__(/*! ./LexicalRichTextPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalRichTextPlugin.dev.js\") : 0\nmodule.exports = LexicalRichTextPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFJpY2hUZXh0UGx1Z2luLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osOEJBQThCLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyx3R0FBZ0MsSUFBSSxDQUEwQztBQUM3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxSaWNoVGV4dFBsdWdpbi5qcz8zMzZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsUmljaFRleHRQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbFJpY2hUZXh0UGx1Z2luLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsUmljaFRleHRQbHVnaW4ucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxSaWNoVGV4dFBsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalRichTextPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalTabIndentationPlugin.dev.js":
/*!************************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalTabIndentationPlugin.dev.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/**\n * This plugin adds the ability to indent content using the tab key. Generally, we don't\n * recommend using this plugin as it could negatively affect acessibility for keyboard\n * users, causing focus to become trapped within the editor.\n */\n\nfunction TabIndentationPlugin() {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    return editor.registerCommand(lexical.KEY_TAB_COMMAND, event => {\n      const selection = lexical.$getSelection();\n\n      if (!lexical.$isRangeSelection(selection)) {\n        return false;\n      }\n\n      event.preventDefault();\n      return editor.dispatchCommand(event.shiftKey ? lexical.OUTDENT_CONTENT_COMMAND : lexical.INDENT_CONTENT_COMMAND, undefined);\n    }, lexical.COMMAND_PRIORITY_EDITOR);\n  });\n  return null;\n}\n\nexports.TabIndentationPlugin = TabIndentationPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFRhYkluZGVudGF0aW9uUGx1Z2luLmRldi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyw0R0FBdUM7QUFDNUUsY0FBYyxtQkFBTyxDQUFDLHdEQUFTO0FBQy9CLFlBQVksbUJBQU8sQ0FBQyx3R0FBTzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7O0FBRUEsNEJBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFRhYkluZGVudGF0aW9uUGx1Z2luLmRldi5qcz85ZWUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTGV4aWNhbENvbXBvc2VyQ29udGV4dCA9IHJlcXVpcmUoJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnKTtcbnZhciBsZXhpY2FsID0gcmVxdWlyZSgnbGV4aWNhbCcpO1xudmFyIHJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuLyoqXG4gKiBUaGlzIHBsdWdpbiBhZGRzIHRoZSBhYmlsaXR5IHRvIGluZGVudCBjb250ZW50IHVzaW5nIHRoZSB0YWIga2V5LiBHZW5lcmFsbHksIHdlIGRvbid0XG4gKiByZWNvbW1lbmQgdXNpbmcgdGhpcyBwbHVnaW4gYXMgaXQgY291bGQgbmVnYXRpdmVseSBhZmZlY3QgYWNlc3NpYmlsaXR5IGZvciBrZXlib2FyZFxuICogdXNlcnMsIGNhdXNpbmcgZm9jdXMgdG8gYmVjb21lIHRyYXBwZWQgd2l0aGluIHRoZSBlZGl0b3IuXG4gKi9cblxuZnVuY3Rpb24gVGFiSW5kZW50YXRpb25QbHVnaW4oKSB7XG4gIGNvbnN0IFtlZGl0b3JdID0gTGV4aWNhbENvbXBvc2VyQ29udGV4dC51c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KCk7XG4gIHJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuIGVkaXRvci5yZWdpc3RlckNvbW1hbmQobGV4aWNhbC5LRVlfVEFCX0NPTU1BTkQsIGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGxleGljYWwuJGdldFNlbGVjdGlvbigpO1xuXG4gICAgICBpZiAoIWxleGljYWwuJGlzUmFuZ2VTZWxlY3Rpb24oc2VsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gZWRpdG9yLmRpc3BhdGNoQ29tbWFuZChldmVudC5zaGlmdEtleSA/IGxleGljYWwuT1VUREVOVF9DT05URU5UX0NPTU1BTkQgOiBsZXhpY2FsLklOREVOVF9DT05URU5UX0NPTU1BTkQsIHVuZGVmaW5lZCk7XG4gICAgfSwgbGV4aWNhbC5DT01NQU5EX1BSSU9SSVRZX0VESVRPUik7XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0cy5UYWJJbmRlbnRhdGlvblBsdWdpbiA9IFRhYkluZGVudGF0aW9uUGx1Z2luO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalTabIndentationPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalTabIndentationPlugin.js":
/*!********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalTabIndentationPlugin.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalTabIndentationPlugin =  true ? __webpack_require__(/*! ./LexicalTabIndentationPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalTabIndentationPlugin.dev.js\") : 0\nmodule.exports = LexicalTabIndentationPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFRhYkluZGVudGF0aW9uUGx1Z2luLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osb0NBQW9DLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyxvSEFBc0MsSUFBSSxDQUFnRDtBQUMvSyIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxUYWJJbmRlbnRhdGlvblBsdWdpbi5qcz9lOTAzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsVGFiSW5kZW50YXRpb25QbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbFRhYkluZGVudGF0aW9uUGx1Z2luLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsVGFiSW5kZW50YXRpb25QbHVnaW4ucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxUYWJJbmRlbnRhdGlvblBsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalTabIndentationPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalTableOfContents.dev.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalTableOfContents.dev.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar richText = __webpack_require__(/*! @lexical/rich-text */ \"(ssr)/./node_modules/@lexical/rich-text/LexicalRichText.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction toEntry(heading) {\n  return [heading.getKey(), heading.getTextContent(), heading.getTag()];\n}\n\nfunction $insertHeadingIntoTableOfContents(prevHeading, newHeading, currentTableOfContents) {\n  if (newHeading === null) {\n    return currentTableOfContents;\n  }\n\n  const newEntry = toEntry(newHeading);\n  let newTableOfContents = [];\n\n  if (prevHeading === null) {\n    newTableOfContents = [newEntry, ...currentTableOfContents];\n  } else {\n    for (let i = 0; i < currentTableOfContents.length; i++) {\n      const key = currentTableOfContents[i][0];\n      newTableOfContents.push(currentTableOfContents[i]);\n\n      if (key === prevHeading.getKey() && key !== newHeading.getKey()) {\n        newTableOfContents.push(newEntry);\n      }\n    }\n  }\n\n  return newTableOfContents;\n}\n\nfunction $deleteHeadingFromTableOfContents(key, currentTableOfContents) {\n  const newTableOfContents = [];\n\n  for (const heading of currentTableOfContents) {\n    if (heading[0] !== key) {\n      newTableOfContents.push(heading);\n    }\n  }\n\n  return newTableOfContents;\n}\n\nfunction $updateHeadingInTableOfContents(heading, currentTableOfContents) {\n  const newTableOfContents = [];\n\n  for (const oldHeading of currentTableOfContents) {\n    if (oldHeading[0] === heading.getKey()) {\n      newTableOfContents.push(toEntry(heading));\n    } else {\n      newTableOfContents.push(oldHeading);\n    }\n  }\n\n  return newTableOfContents;\n}\n/**\n * Returns the updated table of contents, placing the given `heading` before the given `prevHeading`. If `prevHeading`\n * is undefined, `heading` is placed at the start of table of contents\n */\n\n\nfunction $updateHeadingPosition(prevHeading, heading, currentTableOfContents) {\n  const newTableOfContents = [];\n  const newEntry = toEntry(heading);\n\n  if (!prevHeading) {\n    newTableOfContents.push(newEntry);\n  }\n\n  for (const oldHeading of currentTableOfContents) {\n    if (oldHeading[0] === heading.getKey()) {\n      continue;\n    }\n\n    newTableOfContents.push(oldHeading);\n\n    if (prevHeading && oldHeading[0] === prevHeading.getKey()) {\n      newTableOfContents.push(newEntry);\n    }\n  }\n\n  return newTableOfContents;\n}\n\nfunction LexicalTableOfContentsPlugin({\n  children\n}) {\n  const [tableOfContents, setTableOfContents] = react.useState([]);\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    // Set table of contents initial state\n    let currentTableOfContents = [];\n    editor.getEditorState().read(() => {\n      const root = lexical.$getRoot();\n      const rootChildren = root.getChildren();\n\n      for (const child of rootChildren) {\n        if (richText.$isHeadingNode(child)) {\n          currentTableOfContents.push([child.getKey(), child.getTextContent(), child.getTag()]);\n        }\n      }\n\n      setTableOfContents(currentTableOfContents);\n    }); // Listen to updates to heading mutations and update state\n\n    const removeHeaderMutationListener = editor.registerMutationListener(richText.HeadingNode, mutatedNodes => {\n      editor.getEditorState().read(() => {\n        for (const [nodeKey, mutation] of mutatedNodes) {\n          if (mutation === 'created') {\n            const newHeading = lexical.$getNodeByKey(nodeKey);\n\n            if (newHeading !== null) {\n              let prevHeading = newHeading.getPreviousSibling();\n\n              while (prevHeading !== null && !richText.$isHeadingNode(prevHeading)) {\n                prevHeading = prevHeading.getPreviousSibling();\n              }\n\n              currentTableOfContents = $insertHeadingIntoTableOfContents(prevHeading, newHeading, currentTableOfContents);\n            }\n          } else if (mutation === 'destroyed') {\n            currentTableOfContents = $deleteHeadingFromTableOfContents(nodeKey, currentTableOfContents);\n          } else if (mutation === 'updated') {\n            const newHeading = lexical.$getNodeByKey(nodeKey);\n\n            if (newHeading !== null) {\n              let prevHeading = newHeading.getPreviousSibling();\n\n              while (prevHeading !== null && !richText.$isHeadingNode(prevHeading)) {\n                prevHeading = prevHeading.getPreviousSibling();\n              }\n\n              currentTableOfContents = $updateHeadingPosition(prevHeading, newHeading, currentTableOfContents);\n            }\n          }\n        }\n\n        setTableOfContents(currentTableOfContents);\n      });\n    }); // Listen to text node mutation updates\n\n    const removeTextNodeMutationListener = editor.registerMutationListener(lexical.TextNode, mutatedNodes => {\n      editor.getEditorState().read(() => {\n        for (const [nodeKey, mutation] of mutatedNodes) {\n          if (mutation === 'updated') {\n            const currNode = lexical.$getNodeByKey(nodeKey);\n\n            if (currNode !== null) {\n              const parentNode = currNode.getParentOrThrow();\n\n              if (richText.$isHeadingNode(parentNode)) {\n                currentTableOfContents = $updateHeadingInTableOfContents(parentNode, currentTableOfContents);\n                setTableOfContents(currentTableOfContents);\n              }\n            }\n          }\n        }\n      });\n    });\n    return () => {\n      removeHeaderMutationListener();\n      removeTextNodeMutationListener();\n    };\n  }, [editor]);\n  return children(tableOfContents, editor);\n}\n\nmodule.exports = LexicalTableOfContentsPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFRhYmxlT2ZDb250ZW50cy5kZXYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7O0FBRWIsNkJBQTZCLG1CQUFPLENBQUMsNEdBQXVDO0FBQzVFLGVBQWUsbUJBQU8sQ0FBQyxzRkFBb0I7QUFDM0MsY0FBYyxtQkFBTyxDQUFDLHdEQUFTO0FBQy9CLFlBQVksbUJBQU8sQ0FBQyx3R0FBTzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSixvQkFBb0IsbUNBQW1DO0FBQ3ZEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUssR0FBRzs7QUFFUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1AsS0FBSyxHQUFHOztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxUYWJsZU9mQ29udGVudHMuZGV2LmpzP2I4MmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBMZXhpY2FsQ29tcG9zZXJDb250ZXh0ID0gcmVxdWlyZSgnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCcpO1xudmFyIHJpY2hUZXh0ID0gcmVxdWlyZSgnQGxleGljYWwvcmljaC10ZXh0Jyk7XG52YXIgbGV4aWNhbCA9IHJlcXVpcmUoJ2xleGljYWwnKTtcbnZhciByZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gdG9FbnRyeShoZWFkaW5nKSB7XG4gIHJldHVybiBbaGVhZGluZy5nZXRLZXkoKSwgaGVhZGluZy5nZXRUZXh0Q29udGVudCgpLCBoZWFkaW5nLmdldFRhZygpXTtcbn1cblxuZnVuY3Rpb24gJGluc2VydEhlYWRpbmdJbnRvVGFibGVPZkNvbnRlbnRzKHByZXZIZWFkaW5nLCBuZXdIZWFkaW5nLCBjdXJyZW50VGFibGVPZkNvbnRlbnRzKSB7XG4gIGlmIChuZXdIZWFkaW5nID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRUYWJsZU9mQ29udGVudHM7XG4gIH1cblxuICBjb25zdCBuZXdFbnRyeSA9IHRvRW50cnkobmV3SGVhZGluZyk7XG4gIGxldCBuZXdUYWJsZU9mQ29udGVudHMgPSBbXTtcblxuICBpZiAocHJldkhlYWRpbmcgPT09IG51bGwpIHtcbiAgICBuZXdUYWJsZU9mQ29udGVudHMgPSBbbmV3RW50cnksIC4uLmN1cnJlbnRUYWJsZU9mQ29udGVudHNdO1xuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFRhYmxlT2ZDb250ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gY3VycmVudFRhYmxlT2ZDb250ZW50c1tpXVswXTtcbiAgICAgIG5ld1RhYmxlT2ZDb250ZW50cy5wdXNoKGN1cnJlbnRUYWJsZU9mQ29udGVudHNbaV0pO1xuXG4gICAgICBpZiAoa2V5ID09PSBwcmV2SGVhZGluZy5nZXRLZXkoKSAmJiBrZXkgIT09IG5ld0hlYWRpbmcuZ2V0S2V5KCkpIHtcbiAgICAgICAgbmV3VGFibGVPZkNvbnRlbnRzLnB1c2gobmV3RW50cnkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdUYWJsZU9mQ29udGVudHM7XG59XG5cbmZ1bmN0aW9uICRkZWxldGVIZWFkaW5nRnJvbVRhYmxlT2ZDb250ZW50cyhrZXksIGN1cnJlbnRUYWJsZU9mQ29udGVudHMpIHtcbiAgY29uc3QgbmV3VGFibGVPZkNvbnRlbnRzID0gW107XG5cbiAgZm9yIChjb25zdCBoZWFkaW5nIG9mIGN1cnJlbnRUYWJsZU9mQ29udGVudHMpIHtcbiAgICBpZiAoaGVhZGluZ1swXSAhPT0ga2V5KSB7XG4gICAgICBuZXdUYWJsZU9mQ29udGVudHMucHVzaChoZWFkaW5nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3VGFibGVPZkNvbnRlbnRzO1xufVxuXG5mdW5jdGlvbiAkdXBkYXRlSGVhZGluZ0luVGFibGVPZkNvbnRlbnRzKGhlYWRpbmcsIGN1cnJlbnRUYWJsZU9mQ29udGVudHMpIHtcbiAgY29uc3QgbmV3VGFibGVPZkNvbnRlbnRzID0gW107XG5cbiAgZm9yIChjb25zdCBvbGRIZWFkaW5nIG9mIGN1cnJlbnRUYWJsZU9mQ29udGVudHMpIHtcbiAgICBpZiAob2xkSGVhZGluZ1swXSA9PT0gaGVhZGluZy5nZXRLZXkoKSkge1xuICAgICAgbmV3VGFibGVPZkNvbnRlbnRzLnB1c2godG9FbnRyeShoZWFkaW5nKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1RhYmxlT2ZDb250ZW50cy5wdXNoKG9sZEhlYWRpbmcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdUYWJsZU9mQ29udGVudHM7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHVwZGF0ZWQgdGFibGUgb2YgY29udGVudHMsIHBsYWNpbmcgdGhlIGdpdmVuIGBoZWFkaW5nYCBiZWZvcmUgdGhlIGdpdmVuIGBwcmV2SGVhZGluZ2AuIElmIGBwcmV2SGVhZGluZ2BcbiAqIGlzIHVuZGVmaW5lZCwgYGhlYWRpbmdgIGlzIHBsYWNlZCBhdCB0aGUgc3RhcnQgb2YgdGFibGUgb2YgY29udGVudHNcbiAqL1xuXG5cbmZ1bmN0aW9uICR1cGRhdGVIZWFkaW5nUG9zaXRpb24ocHJldkhlYWRpbmcsIGhlYWRpbmcsIGN1cnJlbnRUYWJsZU9mQ29udGVudHMpIHtcbiAgY29uc3QgbmV3VGFibGVPZkNvbnRlbnRzID0gW107XG4gIGNvbnN0IG5ld0VudHJ5ID0gdG9FbnRyeShoZWFkaW5nKTtcblxuICBpZiAoIXByZXZIZWFkaW5nKSB7XG4gICAgbmV3VGFibGVPZkNvbnRlbnRzLnB1c2gobmV3RW50cnkpO1xuICB9XG5cbiAgZm9yIChjb25zdCBvbGRIZWFkaW5nIG9mIGN1cnJlbnRUYWJsZU9mQ29udGVudHMpIHtcbiAgICBpZiAob2xkSGVhZGluZ1swXSA9PT0gaGVhZGluZy5nZXRLZXkoKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbmV3VGFibGVPZkNvbnRlbnRzLnB1c2gob2xkSGVhZGluZyk7XG5cbiAgICBpZiAocHJldkhlYWRpbmcgJiYgb2xkSGVhZGluZ1swXSA9PT0gcHJldkhlYWRpbmcuZ2V0S2V5KCkpIHtcbiAgICAgIG5ld1RhYmxlT2ZDb250ZW50cy5wdXNoKG5ld0VudHJ5KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3VGFibGVPZkNvbnRlbnRzO1xufVxuXG5mdW5jdGlvbiBMZXhpY2FsVGFibGVPZkNvbnRlbnRzUGx1Z2luKHtcbiAgY2hpbGRyZW5cbn0pIHtcbiAgY29uc3QgW3RhYmxlT2ZDb250ZW50cywgc2V0VGFibGVPZkNvbnRlbnRzXSA9IHJlYWN0LnVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW2VkaXRvcl0gPSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0LnVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgcmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBTZXQgdGFibGUgb2YgY29udGVudHMgaW5pdGlhbCBzdGF0ZVxuICAgIGxldCBjdXJyZW50VGFibGVPZkNvbnRlbnRzID0gW107XG4gICAgZWRpdG9yLmdldEVkaXRvclN0YXRlKCkucmVhZCgoKSA9PiB7XG4gICAgICBjb25zdCByb290ID0gbGV4aWNhbC4kZ2V0Um9vdCgpO1xuICAgICAgY29uc3Qgcm9vdENoaWxkcmVuID0gcm9vdC5nZXRDaGlsZHJlbigpO1xuXG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHJvb3RDaGlsZHJlbikge1xuICAgICAgICBpZiAocmljaFRleHQuJGlzSGVhZGluZ05vZGUoY2hpbGQpKSB7XG4gICAgICAgICAgY3VycmVudFRhYmxlT2ZDb250ZW50cy5wdXNoKFtjaGlsZC5nZXRLZXkoKSwgY2hpbGQuZ2V0VGV4dENvbnRlbnQoKSwgY2hpbGQuZ2V0VGFnKCldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZXRUYWJsZU9mQ29udGVudHMoY3VycmVudFRhYmxlT2ZDb250ZW50cyk7XG4gICAgfSk7IC8vIExpc3RlbiB0byB1cGRhdGVzIHRvIGhlYWRpbmcgbXV0YXRpb25zIGFuZCB1cGRhdGUgc3RhdGVcblxuICAgIGNvbnN0IHJlbW92ZUhlYWRlck11dGF0aW9uTGlzdGVuZXIgPSBlZGl0b3IucmVnaXN0ZXJNdXRhdGlvbkxpc3RlbmVyKHJpY2hUZXh0LkhlYWRpbmdOb2RlLCBtdXRhdGVkTm9kZXMgPT4ge1xuICAgICAgZWRpdG9yLmdldEVkaXRvclN0YXRlKCkucmVhZCgoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgW25vZGVLZXksIG11dGF0aW9uXSBvZiBtdXRhdGVkTm9kZXMpIHtcbiAgICAgICAgICBpZiAobXV0YXRpb24gPT09ICdjcmVhdGVkJykge1xuICAgICAgICAgICAgY29uc3QgbmV3SGVhZGluZyA9IGxleGljYWwuJGdldE5vZGVCeUtleShub2RlS2V5KTtcblxuICAgICAgICAgICAgaWYgKG5ld0hlYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgbGV0IHByZXZIZWFkaW5nID0gbmV3SGVhZGluZy5nZXRQcmV2aW91c1NpYmxpbmcoKTtcblxuICAgICAgICAgICAgICB3aGlsZSAocHJldkhlYWRpbmcgIT09IG51bGwgJiYgIXJpY2hUZXh0LiRpc0hlYWRpbmdOb2RlKHByZXZIZWFkaW5nKSkge1xuICAgICAgICAgICAgICAgIHByZXZIZWFkaW5nID0gcHJldkhlYWRpbmcuZ2V0UHJldmlvdXNTaWJsaW5nKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjdXJyZW50VGFibGVPZkNvbnRlbnRzID0gJGluc2VydEhlYWRpbmdJbnRvVGFibGVPZkNvbnRlbnRzKHByZXZIZWFkaW5nLCBuZXdIZWFkaW5nLCBjdXJyZW50VGFibGVPZkNvbnRlbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKG11dGF0aW9uID09PSAnZGVzdHJveWVkJykge1xuICAgICAgICAgICAgY3VycmVudFRhYmxlT2ZDb250ZW50cyA9ICRkZWxldGVIZWFkaW5nRnJvbVRhYmxlT2ZDb250ZW50cyhub2RlS2V5LCBjdXJyZW50VGFibGVPZkNvbnRlbnRzKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG11dGF0aW9uID09PSAndXBkYXRlZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0hlYWRpbmcgPSBsZXhpY2FsLiRnZXROb2RlQnlLZXkobm9kZUtleSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdIZWFkaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGxldCBwcmV2SGVhZGluZyA9IG5ld0hlYWRpbmcuZ2V0UHJldmlvdXNTaWJsaW5nKCk7XG5cbiAgICAgICAgICAgICAgd2hpbGUgKHByZXZIZWFkaW5nICE9PSBudWxsICYmICFyaWNoVGV4dC4kaXNIZWFkaW5nTm9kZShwcmV2SGVhZGluZykpIHtcbiAgICAgICAgICAgICAgICBwcmV2SGVhZGluZyA9IHByZXZIZWFkaW5nLmdldFByZXZpb3VzU2libGluZygpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY3VycmVudFRhYmxlT2ZDb250ZW50cyA9ICR1cGRhdGVIZWFkaW5nUG9zaXRpb24ocHJldkhlYWRpbmcsIG5ld0hlYWRpbmcsIGN1cnJlbnRUYWJsZU9mQ29udGVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRhYmxlT2ZDb250ZW50cyhjdXJyZW50VGFibGVPZkNvbnRlbnRzKTtcbiAgICAgIH0pO1xuICAgIH0pOyAvLyBMaXN0ZW4gdG8gdGV4dCBub2RlIG11dGF0aW9uIHVwZGF0ZXNcblxuICAgIGNvbnN0IHJlbW92ZVRleHROb2RlTXV0YXRpb25MaXN0ZW5lciA9IGVkaXRvci5yZWdpc3Rlck11dGF0aW9uTGlzdGVuZXIobGV4aWNhbC5UZXh0Tm9kZSwgbXV0YXRlZE5vZGVzID0+IHtcbiAgICAgIGVkaXRvci5nZXRFZGl0b3JTdGF0ZSgpLnJlYWQoKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IFtub2RlS2V5LCBtdXRhdGlvbl0gb2YgbXV0YXRlZE5vZGVzKSB7XG4gICAgICAgICAgaWYgKG11dGF0aW9uID09PSAndXBkYXRlZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJOb2RlID0gbGV4aWNhbC4kZ2V0Tm9kZUJ5S2V5KG5vZGVLZXkpO1xuXG4gICAgICAgICAgICBpZiAoY3Vyck5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgY29uc3QgcGFyZW50Tm9kZSA9IGN1cnJOb2RlLmdldFBhcmVudE9yVGhyb3coKTtcblxuICAgICAgICAgICAgICBpZiAocmljaFRleHQuJGlzSGVhZGluZ05vZGUocGFyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGFibGVPZkNvbnRlbnRzID0gJHVwZGF0ZUhlYWRpbmdJblRhYmxlT2ZDb250ZW50cyhwYXJlbnROb2RlLCBjdXJyZW50VGFibGVPZkNvbnRlbnRzKTtcbiAgICAgICAgICAgICAgICBzZXRUYWJsZU9mQ29udGVudHMoY3VycmVudFRhYmxlT2ZDb250ZW50cyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICByZW1vdmVIZWFkZXJNdXRhdGlvbkxpc3RlbmVyKCk7XG4gICAgICByZW1vdmVUZXh0Tm9kZU11dGF0aW9uTGlzdGVuZXIoKTtcbiAgICB9O1xuICB9LCBbZWRpdG9yXSk7XG4gIHJldHVybiBjaGlsZHJlbih0YWJsZU9mQ29udGVudHMsIGVkaXRvcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbFRhYmxlT2ZDb250ZW50c1BsdWdpbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalTableOfContents.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalTableOfContents.js":
/*!***************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalTableOfContents.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalTableOfContents =  true ? __webpack_require__(/*! ./LexicalTableOfContents.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalTableOfContents.dev.js\") : 0\nmodule.exports = LexicalTableOfContents;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFRhYmxlT2ZDb250ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLCtCQUErQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsMEdBQWlDLElBQUksQ0FBMkM7QUFDaEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsVGFibGVPZkNvbnRlbnRzLmpzP2E0MzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxUYWJsZU9mQ29udGVudHMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbFRhYmxlT2ZDb250ZW50cy5kZXYuanMnKSA6IHJlcXVpcmUoJy4vTGV4aWNhbFRhYmxlT2ZDb250ZW50cy5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbFRhYmxlT2ZDb250ZW50czsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalTableOfContents.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalTablePlugin.dev.js":
/*!***************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalTablePlugin.dev.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar table = __webpack_require__(/*! @lexical/table */ \"(ssr)/./node_modules/@lexical/table/LexicalTable.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction TablePlugin() {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    if (!editor.hasNodes([table.TableNode, table.TableCellNode, table.TableRowNode])) {\n      {\n        throw Error(`TablePlugin: TableNode, TableCellNode or TableRowNode not registered on editor`);\n      }\n    }\n\n    return editor.registerCommand(table.INSERT_TABLE_COMMAND, ({\n      columns,\n      rows,\n      includeHeaders\n    }) => {\n      const selection = lexical.$getSelection();\n\n      if (!lexical.$isRangeSelection(selection)) {\n        return true;\n      }\n\n      const focus = selection.focus;\n      const focusNode = focus.getNode();\n\n      if (focusNode !== null) {\n        const tableNode = table.$createTableNodeWithDimensions(Number(rows), Number(columns), includeHeaders);\n\n        if (lexical.$isRootOrShadowRoot(focusNode)) {\n          const target = focusNode.getChildAtIndex(focus.offset);\n\n          if (target !== null) {\n            target.insertBefore(tableNode);\n          } else {\n            focusNode.append(tableNode);\n          }\n\n          tableNode.insertBefore(lexical.$createParagraphNode());\n        } else {\n          const topLevelNode = focusNode.getTopLevelElementOrThrow();\n          topLevelNode.insertAfter(tableNode);\n        }\n\n        tableNode.insertAfter(lexical.$createParagraphNode());\n        const firstCell = tableNode.getFirstChildOrThrow().getFirstChildOrThrow();\n        firstCell.select();\n      }\n\n      return true;\n    }, lexical.COMMAND_PRIORITY_EDITOR);\n  }, [editor]);\n  react.useEffect(() => {\n    const tableSelections = new Map();\n\n    const initializeTableNode = tableNode => {\n      const nodeKey = tableNode.getKey();\n      const tableElement = editor.getElementByKey(nodeKey);\n\n      if (tableElement && !tableSelections.has(nodeKey)) {\n        const tableSelection = table.applyTableHandlers(tableNode, tableElement, editor);\n        tableSelections.set(nodeKey, tableSelection);\n      }\n    }; // Plugins might be loaded _after_ initial content is set, hence existing table nodes\n    // won't be initialized from mutation[create] listener. Instead doing it here,\n\n\n    editor.getEditorState().read(() => {\n      const tableNodes = lexical.$nodesOfType(table.TableNode);\n\n      for (const tableNode of tableNodes) {\n        if (table.$isTableNode(tableNode)) {\n          initializeTableNode(tableNode);\n        }\n      }\n    });\n    const unregisterMutationListener = editor.registerMutationListener(table.TableNode, nodeMutations => {\n      for (const [nodeKey, mutation] of nodeMutations) {\n        if (mutation === 'created') {\n          editor.getEditorState().read(() => {\n            const tableNode = lexical.$getNodeByKey(nodeKey);\n\n            if (table.$isTableNode(tableNode)) {\n              initializeTableNode(tableNode);\n            }\n          });\n        } else if (mutation === 'destroyed') {\n          const tableSelection = tableSelections.get(nodeKey);\n\n          if (tableSelection !== undefined) {\n            tableSelection.removeListeners();\n            tableSelections.delete(nodeKey);\n          }\n        }\n      }\n    });\n    return () => {\n      unregisterMutationListener(); // Hook might be called multiple times so cleaning up tables listeners as well,\n      // as it'll be reinitialized during recurring call\n\n      for (const [, tableSelection] of tableSelections) {\n        tableSelection.removeListeners();\n      }\n    };\n  }, [editor]);\n  return null;\n}\n\nexports.TablePlugin = TablePlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFRhYmxlUGx1Z2luLmRldi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyw0R0FBdUM7QUFDNUUsWUFBWSxtQkFBTyxDQUFDLDJFQUFnQjtBQUNwQyxjQUFjLG1CQUFPLENBQUMsd0RBQVM7QUFDL0IsWUFBWSxtQkFBTyxDQUFDLHdHQUFPOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLG9DQUFvQztBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxUYWJsZVBsdWdpbi5kZXYuanM/YThkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIExleGljYWxDb21wb3NlckNvbnRleHQgPSByZXF1aXJlKCdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXJDb250ZXh0Jyk7XG52YXIgdGFibGUgPSByZXF1aXJlKCdAbGV4aWNhbC90YWJsZScpO1xudmFyIGxleGljYWwgPSByZXF1aXJlKCdsZXhpY2FsJyk7XG52YXIgcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5mdW5jdGlvbiBUYWJsZVBsdWdpbigpIHtcbiAgY29uc3QgW2VkaXRvcl0gPSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0LnVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgcmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWVkaXRvci5oYXNOb2RlcyhbdGFibGUuVGFibGVOb2RlLCB0YWJsZS5UYWJsZUNlbGxOb2RlLCB0YWJsZS5UYWJsZVJvd05vZGVdKSkge1xuICAgICAge1xuICAgICAgICB0aHJvdyBFcnJvcihgVGFibGVQbHVnaW46IFRhYmxlTm9kZSwgVGFibGVDZWxsTm9kZSBvciBUYWJsZVJvd05vZGUgbm90IHJlZ2lzdGVyZWQgb24gZWRpdG9yYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVkaXRvci5yZWdpc3RlckNvbW1hbmQodGFibGUuSU5TRVJUX1RBQkxFX0NPTU1BTkQsICh7XG4gICAgICBjb2x1bW5zLFxuICAgICAgcm93cyxcbiAgICAgIGluY2x1ZGVIZWFkZXJzXG4gICAgfSkgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0aW9uID0gbGV4aWNhbC4kZ2V0U2VsZWN0aW9uKCk7XG5cbiAgICAgIGlmICghbGV4aWNhbC4kaXNSYW5nZVNlbGVjdGlvbihzZWxlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmb2N1cyA9IHNlbGVjdGlvbi5mb2N1cztcbiAgICAgIGNvbnN0IGZvY3VzTm9kZSA9IGZvY3VzLmdldE5vZGUoKTtcblxuICAgICAgaWYgKGZvY3VzTm9kZSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCB0YWJsZU5vZGUgPSB0YWJsZS4kY3JlYXRlVGFibGVOb2RlV2l0aERpbWVuc2lvbnMoTnVtYmVyKHJvd3MpLCBOdW1iZXIoY29sdW1ucyksIGluY2x1ZGVIZWFkZXJzKTtcblxuICAgICAgICBpZiAobGV4aWNhbC4kaXNSb290T3JTaGFkb3dSb290KGZvY3VzTm9kZSkpIHtcbiAgICAgICAgICBjb25zdCB0YXJnZXQgPSBmb2N1c05vZGUuZ2V0Q2hpbGRBdEluZGV4KGZvY3VzLm9mZnNldCk7XG5cbiAgICAgICAgICBpZiAodGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKHRhYmxlTm9kZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvY3VzTm9kZS5hcHBlbmQodGFibGVOb2RlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0YWJsZU5vZGUuaW5zZXJ0QmVmb3JlKGxleGljYWwuJGNyZWF0ZVBhcmFncmFwaE5vZGUoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdG9wTGV2ZWxOb2RlID0gZm9jdXNOb2RlLmdldFRvcExldmVsRWxlbWVudE9yVGhyb3coKTtcbiAgICAgICAgICB0b3BMZXZlbE5vZGUuaW5zZXJ0QWZ0ZXIodGFibGVOb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhYmxlTm9kZS5pbnNlcnRBZnRlcihsZXhpY2FsLiRjcmVhdGVQYXJhZ3JhcGhOb2RlKCkpO1xuICAgICAgICBjb25zdCBmaXJzdENlbGwgPSB0YWJsZU5vZGUuZ2V0Rmlyc3RDaGlsZE9yVGhyb3coKS5nZXRGaXJzdENoaWxkT3JUaHJvdygpO1xuICAgICAgICBmaXJzdENlbGwuc2VsZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sIGxleGljYWwuQ09NTUFORF9QUklPUklUWV9FRElUT1IpO1xuICB9LCBbZWRpdG9yXSk7XG4gIHJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdGFibGVTZWxlY3Rpb25zID0gbmV3IE1hcCgpO1xuXG4gICAgY29uc3QgaW5pdGlhbGl6ZVRhYmxlTm9kZSA9IHRhYmxlTm9kZSA9PiB7XG4gICAgICBjb25zdCBub2RlS2V5ID0gdGFibGVOb2RlLmdldEtleSgpO1xuICAgICAgY29uc3QgdGFibGVFbGVtZW50ID0gZWRpdG9yLmdldEVsZW1lbnRCeUtleShub2RlS2V5KTtcblxuICAgICAgaWYgKHRhYmxlRWxlbWVudCAmJiAhdGFibGVTZWxlY3Rpb25zLmhhcyhub2RlS2V5KSkge1xuICAgICAgICBjb25zdCB0YWJsZVNlbGVjdGlvbiA9IHRhYmxlLmFwcGx5VGFibGVIYW5kbGVycyh0YWJsZU5vZGUsIHRhYmxlRWxlbWVudCwgZWRpdG9yKTtcbiAgICAgICAgdGFibGVTZWxlY3Rpb25zLnNldChub2RlS2V5LCB0YWJsZVNlbGVjdGlvbik7XG4gICAgICB9XG4gICAgfTsgLy8gUGx1Z2lucyBtaWdodCBiZSBsb2FkZWQgX2FmdGVyXyBpbml0aWFsIGNvbnRlbnQgaXMgc2V0LCBoZW5jZSBleGlzdGluZyB0YWJsZSBub2Rlc1xuICAgIC8vIHdvbid0IGJlIGluaXRpYWxpemVkIGZyb20gbXV0YXRpb25bY3JlYXRlXSBsaXN0ZW5lci4gSW5zdGVhZCBkb2luZyBpdCBoZXJlLFxuXG5cbiAgICBlZGl0b3IuZ2V0RWRpdG9yU3RhdGUoKS5yZWFkKCgpID0+IHtcbiAgICAgIGNvbnN0IHRhYmxlTm9kZXMgPSBsZXhpY2FsLiRub2Rlc09mVHlwZSh0YWJsZS5UYWJsZU5vZGUpO1xuXG4gICAgICBmb3IgKGNvbnN0IHRhYmxlTm9kZSBvZiB0YWJsZU5vZGVzKSB7XG4gICAgICAgIGlmICh0YWJsZS4kaXNUYWJsZU5vZGUodGFibGVOb2RlKSkge1xuICAgICAgICAgIGluaXRpYWxpemVUYWJsZU5vZGUodGFibGVOb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHVucmVnaXN0ZXJNdXRhdGlvbkxpc3RlbmVyID0gZWRpdG9yLnJlZ2lzdGVyTXV0YXRpb25MaXN0ZW5lcih0YWJsZS5UYWJsZU5vZGUsIG5vZGVNdXRhdGlvbnMgPT4ge1xuICAgICAgZm9yIChjb25zdCBbbm9kZUtleSwgbXV0YXRpb25dIG9mIG5vZGVNdXRhdGlvbnMpIHtcbiAgICAgICAgaWYgKG11dGF0aW9uID09PSAnY3JlYXRlZCcpIHtcbiAgICAgICAgICBlZGl0b3IuZ2V0RWRpdG9yU3RhdGUoKS5yZWFkKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlTm9kZSA9IGxleGljYWwuJGdldE5vZGVCeUtleShub2RlS2V5KTtcblxuICAgICAgICAgICAgaWYgKHRhYmxlLiRpc1RhYmxlTm9kZSh0YWJsZU5vZGUpKSB7XG4gICAgICAgICAgICAgIGluaXRpYWxpemVUYWJsZU5vZGUodGFibGVOb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChtdXRhdGlvbiA9PT0gJ2Rlc3Ryb3llZCcpIHtcbiAgICAgICAgICBjb25zdCB0YWJsZVNlbGVjdGlvbiA9IHRhYmxlU2VsZWN0aW9ucy5nZXQobm9kZUtleSk7XG5cbiAgICAgICAgICBpZiAodGFibGVTZWxlY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGFibGVTZWxlY3Rpb24ucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICB0YWJsZVNlbGVjdGlvbnMuZGVsZXRlKG5vZGVLZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB1bnJlZ2lzdGVyTXV0YXRpb25MaXN0ZW5lcigpOyAvLyBIb29rIG1pZ2h0IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBzbyBjbGVhbmluZyB1cCB0YWJsZXMgbGlzdGVuZXJzIGFzIHdlbGwsXG4gICAgICAvLyBhcyBpdCdsbCBiZSByZWluaXRpYWxpemVkIGR1cmluZyByZWN1cnJpbmcgY2FsbFxuXG4gICAgICBmb3IgKGNvbnN0IFssIHRhYmxlU2VsZWN0aW9uXSBvZiB0YWJsZVNlbGVjdGlvbnMpIHtcbiAgICAgICAgdGFibGVTZWxlY3Rpb24ucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2VkaXRvcl0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0cy5UYWJsZVBsdWdpbiA9IFRhYmxlUGx1Z2luO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalTablePlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalTablePlugin.js":
/*!***********************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalTablePlugin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalTablePlugin =  true ? __webpack_require__(/*! ./LexicalTablePlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalTablePlugin.dev.js\") : 0\nmodule.exports = LexicalTablePlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFRhYmxlUGx1Z2luLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osMkJBQTJCLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyxrR0FBNkIsSUFBSSxDQUF1QztBQUNwSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxUYWJsZVBsdWdpbi5qcz8zYWEzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsVGFibGVQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbFRhYmxlUGx1Z2luLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsVGFibGVQbHVnaW4ucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxUYWJsZVBsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalTablePlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalTreeView.dev.js":
/*!************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalTreeView.dev.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar link = __webpack_require__(/*! @lexical/link */ \"(ssr)/./node_modules/@lexical/link/LexicalLink.js\");\nvar mark = __webpack_require__(/*! @lexical/mark */ \"(ssr)/./node_modules/@lexical/mark/LexicalMark.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst NON_SINGLE_WIDTH_CHARS_REPLACEMENT = Object.freeze({\n  '\\t': '\\\\t',\n  '\\n': '\\\\n'\n});\nconst NON_SINGLE_WIDTH_CHARS_REGEX = new RegExp(Object.keys(NON_SINGLE_WIDTH_CHARS_REPLACEMENT).join('|'), 'g');\nconst SYMBOLS = Object.freeze({\n  ancestorHasNextSibling: '|',\n  ancestorIsLastChild: ' ',\n  hasNextSibling: '├',\n  isLastChild: '└',\n  selectedChar: '^',\n  selectedLine: '>'\n});\nfunction TreeView({\n  timeTravelButtonClassName,\n  timeTravelPanelSliderClassName,\n  timeTravelPanelButtonClassName,\n  viewClassName,\n  timeTravelPanelClassName,\n  editor\n}) {\n  const [timeStampedEditorStates, setTimeStampedEditorStates] = React.useState([]);\n  const [content, setContent] = React.useState('');\n  const [timeTravelEnabled, setTimeTravelEnabled] = React.useState(false);\n  const playingIndexRef = React.useRef(0);\n  const treeElementRef = React.useRef(null);\n  const inputRef = React.useRef(null);\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [isLimited, setIsLimited] = React.useState(false);\n  const [showLimited, setShowLimited] = React.useState(false);\n  const lastEditorStateRef = React.useRef(null);\n  const commandsLog = useLexicalCommandsLog(editor);\n  const generateTree = React.useCallback(editorState => {\n    const treeText = generateContent(editor.getEditorState(), editor._config, commandsLog, editor._compositionKey, editor._editable);\n    setContent(treeText);\n\n    if (!timeTravelEnabled) {\n      setTimeStampedEditorStates(currentEditorStates => [...currentEditorStates, [Date.now(), editorState]]);\n    }\n  }, [commandsLog, editor, timeTravelEnabled]);\n  React.useEffect(() => {\n    const editorState = editor.getEditorState();\n\n    if (!showLimited && editorState._nodeMap.size > 1000) {\n      setContent(generateContent(editorState, editor._config, commandsLog, editor._compositionKey, editor._editable));\n    }\n  }, [commandsLog, editor, showLimited]);\n  React.useEffect(() => {\n    return utils.mergeRegister(editor.registerUpdateListener(({\n      editorState\n    }) => {\n      if (!showLimited && editorState._nodeMap.size > 1000) {\n        lastEditorStateRef.current = editorState;\n        setIsLimited(true);\n\n        if (!showLimited) {\n          return;\n        }\n      }\n\n      generateTree(editorState);\n    }), editor.registerEditableListener(() => {\n      const treeText = generateContent(editor.getEditorState(), editor._config, commandsLog, editor._compositionKey, editor._editable);\n      setContent(treeText);\n    }));\n  }, [commandsLog, editor, isLimited, generateTree, showLimited]);\n  const totalEditorStates = timeStampedEditorStates.length;\n  React.useEffect(() => {\n    if (isPlaying) {\n      let timeoutId;\n\n      const play = () => {\n        const currentIndex = playingIndexRef.current;\n\n        if (currentIndex === totalEditorStates - 1) {\n          setIsPlaying(false);\n          return;\n        }\n\n        const currentTime = timeStampedEditorStates[currentIndex][0];\n        const nextTime = timeStampedEditorStates[currentIndex + 1][0];\n        const timeDiff = nextTime - currentTime;\n        timeoutId = setTimeout(() => {\n          playingIndexRef.current++;\n          const index = playingIndexRef.current;\n          const input = inputRef.current;\n\n          if (input !== null) {\n            input.value = String(index);\n          }\n\n          editor.setEditorState(timeStampedEditorStates[index][1]);\n          play();\n        }, timeDiff);\n      };\n\n      play();\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n  }, [timeStampedEditorStates, isPlaying, editor, totalEditorStates]);\n  React.useEffect(() => {\n    const element = treeElementRef.current;\n\n    if (element !== null) {\n      // @ts-ignore Internal field\n      element.__lexicalEditor = editor;\n      return () => {\n        // @ts-ignore Internal field\n        element.__lexicalEditor = null;\n      };\n    }\n  }, [editor]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: viewClassName\n  }, !showLimited && isLimited ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: 20\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      marginRight: 20\n    }\n  }, \"Detected large EditorState, this can impact debugging performance.\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setShowLimited(true);\n      const editorState = lastEditorStateRef.current;\n\n      if (editorState !== null) {\n        lastEditorStateRef.current = null;\n        generateTree(editorState);\n      }\n    },\n    style: {\n      background: 'transparent',\n      border: '1px solid white',\n      color: 'white',\n      cursor: 'pointer',\n      padding: 5\n    }\n  }, \"Show full tree\")) : null, !timeTravelEnabled && (showLimited || !isLimited) && totalEditorStates > 2 && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      const rootElement = editor.getRootElement();\n\n      if (rootElement !== null) {\n        rootElement.contentEditable = 'false';\n        playingIndexRef.current = totalEditorStates - 1;\n        setTimeTravelEnabled(true);\n      }\n    },\n    className: timeTravelButtonClassName,\n    type: \"button\"\n  }, \"Time Travel\"), (showLimited || !isLimited) && /*#__PURE__*/React.createElement(\"pre\", {\n    ref: treeElementRef\n  }, content), timeTravelEnabled && (showLimited || !isLimited) && /*#__PURE__*/React.createElement(\"div\", {\n    className: timeTravelPanelClassName\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: timeTravelPanelButtonClassName,\n    onClick: () => {\n      if (playingIndexRef.current === totalEditorStates - 1) {\n        playingIndexRef.current = 1;\n      }\n\n      setIsPlaying(!isPlaying);\n    },\n    type: \"button\"\n  }, isPlaying ? 'Pause' : 'Play'), /*#__PURE__*/React.createElement(\"input\", {\n    className: timeTravelPanelSliderClassName,\n    ref: inputRef,\n    onChange: event => {\n      const editorStateIndex = Number(event.target.value);\n      const timeStampedEditorState = timeStampedEditorStates[editorStateIndex];\n\n      if (timeStampedEditorState) {\n        playingIndexRef.current = editorStateIndex;\n        editor.setEditorState(timeStampedEditorState[1]);\n      }\n    },\n    type: \"range\",\n    min: \"1\",\n    max: totalEditorStates - 1\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: timeTravelPanelButtonClassName,\n    onClick: () => {\n      const rootElement = editor.getRootElement();\n\n      if (rootElement !== null) {\n        rootElement.contentEditable = 'true';\n        const index = timeStampedEditorStates.length - 1;\n        const timeStampedEditorState = timeStampedEditorStates[index];\n        editor.setEditorState(timeStampedEditorState[1]);\n        const input = inputRef.current;\n\n        if (input !== null) {\n          input.value = String(index);\n        }\n\n        setTimeTravelEnabled(false);\n        setIsPlaying(false);\n      }\n    },\n    type: \"button\"\n  }, \"Exit\")));\n}\n\nfunction useLexicalCommandsLog(editor) {\n  const [loggedCommands, setLoggedCommands] = React.useState([]);\n  React.useEffect(() => {\n    const unregisterCommandListeners = new Set();\n\n    for (const [command] of editor._commands) {\n      unregisterCommandListeners.add(editor.registerCommand(command, payload => {\n        setLoggedCommands(state => {\n          const newState = [...state];\n          newState.push({\n            payload,\n            type: command.type ? command.type : 'UNKNOWN'\n          });\n\n          if (newState.length > 10) {\n            newState.shift();\n          }\n\n          return newState;\n        });\n        return false;\n      }, lexical.COMMAND_PRIORITY_HIGH));\n    }\n\n    return () => unregisterCommandListeners.forEach(unregister => unregister());\n  }, [editor]);\n  return React.useMemo(() => loggedCommands, [loggedCommands]);\n}\n\nfunction printRangeSelection(selection) {\n  let res = '';\n  const formatText = printFormatProperties(selection);\n  res += `: range ${formatText !== '' ? `{ ${formatText} }` : ''} ${selection.style !== '' ? `{ style: ${selection.style} } ` : ''}`;\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorOffset = anchor.offset;\n  const focusOffset = focus.offset;\n  res += `\\n  ├ anchor { key: ${anchor.key}, offset: ${anchorOffset === null ? 'null' : anchorOffset}, type: ${anchor.type} }`;\n  res += `\\n  └ focus { key: ${focus.key}, offset: ${focusOffset === null ? 'null' : focusOffset}, type: ${focus.type} }`;\n  return res;\n}\n\nfunction printNodeSelection(selection) {\n  return `: node\\n  └ [${Array.from(selection._nodes).join(', ')}]`;\n}\n\nfunction printGridSelection(selection) {\n  return `: grid\\n  └ { grid: ${selection.gridKey}, anchorCell: ${selection.anchor.key}, focusCell: ${selection.focus.key} }`;\n}\n\nfunction generateContent(editorState, editorConfig, commandsLog, compositionKey, editable) {\n  let res = ' root\\n';\n  const selectionString = editorState.read(() => {\n    const selection = lexical.$getSelection();\n    visitTree(lexical.$getRoot(), (node, indent) => {\n      const nodeKey = node.getKey();\n      const nodeKeyDisplay = `(${nodeKey})`;\n      const typeDisplay = node.getType() || '';\n      const isSelected = node.isSelected();\n      const idsDisplay = mark.$isMarkNode(node) ? ` id: [ ${node.getIDs().join(', ')} ] ` : '';\n      res += `${isSelected ? SYMBOLS.selectedLine : ' '} ${indent.join(' ')} ${nodeKeyDisplay} ${typeDisplay} ${idsDisplay} ${printNode(node)}\\n`;\n      res += printSelectedCharsLine({\n        indent,\n        isSelected,\n        node,\n        nodeKeyDisplay,\n        selection,\n        typeDisplay\n      });\n    });\n    return selection === null ? ': null' : lexical.$isRangeSelection(selection) ? printRangeSelection(selection) : lexical.DEPRECATED_$isGridSelection(selection) ? printGridSelection(selection) : printNodeSelection(selection);\n  });\n  res += '\\n selection' + selectionString;\n  res += '\\n\\n commands:';\n\n  if (commandsLog.length) {\n    for (const {\n      type,\n      payload\n    } of commandsLog) {\n      res += `\\n  └ { type: ${type}, payload: ${payload instanceof Event ? payload.constructor.name : payload} }`;\n    }\n  } else {\n    res += '\\n  └ None dispatched.';\n  }\n\n  res += '\\n\\n editor:';\n  res += `\\n  └ namespace ${editorConfig.namespace}`;\n\n  if (compositionKey !== null) {\n    res += `\\n  └ compositionKey ${compositionKey}`;\n  }\n\n  res += `\\n  └ editable ${String(editable)}`;\n  return res;\n}\n\nfunction visitTree(currentNode, visitor, indent = []) {\n  const childNodes = currentNode.getChildren();\n  const childNodesLength = childNodes.length;\n  childNodes.forEach((childNode, i) => {\n    visitor(childNode, indent.concat(i === childNodesLength - 1 ? SYMBOLS.isLastChild : SYMBOLS.hasNextSibling));\n\n    if (lexical.$isElementNode(childNode)) {\n      visitTree(childNode, visitor, indent.concat(i === childNodesLength - 1 ? SYMBOLS.ancestorIsLastChild : SYMBOLS.ancestorHasNextSibling));\n    }\n  });\n}\n\nfunction normalize(text) {\n  return Object.entries(NON_SINGLE_WIDTH_CHARS_REPLACEMENT).reduce((acc, [key, value]) => acc.replace(new RegExp(key, 'g'), String(value)), text);\n} // TODO Pass via props to allow customizability\n\n\nfunction printNode(node) {\n  if (lexical.$isTextNode(node)) {\n    const text = node.getTextContent();\n    const title = text.length === 0 ? '(empty)' : `\"${normalize(text)}\"`;\n    const properties = printAllTextNodeProperties(node);\n    return [title, properties.length !== 0 ? `{ ${properties} }` : null].filter(Boolean).join(' ').trim();\n  } else if (link.$isLinkNode(node)) {\n    const link = node.getURL();\n    const title = link.length === 0 ? '(empty)' : `\"${normalize(link)}\"`;\n    const properties = printAllLinkNodeProperties(node);\n    return [title, properties.length !== 0 ? `{ ${properties} }` : null].filter(Boolean).join(' ').trim();\n  } else {\n    return '';\n  }\n}\n\nconst FORMAT_PREDICATES = [node => node.hasFormat('bold') && 'Bold', node => node.hasFormat('code') && 'Code', node => node.hasFormat('italic') && 'Italic', node => node.hasFormat('strikethrough') && 'Strikethrough', node => node.hasFormat('subscript') && 'Subscript', node => node.hasFormat('superscript') && 'Superscript', node => node.hasFormat('underline') && 'Underline'];\nconst DETAIL_PREDICATES = [node => node.isDirectionless() && 'Directionless', node => node.isUnmergeable() && 'Unmergeable'];\nconst MODE_PREDICATES = [node => node.isToken() && 'Token', node => node.isSegmented() && 'Segmented'];\n\nfunction printAllTextNodeProperties(node) {\n  return [printFormatProperties(node), printDetailProperties(node), printModeProperties(node)].filter(Boolean).join(', ');\n}\n\nfunction printAllLinkNodeProperties(node) {\n  return [printTargetProperties(node), printRelProperties(node)].filter(Boolean).join(', ');\n}\n\nfunction printDetailProperties(nodeOrSelection) {\n  let str = DETAIL_PREDICATES.map(predicate => predicate(nodeOrSelection)).filter(Boolean).join(', ').toLocaleLowerCase();\n\n  if (str !== '') {\n    str = 'detail: ' + str;\n  }\n\n  return str;\n}\n\nfunction printModeProperties(nodeOrSelection) {\n  let str = MODE_PREDICATES.map(predicate => predicate(nodeOrSelection)).filter(Boolean).join(', ').toLocaleLowerCase();\n\n  if (str !== '') {\n    str = 'mode: ' + str;\n  }\n\n  return str;\n}\n\nfunction printFormatProperties(nodeOrSelection) {\n  let str = FORMAT_PREDICATES.map(predicate => predicate(nodeOrSelection)).filter(Boolean).join(', ').toLocaleLowerCase();\n\n  if (str !== '') {\n    str = 'format: ' + str;\n  }\n\n  return str;\n}\n\nfunction printTargetProperties(node) {\n  let str = node.getTarget(); // TODO Fix nullish on LinkNode\n\n  if (str != null) {\n    str = 'target: ' + str;\n  }\n\n  return str;\n}\n\nfunction printRelProperties(node) {\n  let str = node.getRel(); // TODO Fix nullish on LinkNode\n\n  if (str != null) {\n    str = 'rel: ' + str;\n  }\n\n  return str;\n}\n\nfunction printSelectedCharsLine({\n  indent,\n  isSelected,\n  node,\n  nodeKeyDisplay,\n  selection,\n  typeDisplay\n}) {\n  // No selection or node is not selected.\n  if (!lexical.$isTextNode(node) || !lexical.$isRangeSelection(selection) || !isSelected || lexical.$isElementNode(node)) {\n    return '';\n  } // No selected characters.\n\n\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n\n  if (node.getTextContent() === '' || anchor.getNode() === selection.focus.getNode() && anchor.offset === focus.offset) {\n    return '';\n  }\n\n  const [start, end] = $getSelectionStartEnd(node, selection);\n\n  if (start === end) {\n    return '';\n  }\n\n  const selectionLastIndent = indent[indent.length - 1] === SYMBOLS.hasNextSibling ? SYMBOLS.ancestorHasNextSibling : SYMBOLS.ancestorIsLastChild;\n  const indentionChars = [...indent.slice(0, indent.length - 1), selectionLastIndent];\n  const unselectedChars = Array(start + 1).fill(' ');\n  const selectedChars = Array(end - start).fill(SYMBOLS.selectedChar);\n  const paddingLength = typeDisplay.length + 3; // 2 for the spaces around + 1 for the double quote.\n\n  const nodePrintSpaces = Array(nodeKeyDisplay.length + paddingLength).fill(' ');\n  return [SYMBOLS.selectedLine, indentionChars.join(' '), [...nodePrintSpaces, ...unselectedChars, ...selectedChars].join('')].join(' ') + '\\n';\n}\n\nfunction $getSelectionStartEnd(node, selection) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const textContent = node.getTextContent();\n  const textLength = textContent.length;\n  let start = -1;\n  let end = -1; // Only one node is being selected.\n\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n\n    if (anchorNode === focusNode && node === anchorNode && anchor.offset !== focus.offset) {\n      [start, end] = anchor.offset < focus.offset ? [anchor.offset, focus.offset] : [focus.offset, anchor.offset];\n    } else if (node === anchorNode) {\n      [start, end] = anchorNode.isBefore(focusNode) ? [anchor.offset, textLength] : [0, anchor.offset];\n    } else if (node === focusNode) {\n      [start, end] = focusNode.isBefore(anchorNode) ? [focus.offset, textLength] : [0, focus.offset];\n    } else {\n      // Node is within selection but not the anchor nor focus.\n      [start, end] = [0, textLength];\n    }\n  } // Account for non-single width characters.\n\n\n  const numNonSingleWidthCharBeforeSelection = (textContent.slice(0, start).match(NON_SINGLE_WIDTH_CHARS_REGEX) || []).length;\n  const numNonSingleWidthCharInSelection = (textContent.slice(start, end).match(NON_SINGLE_WIDTH_CHARS_REGEX) || []).length;\n  return [start + numNonSingleWidthCharBeforeSelection, end + numNonSingleWidthCharBeforeSelection + numNonSingleWidthCharInSelection];\n}\n\nexports.TreeView = TreeView;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalTreeView.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalTreeView.js":
/*!********************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalTreeView.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalTreeView =  true ? __webpack_require__(/*! ./LexicalTreeView.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalTreeView.dev.js\") : 0\nmodule.exports = LexicalTreeView;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFRyZWVWaWV3LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osd0JBQXdCLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyw0RkFBMEIsSUFBSSxDQUFvQztBQUMzSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L0xleGljYWxUcmVlVmlldy5qcz80OGE0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsVHJlZVZpZXcgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbFRyZWVWaWV3LmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsVHJlZVZpZXcucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxUcmVlVmlldzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalTreeView.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalTypeaheadMenuPlugin.dev.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalTypeaheadMenuPlugin.dev.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst useLayoutEffectImpl = CAN_USE_DOM ? React.useLayoutEffect : React.useEffect;\nvar useLayoutEffect = useLayoutEffectImpl;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst PUNCTUATION = '\\\\.,\\\\+\\\\*\\\\?\\\\$\\\\@\\\\|#{}\\\\(\\\\)\\\\^\\\\-\\\\[\\\\]\\\\\\\\/!%\\'\"~=<>_:;';\nclass TypeaheadOption {\n  constructor(key) {\n    this.key = key;\n    this.ref = {\n      current: null\n    };\n    this.setRefElement = this.setRefElement.bind(this);\n  }\n\n  setRefElement(element) {\n    this.ref = {\n      current: element\n    };\n  }\n\n}\n\nconst scrollIntoViewIfNeeded = target => {\n  const container = document.getElementById('typeahead-menu');\n  if (!container) return;\n  const typeaheadContainerNode = container.querySelector('.typeahead-popover');\n  if (!typeaheadContainerNode) return;\n  const typeaheadRect = typeaheadContainerNode.getBoundingClientRect();\n\n  if (typeaheadRect.top + typeaheadRect.height > window.innerHeight) {\n    typeaheadContainerNode.scrollIntoView({\n      block: 'center'\n    });\n  }\n\n  if (typeaheadRect.top < 0) {\n    typeaheadContainerNode.scrollIntoView({\n      block: 'center'\n    });\n  }\n\n  target.scrollIntoView({\n    block: 'nearest'\n  });\n};\n\nfunction getTextUpToAnchor(selection) {\n  const anchor = selection.anchor;\n\n  if (anchor.type !== 'text') {\n    return null;\n  }\n\n  const anchorNode = anchor.getNode();\n\n  if (!anchorNode.isSimpleText()) {\n    return null;\n  }\n\n  const anchorOffset = anchor.offset;\n  return anchorNode.getTextContent().slice(0, anchorOffset);\n}\n\nfunction tryToPositionRange(leadOffset, range) {\n  const domSelection = window.getSelection();\n\n  if (domSelection === null || !domSelection.isCollapsed) {\n    return false;\n  }\n\n  const anchorNode = domSelection.anchorNode;\n  const startOffset = leadOffset;\n  const endOffset = domSelection.anchorOffset;\n\n  if (anchorNode == null || endOffset == null) {\n    return false;\n  }\n\n  try {\n    range.setStart(anchorNode, startOffset);\n    range.setEnd(anchorNode, endOffset);\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getQueryTextForSearch(editor) {\n  let text = null;\n  editor.getEditorState().read(() => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return;\n    }\n\n    text = getTextUpToAnchor(selection);\n  });\n  return text;\n}\n/**\n * Walk backwards along user input and forward through entity title to try\n * and replace more of the user's text with entity.\n */\n\n\nfunction getFullMatchOffset(documentText, entryText, offset) {\n  let triggerOffset = offset;\n\n  for (let i = triggerOffset; i <= entryText.length; i++) {\n    if (documentText.substr(-i) === entryText.substr(0, i)) {\n      triggerOffset = i;\n    }\n  }\n\n  return triggerOffset;\n}\n/**\n * Split Lexical TextNode and return a new TextNode only containing matched text.\n * Common use cases include: removing the node, replacing with a new node.\n */\n\n\nfunction splitNodeContainingQuery(editor, match) {\n  const selection = lexical.$getSelection();\n\n  if (!lexical.$isRangeSelection(selection) || !selection.isCollapsed()) {\n    return null;\n  }\n\n  const anchor = selection.anchor;\n\n  if (anchor.type !== 'text') {\n    return null;\n  }\n\n  const anchorNode = anchor.getNode();\n\n  if (!anchorNode.isSimpleText()) {\n    return null;\n  }\n\n  const selectionOffset = anchor.offset;\n  const textContent = anchorNode.getTextContent().slice(0, selectionOffset);\n  const characterOffset = match.replaceableString.length;\n  const queryOffset = getFullMatchOffset(textContent, match.matchingString, characterOffset);\n  const startOffset = selectionOffset - queryOffset;\n\n  if (startOffset < 0) {\n    return null;\n  }\n\n  let newNode;\n\n  if (startOffset === 0) {\n    [newNode] = anchorNode.splitText(selectionOffset);\n  } else {\n    [, newNode] = anchorNode.splitText(startOffset, selectionOffset);\n  }\n\n  return newNode;\n}\n\nfunction isSelectionOnEntityBoundary(editor, offset) {\n  if (offset !== 0) {\n    return false;\n  }\n\n  return editor.getEditorState().read(() => {\n    const selection = lexical.$getSelection();\n\n    if (lexical.$isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const prevSibling = anchorNode.getPreviousSibling();\n      return lexical.$isTextNode(prevSibling) && prevSibling.isTextEntity();\n    }\n\n    return false;\n  });\n}\n\nfunction startTransition(callback) {\n  if (React.startTransition) {\n    React.startTransition(callback);\n  } else {\n    callback();\n  }\n} // Got from https://stackoverflow.com/a/42543908/2013580\n\n\nfunction getScrollParent(element, includeHidden) {\n  let style = getComputedStyle(element);\n  const excludeStaticParent = style.position === 'absolute';\n  const overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/;\n\n  if (style.position === 'fixed') {\n    return document.body;\n  }\n\n  for (let parent = element; parent = parent.parentElement;) {\n    style = getComputedStyle(parent);\n\n    if (excludeStaticParent && style.position === 'static') {\n      continue;\n    }\n\n    if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) {\n      return parent;\n    }\n  }\n\n  return document.body;\n}\n\nfunction isTriggerVisibleInNearestScrollContainer(targetElement, containerElement) {\n  const tRect = targetElement.getBoundingClientRect();\n  const cRect = containerElement.getBoundingClientRect();\n  return tRect.top > cRect.top && tRect.top < cRect.bottom;\n} // Reposition the menu on scroll, window resize, and element resize.\n\n\nfunction useDynamicPositioning(resolution, targetElement, onReposition, onVisibilityChange) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  React.useEffect(() => {\n    if (targetElement != null && resolution != null) {\n      const rootElement = editor.getRootElement();\n      const rootScrollParent = rootElement != null ? getScrollParent(rootElement, false) : document.body;\n      let ticking = false;\n      let previousIsInView = isTriggerVisibleInNearestScrollContainer(targetElement, rootScrollParent);\n\n      const handleScroll = function () {\n        if (!ticking) {\n          window.requestAnimationFrame(function () {\n            onReposition();\n            ticking = false;\n          });\n          ticking = true;\n        }\n\n        const isInView = isTriggerVisibleInNearestScrollContainer(targetElement, rootScrollParent);\n\n        if (isInView !== previousIsInView) {\n          previousIsInView = isInView;\n\n          if (onVisibilityChange != null) {\n            onVisibilityChange(isInView);\n          }\n        }\n      };\n\n      const resizeObserver = new ResizeObserver(onReposition);\n      window.addEventListener('resize', onReposition);\n      document.addEventListener('scroll', handleScroll, {\n        capture: true,\n        passive: true\n      });\n      resizeObserver.observe(targetElement);\n      return () => {\n        resizeObserver.unobserve(targetElement);\n        window.removeEventListener('resize', onReposition);\n        document.removeEventListener('scroll', handleScroll);\n      };\n    }\n  }, [targetElement, editor, onVisibilityChange, onReposition, resolution]);\n}\nconst SCROLL_TYPEAHEAD_OPTION_INTO_VIEW_COMMAND = lexical.createCommand('SCROLL_TYPEAHEAD_OPTION_INTO_VIEW_COMMAND');\n\nfunction LexicalPopoverMenu({\n  close,\n  editor,\n  anchorElementRef,\n  resolution,\n  options,\n  menuRenderFn,\n  onSelectOption\n}) {\n  const [selectedIndex, setHighlightedIndex] = React.useState(null);\n  React.useEffect(() => {\n    setHighlightedIndex(0);\n  }, [resolution.match.matchingString]);\n  const selectOptionAndCleanUp = React.useCallback(selectedEntry => {\n    editor.update(() => {\n      const textNodeContainingQuery = splitNodeContainingQuery(editor, resolution.match);\n      onSelectOption(selectedEntry, textNodeContainingQuery, close, resolution.match.matchingString);\n    });\n  }, [close, editor, resolution.match, onSelectOption]);\n  const updateSelectedIndex = React.useCallback(index => {\n    const rootElem = editor.getRootElement();\n\n    if (rootElem !== null) {\n      rootElem.setAttribute('aria-activedescendant', 'typeahead-item-' + index);\n      setHighlightedIndex(index);\n    }\n  }, [editor]);\n  React.useEffect(() => {\n    return () => {\n      const rootElem = editor.getRootElement();\n\n      if (rootElem !== null) {\n        rootElem.removeAttribute('aria-activedescendant');\n      }\n    };\n  }, [editor]);\n  useLayoutEffect(() => {\n    if (options === null) {\n      setHighlightedIndex(null);\n    } else if (selectedIndex === null) {\n      updateSelectedIndex(0);\n    }\n  }, [options, selectedIndex, updateSelectedIndex]);\n  React.useEffect(() => {\n    return utils.mergeRegister(editor.registerCommand(SCROLL_TYPEAHEAD_OPTION_INTO_VIEW_COMMAND, ({\n      option\n    }) => {\n      if (option.ref && option.ref.current != null) {\n        scrollIntoViewIfNeeded(option.ref.current);\n        return true;\n      }\n\n      return false;\n    }, lexical.COMMAND_PRIORITY_LOW));\n  }, [editor, updateSelectedIndex]);\n  React.useEffect(() => {\n    return utils.mergeRegister(editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, payload => {\n      const event = payload;\n\n      if (options !== null && options.length && selectedIndex !== null) {\n        const newSelectedIndex = selectedIndex !== options.length - 1 ? selectedIndex + 1 : 0;\n        updateSelectedIndex(newSelectedIndex);\n        const option = options[newSelectedIndex];\n\n        if (option.ref != null && option.ref.current) {\n          editor.dispatchCommand(SCROLL_TYPEAHEAD_OPTION_INTO_VIEW_COMMAND, {\n            index: newSelectedIndex,\n            option\n          });\n        }\n\n        event.preventDefault();\n        event.stopImmediatePropagation();\n      }\n\n      return true;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, payload => {\n      const event = payload;\n\n      if (options !== null && options.length && selectedIndex !== null) {\n        const newSelectedIndex = selectedIndex !== 0 ? selectedIndex - 1 : options.length - 1;\n        updateSelectedIndex(newSelectedIndex);\n        const option = options[newSelectedIndex];\n\n        if (option.ref != null && option.ref.current) {\n          scrollIntoViewIfNeeded(option.ref.current);\n        }\n\n        event.preventDefault();\n        event.stopImmediatePropagation();\n      }\n\n      return true;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ESCAPE_COMMAND, payload => {\n      const event = payload;\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      close();\n      return true;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_TAB_COMMAND, payload => {\n      const event = payload;\n\n      if (options === null || selectedIndex === null || options[selectedIndex] == null) {\n        return false;\n      }\n\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      selectOptionAndCleanUp(options[selectedIndex]);\n      return true;\n    }, lexical.COMMAND_PRIORITY_LOW), editor.registerCommand(lexical.KEY_ENTER_COMMAND, event => {\n      if (options === null || selectedIndex === null || options[selectedIndex] == null) {\n        return false;\n      }\n\n      if (event !== null) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n      }\n\n      selectOptionAndCleanUp(options[selectedIndex]);\n      return true;\n    }, lexical.COMMAND_PRIORITY_LOW));\n  }, [selectOptionAndCleanUp, close, editor, options, selectedIndex, updateSelectedIndex]);\n  const listItemProps = React.useMemo(() => ({\n    options,\n    selectOptionAndCleanUp,\n    selectedIndex,\n    setHighlightedIndex\n  }), [selectOptionAndCleanUp, selectedIndex, options]);\n  return menuRenderFn(anchorElementRef, listItemProps, resolution.match.matchingString);\n}\n\nfunction useBasicTypeaheadTriggerMatch(trigger, {\n  minLength = 1,\n  maxLength = 75\n}) {\n  return React.useCallback(text => {\n    const validChars = '[^' + trigger + PUNCTUATION + '\\\\s]';\n    const TypeaheadTriggerRegex = new RegExp('(^|\\\\s|\\\\()(' + '[' + trigger + ']' + '((?:' + validChars + '){0,' + maxLength + '})' + ')$');\n    const match = TypeaheadTriggerRegex.exec(text);\n\n    if (match !== null) {\n      const maybeLeadingWhitespace = match[1];\n      const matchingString = match[3];\n\n      if (matchingString.length >= minLength) {\n        return {\n          leadOffset: match.index + maybeLeadingWhitespace.length,\n          matchingString,\n          replaceableString: match[2]\n        };\n      }\n    }\n\n    return null;\n  }, [maxLength, minLength, trigger]);\n}\n\nfunction useMenuAnchorRef(resolution, setResolution, className) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const anchorElementRef = React.useRef(document.createElement('div'));\n  const positionMenu = React.useCallback(() => {\n    const rootElement = editor.getRootElement();\n    const containerDiv = anchorElementRef.current;\n\n    if (rootElement !== null && resolution !== null) {\n      const {\n        left,\n        top,\n        width,\n        height\n      } = resolution.getRect();\n      containerDiv.style.top = `${top + window.pageYOffset}px`;\n      containerDiv.style.left = `${left + window.pageXOffset}px`;\n      containerDiv.style.height = `${height}px`;\n      containerDiv.style.width = `${width}px`;\n\n      if (!containerDiv.isConnected) {\n        if (className != null) {\n          containerDiv.className = className;\n        }\n\n        containerDiv.setAttribute('aria-label', 'Typeahead menu');\n        containerDiv.setAttribute('id', 'typeahead-menu');\n        containerDiv.setAttribute('role', 'listbox');\n        containerDiv.style.display = 'block';\n        containerDiv.style.position = 'absolute';\n        document.body.append(containerDiv);\n      }\n\n      anchorElementRef.current = containerDiv;\n      rootElement.setAttribute('aria-controls', 'typeahead-menu');\n    }\n  }, [editor, resolution, className]);\n  React.useEffect(() => {\n    const rootElement = editor.getRootElement();\n\n    if (resolution !== null) {\n      positionMenu();\n      return () => {\n        if (rootElement !== null) {\n          rootElement.removeAttribute('aria-controls');\n        }\n\n        const containerDiv = anchorElementRef.current;\n\n        if (containerDiv !== null && containerDiv.isConnected) {\n          containerDiv.remove();\n        }\n      };\n    }\n  }, [editor, positionMenu, resolution]);\n  const onVisibilityChange = React.useCallback(isInView => {\n    if (resolution !== null) {\n      if (!isInView) {\n        setResolution(null);\n      }\n    }\n  }, [resolution, setResolution]);\n  useDynamicPositioning(resolution, anchorElementRef.current, positionMenu, onVisibilityChange);\n  return anchorElementRef;\n}\n\nfunction LexicalTypeaheadMenuPlugin({\n  options,\n  onQueryChange,\n  onSelectOption,\n  onOpen,\n  onClose,\n  menuRenderFn,\n  triggerFn,\n  anchorClassName\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const [resolution, setResolution] = React.useState(null);\n  const anchorElementRef = useMenuAnchorRef(resolution, setResolution, anchorClassName);\n  const closeTypeahead = React.useCallback(() => {\n    setResolution(null);\n\n    if (onClose != null && resolution !== null) {\n      onClose();\n    }\n  }, [onClose, resolution]);\n  const openTypeahead = React.useCallback(res => {\n    setResolution(res);\n\n    if (onOpen != null && resolution === null) {\n      onOpen(res);\n    }\n  }, [onOpen, resolution]);\n  React.useEffect(() => {\n    const updateListener = () => {\n      editor.getEditorState().read(() => {\n        const range = document.createRange();\n        const selection = lexical.$getSelection();\n        const text = getQueryTextForSearch(editor);\n\n        if (!lexical.$isRangeSelection(selection) || !selection.isCollapsed() || text === null || range === null) {\n          closeTypeahead();\n          return;\n        }\n\n        const match = triggerFn(text, editor);\n        onQueryChange(match ? match.matchingString : null);\n\n        if (match !== null && !isSelectionOnEntityBoundary(editor, match.leadOffset)) {\n          const isRangePositioned = tryToPositionRange(match.leadOffset, range);\n\n          if (isRangePositioned !== null) {\n            startTransition(() => openTypeahead({\n              getRect: () => range.getBoundingClientRect(),\n              match\n            }));\n            return;\n          }\n        }\n\n        closeTypeahead();\n      });\n    };\n\n    const removeUpdateListener = editor.registerUpdateListener(updateListener);\n    return () => {\n      removeUpdateListener();\n    };\n  }, [editor, triggerFn, onQueryChange, resolution, closeTypeahead, openTypeahead]);\n  return resolution === null || editor === null ? null : /*#__PURE__*/React.createElement(LexicalPopoverMenu, {\n    close: closeTypeahead,\n    resolution: resolution,\n    editor: editor,\n    anchorElementRef: anchorElementRef,\n    options: options,\n    menuRenderFn: menuRenderFn,\n    onSelectOption: onSelectOption\n  });\n}\nfunction LexicalNodeMenuPlugin({\n  options,\n  nodeKey,\n  onClose,\n  onOpen,\n  onSelectOption,\n  menuRenderFn,\n  anchorClassName\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const [resolution, setResolution] = React.useState(null);\n  const anchorElementRef = useMenuAnchorRef(resolution, setResolution, anchorClassName);\n  const closeNodeMenu = React.useCallback(() => {\n    setResolution(null);\n\n    if (onClose != null && resolution !== null) {\n      onClose();\n    }\n  }, [onClose, resolution]);\n  const openNodeMenu = React.useCallback(res => {\n    setResolution(res);\n\n    if (onOpen != null && resolution === null) {\n      onOpen(res);\n    }\n  }, [onOpen, resolution]);\n  const positionOrCloseMenu = React.useCallback(() => {\n    if (nodeKey) {\n      editor.update(() => {\n        const node = lexical.$getNodeByKey(nodeKey);\n        const domElement = editor.getElementByKey(nodeKey);\n\n        if (node != null && domElement != null) {\n          const text = node.getTextContent();\n\n          if (resolution == null || resolution.match.matchingString !== text) {\n            startTransition(() => openNodeMenu({\n              getRect: () => domElement.getBoundingClientRect(),\n              match: {\n                leadOffset: text.length,\n                matchingString: text,\n                replaceableString: text\n              }\n            }));\n          }\n        }\n      });\n    } else if (nodeKey == null && resolution != null) {\n      closeNodeMenu();\n    }\n  }, [closeNodeMenu, editor, nodeKey, openNodeMenu, resolution]);\n  React.useEffect(() => {\n    positionOrCloseMenu();\n  }, [positionOrCloseMenu, nodeKey]);\n  React.useEffect(() => {\n    if (nodeKey != null) {\n      return editor.registerUpdateListener(({\n        dirtyElements\n      }) => {\n        if (dirtyElements.get(nodeKey)) {\n          positionOrCloseMenu();\n        }\n      });\n    }\n  }, [editor, positionOrCloseMenu, nodeKey]);\n  return resolution === null || editor === null ? null : /*#__PURE__*/React.createElement(LexicalPopoverMenu, {\n    close: closeNodeMenu,\n    resolution: resolution,\n    editor: editor,\n    anchorElementRef: anchorElementRef,\n    options: options,\n    menuRenderFn: menuRenderFn,\n    onSelectOption: onSelectOption\n  });\n}\n\nexports.LexicalNodeMenuPlugin = LexicalNodeMenuPlugin;\nexports.LexicalTypeaheadMenuPlugin = LexicalTypeaheadMenuPlugin;\nexports.PUNCTUATION = PUNCTUATION;\nexports.SCROLL_TYPEAHEAD_OPTION_INTO_VIEW_COMMAND = SCROLL_TYPEAHEAD_OPTION_INTO_VIEW_COMMAND;\nexports.TypeaheadOption = TypeaheadOption;\nexports.getScrollParent = getScrollParent;\nexports.useBasicTypeaheadTriggerMatch = useBasicTypeaheadTriggerMatch;\nexports.useDynamicPositioning = useDynamicPositioning;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFR5cGVhaGVhZE1lbnVQbHVnaW4uZGV2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViLDZCQUE2QixtQkFBTyxDQUFDLDRHQUF1QztBQUM1RSxZQUFZLG1CQUFPLENBQUMsMkVBQWdCO0FBQ3BDLGNBQWMsbUJBQU8sQ0FBQyx3REFBUztBQUMvQixZQUFZLG1CQUFPLENBQUMsd0dBQU87O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLG1DQUFtQztBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBLDhCQUE4Qix1QkFBdUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDZCQUE2Qiw4QkFBOEI7QUFDM0Q7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsNkdBQTZHLG9CQUFvQjtBQUNqSTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLGtDQUFrQyx5QkFBeUI7QUFDM0QsbUNBQW1DLDBCQUEwQjtBQUM3RCxxQ0FBcUMsT0FBTztBQUM1QyxvQ0FBb0MsTUFBTTs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLDZCQUE2QjtBQUM3QixrQ0FBa0M7QUFDbEMsbUJBQW1CO0FBQ25CLGlEQUFpRDtBQUNqRCx1QkFBdUI7QUFDdkIsdUJBQXVCO0FBQ3ZCLHFDQUFxQztBQUNyQyw2QkFBNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yZWFjdC9MZXhpY2FsVHlwZWFoZWFkTWVudVBsdWdpbi5kZXYuanM/ZGQ1NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIExleGljYWxDb21wb3NlckNvbnRleHQgPSByZXF1aXJlKCdAbGV4aWNhbC9yZWFjdC9MZXhpY2FsQ29tcG9zZXJDb250ZXh0Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCdAbGV4aWNhbC91dGlscycpO1xudmFyIGxleGljYWwgPSByZXF1aXJlKCdsZXhpY2FsJyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5jb25zdCBDQU5fVVNFX0RPTSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbmNvbnN0IHVzZUxheW91dEVmZmVjdEltcGwgPSBDQU5fVVNFX0RPTSA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbnZhciB1c2VMYXlvdXRFZmZlY3QgPSB1c2VMYXlvdXRFZmZlY3RJbXBsO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5jb25zdCBQVU5DVFVBVElPTiA9ICdcXFxcLixcXFxcK1xcXFwqXFxcXD9cXFxcJFxcXFxAXFxcXHwje31cXFxcKFxcXFwpXFxcXF5cXFxcLVxcXFxbXFxcXF1cXFxcXFxcXC8hJVxcJ1wifj08Pl86Oyc7XG5jbGFzcyBUeXBlYWhlYWRPcHRpb24ge1xuICBjb25zdHJ1Y3RvcihrZXkpIHtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnJlZiA9IHtcbiAgICAgIGN1cnJlbnQ6IG51bGxcbiAgICB9O1xuICAgIHRoaXMuc2V0UmVmRWxlbWVudCA9IHRoaXMuc2V0UmVmRWxlbWVudC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgc2V0UmVmRWxlbWVudChlbGVtZW50KSB7XG4gICAgdGhpcy5yZWYgPSB7XG4gICAgICBjdXJyZW50OiBlbGVtZW50XG4gICAgfTtcbiAgfVxuXG59XG5cbmNvbnN0IHNjcm9sbEludG9WaWV3SWZOZWVkZWQgPSB0YXJnZXQgPT4ge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHlwZWFoZWFkLW1lbnUnKTtcbiAgaWYgKCFjb250YWluZXIpIHJldHVybjtcbiAgY29uc3QgdHlwZWFoZWFkQ29udGFpbmVyTm9kZSA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcudHlwZWFoZWFkLXBvcG92ZXInKTtcbiAgaWYgKCF0eXBlYWhlYWRDb250YWluZXJOb2RlKSByZXR1cm47XG4gIGNvbnN0IHR5cGVhaGVhZFJlY3QgPSB0eXBlYWhlYWRDb250YWluZXJOb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIGlmICh0eXBlYWhlYWRSZWN0LnRvcCArIHR5cGVhaGVhZFJlY3QuaGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgdHlwZWFoZWFkQ29udGFpbmVyTm9kZS5zY3JvbGxJbnRvVmlldyh7XG4gICAgICBibG9jazogJ2NlbnRlcidcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0eXBlYWhlYWRSZWN0LnRvcCA8IDApIHtcbiAgICB0eXBlYWhlYWRDb250YWluZXJOb2RlLnNjcm9sbEludG9WaWV3KHtcbiAgICAgIGJsb2NrOiAnY2VudGVyJ1xuICAgIH0pO1xuICB9XG5cbiAgdGFyZ2V0LnNjcm9sbEludG9WaWV3KHtcbiAgICBibG9jazogJ25lYXJlc3QnXG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZ2V0VGV4dFVwVG9BbmNob3Ioc2VsZWN0aW9uKSB7XG4gIGNvbnN0IGFuY2hvciA9IHNlbGVjdGlvbi5hbmNob3I7XG5cbiAgaWYgKGFuY2hvci50eXBlICE9PSAndGV4dCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGFuY2hvck5vZGUgPSBhbmNob3IuZ2V0Tm9kZSgpO1xuXG4gIGlmICghYW5jaG9yTm9kZS5pc1NpbXBsZVRleHQoKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgYW5jaG9yT2Zmc2V0ID0gYW5jaG9yLm9mZnNldDtcbiAgcmV0dXJuIGFuY2hvck5vZGUuZ2V0VGV4dENvbnRlbnQoKS5zbGljZSgwLCBhbmNob3JPZmZzZXQpO1xufVxuXG5mdW5jdGlvbiB0cnlUb1Bvc2l0aW9uUmFuZ2UobGVhZE9mZnNldCwgcmFuZ2UpIHtcbiAgY29uc3QgZG9tU2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuXG4gIGlmIChkb21TZWxlY3Rpb24gPT09IG51bGwgfHwgIWRvbVNlbGVjdGlvbi5pc0NvbGxhcHNlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGFuY2hvck5vZGUgPSBkb21TZWxlY3Rpb24uYW5jaG9yTm9kZTtcbiAgY29uc3Qgc3RhcnRPZmZzZXQgPSBsZWFkT2Zmc2V0O1xuICBjb25zdCBlbmRPZmZzZXQgPSBkb21TZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xuXG4gIGlmIChhbmNob3JOb2RlID09IG51bGwgfHwgZW5kT2Zmc2V0ID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB0cnkge1xuICAgIHJhbmdlLnNldFN0YXJ0KGFuY2hvck5vZGUsIHN0YXJ0T2Zmc2V0KTtcbiAgICByYW5nZS5zZXRFbmQoYW5jaG9yTm9kZSwgZW5kT2Zmc2V0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0UXVlcnlUZXh0Rm9yU2VhcmNoKGVkaXRvcikge1xuICBsZXQgdGV4dCA9IG51bGw7XG4gIGVkaXRvci5nZXRFZGl0b3JTdGF0ZSgpLnJlYWQoKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9IGxleGljYWwuJGdldFNlbGVjdGlvbigpO1xuXG4gICAgaWYgKCFsZXhpY2FsLiRpc1JhbmdlU2VsZWN0aW9uKHNlbGVjdGlvbikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0ZXh0ID0gZ2V0VGV4dFVwVG9BbmNob3Ioc2VsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiB0ZXh0O1xufVxuLyoqXG4gKiBXYWxrIGJhY2t3YXJkcyBhbG9uZyB1c2VyIGlucHV0IGFuZCBmb3J3YXJkIHRocm91Z2ggZW50aXR5IHRpdGxlIHRvIHRyeVxuICogYW5kIHJlcGxhY2UgbW9yZSBvZiB0aGUgdXNlcidzIHRleHQgd2l0aCBlbnRpdHkuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRGdWxsTWF0Y2hPZmZzZXQoZG9jdW1lbnRUZXh0LCBlbnRyeVRleHQsIG9mZnNldCkge1xuICBsZXQgdHJpZ2dlck9mZnNldCA9IG9mZnNldDtcblxuICBmb3IgKGxldCBpID0gdHJpZ2dlck9mZnNldDsgaSA8PSBlbnRyeVRleHQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnRUZXh0LnN1YnN0cigtaSkgPT09IGVudHJ5VGV4dC5zdWJzdHIoMCwgaSkpIHtcbiAgICAgIHRyaWdnZXJPZmZzZXQgPSBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cmlnZ2VyT2Zmc2V0O1xufVxuLyoqXG4gKiBTcGxpdCBMZXhpY2FsIFRleHROb2RlIGFuZCByZXR1cm4gYSBuZXcgVGV4dE5vZGUgb25seSBjb250YWluaW5nIG1hdGNoZWQgdGV4dC5cbiAqIENvbW1vbiB1c2UgY2FzZXMgaW5jbHVkZTogcmVtb3ZpbmcgdGhlIG5vZGUsIHJlcGxhY2luZyB3aXRoIGEgbmV3IG5vZGUuXG4gKi9cblxuXG5mdW5jdGlvbiBzcGxpdE5vZGVDb250YWluaW5nUXVlcnkoZWRpdG9yLCBtYXRjaCkge1xuICBjb25zdCBzZWxlY3Rpb24gPSBsZXhpY2FsLiRnZXRTZWxlY3Rpb24oKTtcblxuICBpZiAoIWxleGljYWwuJGlzUmFuZ2VTZWxlY3Rpb24oc2VsZWN0aW9uKSB8fCAhc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGFuY2hvciA9IHNlbGVjdGlvbi5hbmNob3I7XG5cbiAgaWYgKGFuY2hvci50eXBlICE9PSAndGV4dCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGFuY2hvck5vZGUgPSBhbmNob3IuZ2V0Tm9kZSgpO1xuXG4gIGlmICghYW5jaG9yTm9kZS5pc1NpbXBsZVRleHQoKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3Qgc2VsZWN0aW9uT2Zmc2V0ID0gYW5jaG9yLm9mZnNldDtcbiAgY29uc3QgdGV4dENvbnRlbnQgPSBhbmNob3JOb2RlLmdldFRleHRDb250ZW50KCkuc2xpY2UoMCwgc2VsZWN0aW9uT2Zmc2V0KTtcbiAgY29uc3QgY2hhcmFjdGVyT2Zmc2V0ID0gbWF0Y2gucmVwbGFjZWFibGVTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBxdWVyeU9mZnNldCA9IGdldEZ1bGxNYXRjaE9mZnNldCh0ZXh0Q29udGVudCwgbWF0Y2gubWF0Y2hpbmdTdHJpbmcsIGNoYXJhY3Rlck9mZnNldCk7XG4gIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gc2VsZWN0aW9uT2Zmc2V0IC0gcXVlcnlPZmZzZXQ7XG5cbiAgaWYgKHN0YXJ0T2Zmc2V0IDwgMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IG5ld05vZGU7XG5cbiAgaWYgKHN0YXJ0T2Zmc2V0ID09PSAwKSB7XG4gICAgW25ld05vZGVdID0gYW5jaG9yTm9kZS5zcGxpdFRleHQoc2VsZWN0aW9uT2Zmc2V0KTtcbiAgfSBlbHNlIHtcbiAgICBbLCBuZXdOb2RlXSA9IGFuY2hvck5vZGUuc3BsaXRUZXh0KHN0YXJ0T2Zmc2V0LCBzZWxlY3Rpb25PZmZzZXQpO1xuICB9XG5cbiAgcmV0dXJuIG5ld05vZGU7XG59XG5cbmZ1bmN0aW9uIGlzU2VsZWN0aW9uT25FbnRpdHlCb3VuZGFyeShlZGl0b3IsIG9mZnNldCkge1xuICBpZiAob2Zmc2V0ICE9PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGVkaXRvci5nZXRFZGl0b3JTdGF0ZSgpLnJlYWQoKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9IGxleGljYWwuJGdldFNlbGVjdGlvbigpO1xuXG4gICAgaWYgKGxleGljYWwuJGlzUmFuZ2VTZWxlY3Rpb24oc2VsZWN0aW9uKSkge1xuICAgICAgY29uc3QgYW5jaG9yID0gc2VsZWN0aW9uLmFuY2hvcjtcbiAgICAgIGNvbnN0IGFuY2hvck5vZGUgPSBhbmNob3IuZ2V0Tm9kZSgpO1xuICAgICAgY29uc3QgcHJldlNpYmxpbmcgPSBhbmNob3JOb2RlLmdldFByZXZpb3VzU2libGluZygpO1xuICAgICAgcmV0dXJuIGxleGljYWwuJGlzVGV4dE5vZGUocHJldlNpYmxpbmcpICYmIHByZXZTaWJsaW5nLmlzVGV4dEVudGl0eSgpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0VHJhbnNpdGlvbihjYWxsYmFjaykge1xuICBpZiAoUmVhY3Quc3RhcnRUcmFuc2l0aW9uKSB7XG4gICAgUmVhY3Quc3RhcnRUcmFuc2l0aW9uKGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59IC8vIEdvdCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80MjU0MzkwOC8yMDEzNTgwXG5cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQsIGluY2x1ZGVIaWRkZW4pIHtcbiAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgY29uc3QgZXhjbHVkZVN0YXRpY1BhcmVudCA9IHN0eWxlLnBvc2l0aW9uID09PSAnYWJzb2x1dGUnO1xuICBjb25zdCBvdmVyZmxvd1JlZ2V4ID0gaW5jbHVkZUhpZGRlbiA/IC8oYXV0b3xzY3JvbGx8aGlkZGVuKS8gOiAvKGF1dG98c2Nyb2xsKS87XG5cbiAgaWYgKHN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBmb3IgKGxldCBwYXJlbnQgPSBlbGVtZW50OyBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudDspIHtcbiAgICBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUocGFyZW50KTtcblxuICAgIGlmIChleGNsdWRlU3RhdGljUGFyZW50ICYmIHN0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG92ZXJmbG93UmVnZXgudGVzdChzdHlsZS5vdmVyZmxvdyArIHN0eWxlLm92ZXJmbG93WSArIHN0eWxlLm92ZXJmbG93WCkpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG59XG5cbmZ1bmN0aW9uIGlzVHJpZ2dlclZpc2libGVJbk5lYXJlc3RTY3JvbGxDb250YWluZXIodGFyZ2V0RWxlbWVudCwgY29udGFpbmVyRWxlbWVudCkge1xuICBjb25zdCB0UmVjdCA9IHRhcmdldEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGNSZWN0ID0gY29udGFpbmVyRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHRSZWN0LnRvcCA+IGNSZWN0LnRvcCAmJiB0UmVjdC50b3AgPCBjUmVjdC5ib3R0b207XG59IC8vIFJlcG9zaXRpb24gdGhlIG1lbnUgb24gc2Nyb2xsLCB3aW5kb3cgcmVzaXplLCBhbmQgZWxlbWVudCByZXNpemUuXG5cblxuZnVuY3Rpb24gdXNlRHluYW1pY1Bvc2l0aW9uaW5nKHJlc29sdXRpb24sIHRhcmdldEVsZW1lbnQsIG9uUmVwb3NpdGlvbiwgb25WaXNpYmlsaXR5Q2hhbmdlKSB7XG4gIGNvbnN0IFtlZGl0b3JdID0gTGV4aWNhbENvbXBvc2VyQ29udGV4dC51c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHRhcmdldEVsZW1lbnQgIT0gbnVsbCAmJiByZXNvbHV0aW9uICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHJvb3RFbGVtZW50ID0gZWRpdG9yLmdldFJvb3RFbGVtZW50KCk7XG4gICAgICBjb25zdCByb290U2Nyb2xsUGFyZW50ID0gcm9vdEVsZW1lbnQgIT0gbnVsbCA/IGdldFNjcm9sbFBhcmVudChyb290RWxlbWVudCwgZmFsc2UpIDogZG9jdW1lbnQuYm9keTtcbiAgICAgIGxldCB0aWNraW5nID0gZmFsc2U7XG4gICAgICBsZXQgcHJldmlvdXNJc0luVmlldyA9IGlzVHJpZ2dlclZpc2libGVJbk5lYXJlc3RTY3JvbGxDb250YWluZXIodGFyZ2V0RWxlbWVudCwgcm9vdFNjcm9sbFBhcmVudCk7XG5cbiAgICAgIGNvbnN0IGhhbmRsZVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aWNraW5nKSB7XG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBvblJlcG9zaXRpb24oKTtcbiAgICAgICAgICAgIHRpY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aWNraW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlzSW5WaWV3ID0gaXNUcmlnZ2VyVmlzaWJsZUluTmVhcmVzdFNjcm9sbENvbnRhaW5lcih0YXJnZXRFbGVtZW50LCByb290U2Nyb2xsUGFyZW50KTtcblxuICAgICAgICBpZiAoaXNJblZpZXcgIT09IHByZXZpb3VzSXNJblZpZXcpIHtcbiAgICAgICAgICBwcmV2aW91c0lzSW5WaWV3ID0gaXNJblZpZXc7XG5cbiAgICAgICAgICBpZiAob25WaXNpYmlsaXR5Q2hhbmdlICE9IG51bGwpIHtcbiAgICAgICAgICAgIG9uVmlzaWJpbGl0eUNoYW5nZShpc0luVmlldyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihvblJlcG9zaXRpb24pO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVwb3NpdGlvbik7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYW5kbGVTY3JvbGwsIHtcbiAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKHRhcmdldEVsZW1lbnQpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXIudW5vYnNlcnZlKHRhcmdldEVsZW1lbnQpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25SZXBvc2l0aW9uKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlU2Nyb2xsKTtcbiAgICAgIH07XG4gICAgfVxuICB9LCBbdGFyZ2V0RWxlbWVudCwgZWRpdG9yLCBvblZpc2liaWxpdHlDaGFuZ2UsIG9uUmVwb3NpdGlvbiwgcmVzb2x1dGlvbl0pO1xufVxuY29uc3QgU0NST0xMX1RZUEVBSEVBRF9PUFRJT05fSU5UT19WSUVXX0NPTU1BTkQgPSBsZXhpY2FsLmNyZWF0ZUNvbW1hbmQoJ1NDUk9MTF9UWVBFQUhFQURfT1BUSU9OX0lOVE9fVklFV19DT01NQU5EJyk7XG5cbmZ1bmN0aW9uIExleGljYWxQb3BvdmVyTWVudSh7XG4gIGNsb3NlLFxuICBlZGl0b3IsXG4gIGFuY2hvckVsZW1lbnRSZWYsXG4gIHJlc29sdXRpb24sXG4gIG9wdGlvbnMsXG4gIG1lbnVSZW5kZXJGbixcbiAgb25TZWxlY3RPcHRpb25cbn0pIHtcbiAgY29uc3QgW3NlbGVjdGVkSW5kZXgsIHNldEhpZ2hsaWdodGVkSW5kZXhdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SGlnaGxpZ2h0ZWRJbmRleCgwKTtcbiAgfSwgW3Jlc29sdXRpb24ubWF0Y2gubWF0Y2hpbmdTdHJpbmddKTtcbiAgY29uc3Qgc2VsZWN0T3B0aW9uQW5kQ2xlYW5VcCA9IFJlYWN0LnVzZUNhbGxiYWNrKHNlbGVjdGVkRW50cnkgPT4ge1xuICAgIGVkaXRvci51cGRhdGUoKCkgPT4ge1xuICAgICAgY29uc3QgdGV4dE5vZGVDb250YWluaW5nUXVlcnkgPSBzcGxpdE5vZGVDb250YWluaW5nUXVlcnkoZWRpdG9yLCByZXNvbHV0aW9uLm1hdGNoKTtcbiAgICAgIG9uU2VsZWN0T3B0aW9uKHNlbGVjdGVkRW50cnksIHRleHROb2RlQ29udGFpbmluZ1F1ZXJ5LCBjbG9zZSwgcmVzb2x1dGlvbi5tYXRjaC5tYXRjaGluZ1N0cmluZyk7XG4gICAgfSk7XG4gIH0sIFtjbG9zZSwgZWRpdG9yLCByZXNvbHV0aW9uLm1hdGNoLCBvblNlbGVjdE9wdGlvbl0pO1xuICBjb25zdCB1cGRhdGVTZWxlY3RlZEluZGV4ID0gUmVhY3QudXNlQ2FsbGJhY2soaW5kZXggPT4ge1xuICAgIGNvbnN0IHJvb3RFbGVtID0gZWRpdG9yLmdldFJvb3RFbGVtZW50KCk7XG5cbiAgICBpZiAocm9vdEVsZW0gIT09IG51bGwpIHtcbiAgICAgIHJvb3RFbGVtLnNldEF0dHJpYnV0ZSgnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgJ3R5cGVhaGVhZC1pdGVtLScgKyBpbmRleCk7XG4gICAgICBzZXRIaWdobGlnaHRlZEluZGV4KGluZGV4KTtcbiAgICB9XG4gIH0sIFtlZGl0b3JdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3Qgcm9vdEVsZW0gPSBlZGl0b3IuZ2V0Um9vdEVsZW1lbnQoKTtcblxuICAgICAgaWYgKHJvb3RFbGVtICE9PSBudWxsKSB7XG4gICAgICAgIHJvb3RFbGVtLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1hY3RpdmVkZXNjZW5kYW50Jyk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2VkaXRvcl0pO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChvcHRpb25zID09PSBudWxsKSB7XG4gICAgICBzZXRIaWdobGlnaHRlZEluZGV4KG51bGwpO1xuICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRJbmRleCA9PT0gbnVsbCkge1xuICAgICAgdXBkYXRlU2VsZWN0ZWRJbmRleCgwKTtcbiAgICB9XG4gIH0sIFtvcHRpb25zLCBzZWxlY3RlZEluZGV4LCB1cGRhdGVTZWxlY3RlZEluZGV4XSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuIHV0aWxzLm1lcmdlUmVnaXN0ZXIoZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChTQ1JPTExfVFlQRUFIRUFEX09QVElPTl9JTlRPX1ZJRVdfQ09NTUFORCwgKHtcbiAgICAgIG9wdGlvblxuICAgIH0pID0+IHtcbiAgICAgIGlmIChvcHRpb24ucmVmICYmIG9wdGlvbi5yZWYuY3VycmVudCAhPSBudWxsKSB7XG4gICAgICAgIHNjcm9sbEludG9WaWV3SWZOZWVkZWQob3B0aW9uLnJlZi5jdXJyZW50KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCBsZXhpY2FsLkNPTU1BTkRfUFJJT1JJVFlfTE9XKSk7XG4gIH0sIFtlZGl0b3IsIHVwZGF0ZVNlbGVjdGVkSW5kZXhdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gdXRpbHMubWVyZ2VSZWdpc3RlcihlZGl0b3IucmVnaXN0ZXJDb21tYW5kKGxleGljYWwuS0VZX0FSUk9XX0RPV05fQ09NTUFORCwgcGF5bG9hZCA9PiB7XG4gICAgICBjb25zdCBldmVudCA9IHBheWxvYWQ7XG5cbiAgICAgIGlmIChvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMubGVuZ3RoICYmIHNlbGVjdGVkSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgbmV3U2VsZWN0ZWRJbmRleCA9IHNlbGVjdGVkSW5kZXggIT09IG9wdGlvbnMubGVuZ3RoIC0gMSA/IHNlbGVjdGVkSW5kZXggKyAxIDogMDtcbiAgICAgICAgdXBkYXRlU2VsZWN0ZWRJbmRleChuZXdTZWxlY3RlZEluZGV4KTtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gb3B0aW9uc1tuZXdTZWxlY3RlZEluZGV4XTtcblxuICAgICAgICBpZiAob3B0aW9uLnJlZiAhPSBudWxsICYmIG9wdGlvbi5yZWYuY3VycmVudCkge1xuICAgICAgICAgIGVkaXRvci5kaXNwYXRjaENvbW1hbmQoU0NST0xMX1RZUEVBSEVBRF9PUFRJT05fSU5UT19WSUVXX0NPTU1BTkQsIHtcbiAgICAgICAgICAgIGluZGV4OiBuZXdTZWxlY3RlZEluZGV4LFxuICAgICAgICAgICAgb3B0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSwgbGV4aWNhbC5DT01NQU5EX1BSSU9SSVRZX0xPVyksIGVkaXRvci5yZWdpc3RlckNvbW1hbmQobGV4aWNhbC5LRVlfQVJST1dfVVBfQ09NTUFORCwgcGF5bG9hZCA9PiB7XG4gICAgICBjb25zdCBldmVudCA9IHBheWxvYWQ7XG5cbiAgICAgIGlmIChvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMubGVuZ3RoICYmIHNlbGVjdGVkSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgbmV3U2VsZWN0ZWRJbmRleCA9IHNlbGVjdGVkSW5kZXggIT09IDAgPyBzZWxlY3RlZEluZGV4IC0gMSA6IG9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgICAgdXBkYXRlU2VsZWN0ZWRJbmRleChuZXdTZWxlY3RlZEluZGV4KTtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gb3B0aW9uc1tuZXdTZWxlY3RlZEluZGV4XTtcblxuICAgICAgICBpZiAob3B0aW9uLnJlZiAhPSBudWxsICYmIG9wdGlvbi5yZWYuY3VycmVudCkge1xuICAgICAgICAgIHNjcm9sbEludG9WaWV3SWZOZWVkZWQob3B0aW9uLnJlZi5jdXJyZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LCBsZXhpY2FsLkNPTU1BTkRfUFJJT1JJVFlfTE9XKSwgZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChsZXhpY2FsLktFWV9FU0NBUEVfQ09NTUFORCwgcGF5bG9hZCA9PiB7XG4gICAgICBjb25zdCBldmVudCA9IHBheWxvYWQ7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICBjbG9zZSgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSwgbGV4aWNhbC5DT01NQU5EX1BSSU9SSVRZX0xPVyksIGVkaXRvci5yZWdpc3RlckNvbW1hbmQobGV4aWNhbC5LRVlfVEFCX0NPTU1BTkQsIHBheWxvYWQgPT4ge1xuICAgICAgY29uc3QgZXZlbnQgPSBwYXlsb2FkO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBzZWxlY3RlZEluZGV4ID09PSBudWxsIHx8IG9wdGlvbnNbc2VsZWN0ZWRJbmRleF0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIHNlbGVjdE9wdGlvbkFuZENsZWFuVXAob3B0aW9uc1tzZWxlY3RlZEluZGV4XSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LCBsZXhpY2FsLkNPTU1BTkRfUFJJT1JJVFlfTE9XKSwgZWRpdG9yLnJlZ2lzdGVyQ29tbWFuZChsZXhpY2FsLktFWV9FTlRFUl9DT01NQU5ELCBldmVudCA9PiB7XG4gICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBzZWxlY3RlZEluZGV4ID09PSBudWxsIHx8IG9wdGlvbnNbc2VsZWN0ZWRJbmRleF0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCAhPT0gbnVsbCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgc2VsZWN0T3B0aW9uQW5kQ2xlYW5VcChvcHRpb25zW3NlbGVjdGVkSW5kZXhdKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sIGxleGljYWwuQ09NTUFORF9QUklPUklUWV9MT1cpKTtcbiAgfSwgW3NlbGVjdE9wdGlvbkFuZENsZWFuVXAsIGNsb3NlLCBlZGl0b3IsIG9wdGlvbnMsIHNlbGVjdGVkSW5kZXgsIHVwZGF0ZVNlbGVjdGVkSW5kZXhdKTtcbiAgY29uc3QgbGlzdEl0ZW1Qcm9wcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBvcHRpb25zLFxuICAgIHNlbGVjdE9wdGlvbkFuZENsZWFuVXAsXG4gICAgc2VsZWN0ZWRJbmRleCxcbiAgICBzZXRIaWdobGlnaHRlZEluZGV4XG4gIH0pLCBbc2VsZWN0T3B0aW9uQW5kQ2xlYW5VcCwgc2VsZWN0ZWRJbmRleCwgb3B0aW9uc10pO1xuICByZXR1cm4gbWVudVJlbmRlckZuKGFuY2hvckVsZW1lbnRSZWYsIGxpc3RJdGVtUHJvcHMsIHJlc29sdXRpb24ubWF0Y2gubWF0Y2hpbmdTdHJpbmcpO1xufVxuXG5mdW5jdGlvbiB1c2VCYXNpY1R5cGVhaGVhZFRyaWdnZXJNYXRjaCh0cmlnZ2VyLCB7XG4gIG1pbkxlbmd0aCA9IDEsXG4gIG1heExlbmd0aCA9IDc1XG59KSB7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayh0ZXh0ID0+IHtcbiAgICBjb25zdCB2YWxpZENoYXJzID0gJ1teJyArIHRyaWdnZXIgKyBQVU5DVFVBVElPTiArICdcXFxcc10nO1xuICAgIGNvbnN0IFR5cGVhaGVhZFRyaWdnZXJSZWdleCA9IG5ldyBSZWdFeHAoJyhefFxcXFxzfFxcXFwoKSgnICsgJ1snICsgdHJpZ2dlciArICddJyArICcoKD86JyArIHZhbGlkQ2hhcnMgKyAnKXswLCcgKyBtYXhMZW5ndGggKyAnfSknICsgJykkJyk7XG4gICAgY29uc3QgbWF0Y2ggPSBUeXBlYWhlYWRUcmlnZ2VyUmVnZXguZXhlYyh0ZXh0KTtcblxuICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgbWF5YmVMZWFkaW5nV2hpdGVzcGFjZSA9IG1hdGNoWzFdO1xuICAgICAgY29uc3QgbWF0Y2hpbmdTdHJpbmcgPSBtYXRjaFszXTtcblxuICAgICAgaWYgKG1hdGNoaW5nU3RyaW5nLmxlbmd0aCA+PSBtaW5MZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsZWFkT2Zmc2V0OiBtYXRjaC5pbmRleCArIG1heWJlTGVhZGluZ1doaXRlc3BhY2UubGVuZ3RoLFxuICAgICAgICAgIG1hdGNoaW5nU3RyaW5nLFxuICAgICAgICAgIHJlcGxhY2VhYmxlU3RyaW5nOiBtYXRjaFsyXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LCBbbWF4TGVuZ3RoLCBtaW5MZW5ndGgsIHRyaWdnZXJdKTtcbn1cblxuZnVuY3Rpb24gdXNlTWVudUFuY2hvclJlZihyZXNvbHV0aW9uLCBzZXRSZXNvbHV0aW9uLCBjbGFzc05hbWUpIHtcbiAgY29uc3QgW2VkaXRvcl0gPSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0LnVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgY29uc3QgYW5jaG9yRWxlbWVudFJlZiA9IFJlYWN0LnVzZVJlZihkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gIGNvbnN0IHBvc2l0aW9uTWVudSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCByb290RWxlbWVudCA9IGVkaXRvci5nZXRSb290RWxlbWVudCgpO1xuICAgIGNvbnN0IGNvbnRhaW5lckRpdiA9IGFuY2hvckVsZW1lbnRSZWYuY3VycmVudDtcblxuICAgIGlmIChyb290RWxlbWVudCAhPT0gbnVsbCAmJiByZXNvbHV0aW9uICE9PSBudWxsKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGxlZnQsXG4gICAgICAgIHRvcCxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgICAgfSA9IHJlc29sdXRpb24uZ2V0UmVjdCgpO1xuICAgICAgY29udGFpbmVyRGl2LnN0eWxlLnRvcCA9IGAke3RvcCArIHdpbmRvdy5wYWdlWU9mZnNldH1weGA7XG4gICAgICBjb250YWluZXJEaXYuc3R5bGUubGVmdCA9IGAke2xlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXR9cHhgO1xuICAgICAgY29udGFpbmVyRGl2LnN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGA7XG4gICAgICBjb250YWluZXJEaXYuc3R5bGUud2lkdGggPSBgJHt3aWR0aH1weGA7XG5cbiAgICAgIGlmICghY29udGFpbmVyRGl2LmlzQ29ubmVjdGVkKSB7XG4gICAgICAgIGlmIChjbGFzc05hbWUgIT0gbnVsbCkge1xuICAgICAgICAgIGNvbnRhaW5lckRpdi5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb250YWluZXJEaXYuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ1R5cGVhaGVhZCBtZW51Jyk7XG4gICAgICAgIGNvbnRhaW5lckRpdi5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3R5cGVhaGVhZC1tZW51Jyk7XG4gICAgICAgIGNvbnRhaW5lckRpdi5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbGlzdGJveCcpO1xuICAgICAgICBjb250YWluZXJEaXYuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGNvbnRhaW5lckRpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKGNvbnRhaW5lckRpdik7XG4gICAgICB9XG5cbiAgICAgIGFuY2hvckVsZW1lbnRSZWYuY3VycmVudCA9IGNvbnRhaW5lckRpdjtcbiAgICAgIHJvb3RFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycsICd0eXBlYWhlYWQtbWVudScpO1xuICAgIH1cbiAgfSwgW2VkaXRvciwgcmVzb2x1dGlvbiwgY2xhc3NOYW1lXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgcm9vdEVsZW1lbnQgPSBlZGl0b3IuZ2V0Um9vdEVsZW1lbnQoKTtcblxuICAgIGlmIChyZXNvbHV0aW9uICE9PSBudWxsKSB7XG4gICAgICBwb3NpdGlvbk1lbnUoKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChyb290RWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHJvb3RFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29udGFpbmVyRGl2ID0gYW5jaG9yRWxlbWVudFJlZi5jdXJyZW50O1xuXG4gICAgICAgIGlmIChjb250YWluZXJEaXYgIT09IG51bGwgJiYgY29udGFpbmVyRGl2LmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgY29udGFpbmVyRGl2LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSwgW2VkaXRvciwgcG9zaXRpb25NZW51LCByZXNvbHV0aW9uXSk7XG4gIGNvbnN0IG9uVmlzaWJpbGl0eUNoYW5nZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGlzSW5WaWV3ID0+IHtcbiAgICBpZiAocmVzb2x1dGlvbiAhPT0gbnVsbCkge1xuICAgICAgaWYgKCFpc0luVmlldykge1xuICAgICAgICBzZXRSZXNvbHV0aW9uKG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW3Jlc29sdXRpb24sIHNldFJlc29sdXRpb25dKTtcbiAgdXNlRHluYW1pY1Bvc2l0aW9uaW5nKHJlc29sdXRpb24sIGFuY2hvckVsZW1lbnRSZWYuY3VycmVudCwgcG9zaXRpb25NZW51LCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICByZXR1cm4gYW5jaG9yRWxlbWVudFJlZjtcbn1cblxuZnVuY3Rpb24gTGV4aWNhbFR5cGVhaGVhZE1lbnVQbHVnaW4oe1xuICBvcHRpb25zLFxuICBvblF1ZXJ5Q2hhbmdlLFxuICBvblNlbGVjdE9wdGlvbixcbiAgb25PcGVuLFxuICBvbkNsb3NlLFxuICBtZW51UmVuZGVyRm4sXG4gIHRyaWdnZXJGbixcbiAgYW5jaG9yQ2xhc3NOYW1lXG59KSB7XG4gIGNvbnN0IFtlZGl0b3JdID0gTGV4aWNhbENvbXBvc2VyQ29udGV4dC51c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KCk7XG4gIGNvbnN0IFtyZXNvbHV0aW9uLCBzZXRSZXNvbHV0aW9uXSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBhbmNob3JFbGVtZW50UmVmID0gdXNlTWVudUFuY2hvclJlZihyZXNvbHV0aW9uLCBzZXRSZXNvbHV0aW9uLCBhbmNob3JDbGFzc05hbWUpO1xuICBjb25zdCBjbG9zZVR5cGVhaGVhZCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRSZXNvbHV0aW9uKG51bGwpO1xuXG4gICAgaWYgKG9uQ2xvc2UgIT0gbnVsbCAmJiByZXNvbHV0aW9uICE9PSBudWxsKSB7XG4gICAgICBvbkNsb3NlKCk7XG4gICAgfVxuICB9LCBbb25DbG9zZSwgcmVzb2x1dGlvbl0pO1xuICBjb25zdCBvcGVuVHlwZWFoZWFkID0gUmVhY3QudXNlQ2FsbGJhY2socmVzID0+IHtcbiAgICBzZXRSZXNvbHV0aW9uKHJlcyk7XG5cbiAgICBpZiAob25PcGVuICE9IG51bGwgJiYgcmVzb2x1dGlvbiA9PT0gbnVsbCkge1xuICAgICAgb25PcGVuKHJlcyk7XG4gICAgfVxuICB9LCBbb25PcGVuLCByZXNvbHV0aW9uXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdXBkYXRlTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICBlZGl0b3IuZ2V0RWRpdG9yU3RhdGUoKS5yZWFkKCgpID0+IHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBsZXhpY2FsLiRnZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgdGV4dCA9IGdldFF1ZXJ5VGV4dEZvclNlYXJjaChlZGl0b3IpO1xuXG4gICAgICAgIGlmICghbGV4aWNhbC4kaXNSYW5nZVNlbGVjdGlvbihzZWxlY3Rpb24pIHx8ICFzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSB8fCB0ZXh0ID09PSBudWxsIHx8IHJhbmdlID09PSBudWxsKSB7XG4gICAgICAgICAgY2xvc2VUeXBlYWhlYWQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtYXRjaCA9IHRyaWdnZXJGbih0ZXh0LCBlZGl0b3IpO1xuICAgICAgICBvblF1ZXJ5Q2hhbmdlKG1hdGNoID8gbWF0Y2gubWF0Y2hpbmdTdHJpbmcgOiBudWxsKTtcblxuICAgICAgICBpZiAobWF0Y2ggIT09IG51bGwgJiYgIWlzU2VsZWN0aW9uT25FbnRpdHlCb3VuZGFyeShlZGl0b3IsIG1hdGNoLmxlYWRPZmZzZXQpKSB7XG4gICAgICAgICAgY29uc3QgaXNSYW5nZVBvc2l0aW9uZWQgPSB0cnlUb1Bvc2l0aW9uUmFuZ2UobWF0Y2gubGVhZE9mZnNldCwgcmFuZ2UpO1xuXG4gICAgICAgICAgaWYgKGlzUmFuZ2VQb3NpdGlvbmVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGFydFRyYW5zaXRpb24oKCkgPT4gb3BlblR5cGVhaGVhZCh7XG4gICAgICAgICAgICAgIGdldFJlY3Q6ICgpID0+IHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICBtYXRjaFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNsb3NlVHlwZWFoZWFkKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVtb3ZlVXBkYXRlTGlzdGVuZXIgPSBlZGl0b3IucmVnaXN0ZXJVcGRhdGVMaXN0ZW5lcih1cGRhdGVMaXN0ZW5lcik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHJlbW92ZVVwZGF0ZUxpc3RlbmVyKCk7XG4gICAgfTtcbiAgfSwgW2VkaXRvciwgdHJpZ2dlckZuLCBvblF1ZXJ5Q2hhbmdlLCByZXNvbHV0aW9uLCBjbG9zZVR5cGVhaGVhZCwgb3BlblR5cGVhaGVhZF0pO1xuICByZXR1cm4gcmVzb2x1dGlvbiA9PT0gbnVsbCB8fCBlZGl0b3IgPT09IG51bGwgPyBudWxsIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGV4aWNhbFBvcG92ZXJNZW51LCB7XG4gICAgY2xvc2U6IGNsb3NlVHlwZWFoZWFkLFxuICAgIHJlc29sdXRpb246IHJlc29sdXRpb24sXG4gICAgZWRpdG9yOiBlZGl0b3IsXG4gICAgYW5jaG9yRWxlbWVudFJlZjogYW5jaG9yRWxlbWVudFJlZixcbiAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgIG1lbnVSZW5kZXJGbjogbWVudVJlbmRlckZuLFxuICAgIG9uU2VsZWN0T3B0aW9uOiBvblNlbGVjdE9wdGlvblxuICB9KTtcbn1cbmZ1bmN0aW9uIExleGljYWxOb2RlTWVudVBsdWdpbih7XG4gIG9wdGlvbnMsXG4gIG5vZGVLZXksXG4gIG9uQ2xvc2UsXG4gIG9uT3BlbixcbiAgb25TZWxlY3RPcHRpb24sXG4gIG1lbnVSZW5kZXJGbixcbiAgYW5jaG9yQ2xhc3NOYW1lXG59KSB7XG4gIGNvbnN0IFtlZGl0b3JdID0gTGV4aWNhbENvbXBvc2VyQ29udGV4dC51c2VMZXhpY2FsQ29tcG9zZXJDb250ZXh0KCk7XG4gIGNvbnN0IFtyZXNvbHV0aW9uLCBzZXRSZXNvbHV0aW9uXSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBhbmNob3JFbGVtZW50UmVmID0gdXNlTWVudUFuY2hvclJlZihyZXNvbHV0aW9uLCBzZXRSZXNvbHV0aW9uLCBhbmNob3JDbGFzc05hbWUpO1xuICBjb25zdCBjbG9zZU5vZGVNZW51ID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldFJlc29sdXRpb24obnVsbCk7XG5cbiAgICBpZiAob25DbG9zZSAhPSBudWxsICYmIHJlc29sdXRpb24gIT09IG51bGwpIHtcbiAgICAgIG9uQ2xvc2UoKTtcbiAgICB9XG4gIH0sIFtvbkNsb3NlLCByZXNvbHV0aW9uXSk7XG4gIGNvbnN0IG9wZW5Ob2RlTWVudSA9IFJlYWN0LnVzZUNhbGxiYWNrKHJlcyA9PiB7XG4gICAgc2V0UmVzb2x1dGlvbihyZXMpO1xuXG4gICAgaWYgKG9uT3BlbiAhPSBudWxsICYmIHJlc29sdXRpb24gPT09IG51bGwpIHtcbiAgICAgIG9uT3BlbihyZXMpO1xuICAgIH1cbiAgfSwgW29uT3BlbiwgcmVzb2x1dGlvbl0pO1xuICBjb25zdCBwb3NpdGlvbk9yQ2xvc2VNZW51ID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChub2RlS2V5KSB7XG4gICAgICBlZGl0b3IudXBkYXRlKCgpID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGxleGljYWwuJGdldE5vZGVCeUtleShub2RlS2V5KTtcbiAgICAgICAgY29uc3QgZG9tRWxlbWVudCA9IGVkaXRvci5nZXRFbGVtZW50QnlLZXkobm9kZUtleSk7XG5cbiAgICAgICAgaWYgKG5vZGUgIT0gbnVsbCAmJiBkb21FbGVtZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBjb25zdCB0ZXh0ID0gbm9kZS5nZXRUZXh0Q29udGVudCgpO1xuXG4gICAgICAgICAgaWYgKHJlc29sdXRpb24gPT0gbnVsbCB8fCByZXNvbHV0aW9uLm1hdGNoLm1hdGNoaW5nU3RyaW5nICE9PSB0ZXh0KSB7XG4gICAgICAgICAgICBzdGFydFRyYW5zaXRpb24oKCkgPT4gb3Blbk5vZGVNZW51KHtcbiAgICAgICAgICAgICAgZ2V0UmVjdDogKCkgPT4gZG9tRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgbWF0Y2g6IHtcbiAgICAgICAgICAgICAgICBsZWFkT2Zmc2V0OiB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICBtYXRjaGluZ1N0cmluZzogdGV4dCxcbiAgICAgICAgICAgICAgICByZXBsYWNlYWJsZVN0cmluZzogdGV4dFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG5vZGVLZXkgPT0gbnVsbCAmJiByZXNvbHV0aW9uICE9IG51bGwpIHtcbiAgICAgIGNsb3NlTm9kZU1lbnUoKTtcbiAgICB9XG4gIH0sIFtjbG9zZU5vZGVNZW51LCBlZGl0b3IsIG5vZGVLZXksIG9wZW5Ob2RlTWVudSwgcmVzb2x1dGlvbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHBvc2l0aW9uT3JDbG9zZU1lbnUoKTtcbiAgfSwgW3Bvc2l0aW9uT3JDbG9zZU1lbnUsIG5vZGVLZXldKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobm9kZUtleSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gZWRpdG9yLnJlZ2lzdGVyVXBkYXRlTGlzdGVuZXIoKHtcbiAgICAgICAgZGlydHlFbGVtZW50c1xuICAgICAgfSkgPT4ge1xuICAgICAgICBpZiAoZGlydHlFbGVtZW50cy5nZXQobm9kZUtleSkpIHtcbiAgICAgICAgICBwb3NpdGlvbk9yQ2xvc2VNZW51KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2VkaXRvciwgcG9zaXRpb25PckNsb3NlTWVudSwgbm9kZUtleV0pO1xuICByZXR1cm4gcmVzb2x1dGlvbiA9PT0gbnVsbCB8fCBlZGl0b3IgPT09IG51bGwgPyBudWxsIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGV4aWNhbFBvcG92ZXJNZW51LCB7XG4gICAgY2xvc2U6IGNsb3NlTm9kZU1lbnUsXG4gICAgcmVzb2x1dGlvbjogcmVzb2x1dGlvbixcbiAgICBlZGl0b3I6IGVkaXRvcixcbiAgICBhbmNob3JFbGVtZW50UmVmOiBhbmNob3JFbGVtZW50UmVmLFxuICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgbWVudVJlbmRlckZuOiBtZW51UmVuZGVyRm4sXG4gICAgb25TZWxlY3RPcHRpb246IG9uU2VsZWN0T3B0aW9uXG4gIH0pO1xufVxuXG5leHBvcnRzLkxleGljYWxOb2RlTWVudVBsdWdpbiA9IExleGljYWxOb2RlTWVudVBsdWdpbjtcbmV4cG9ydHMuTGV4aWNhbFR5cGVhaGVhZE1lbnVQbHVnaW4gPSBMZXhpY2FsVHlwZWFoZWFkTWVudVBsdWdpbjtcbmV4cG9ydHMuUFVOQ1RVQVRJT04gPSBQVU5DVFVBVElPTjtcbmV4cG9ydHMuU0NST0xMX1RZUEVBSEVBRF9PUFRJT05fSU5UT19WSUVXX0NPTU1BTkQgPSBTQ1JPTExfVFlQRUFIRUFEX09QVElPTl9JTlRPX1ZJRVdfQ09NTUFORDtcbmV4cG9ydHMuVHlwZWFoZWFkT3B0aW9uID0gVHlwZWFoZWFkT3B0aW9uO1xuZXhwb3J0cy5nZXRTY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQ7XG5leHBvcnRzLnVzZUJhc2ljVHlwZWFoZWFkVHJpZ2dlck1hdGNoID0gdXNlQmFzaWNUeXBlYWhlYWRUcmlnZ2VyTWF0Y2g7XG5leHBvcnRzLnVzZUR5bmFtaWNQb3NpdGlvbmluZyA9IHVzZUR5bmFtaWNQb3NpdGlvbmluZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalTypeaheadMenuPlugin.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/LexicalTypeaheadMenuPlugin.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@lexical/react/LexicalTypeaheadMenuPlugin.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalTypeaheadMenuPlugin =  true ? __webpack_require__(/*! ./LexicalTypeaheadMenuPlugin.dev.js */ \"(ssr)/./node_modules/@lexical/react/LexicalTypeaheadMenuPlugin.dev.js\") : 0\nmodule.exports = LexicalTypeaheadMenuPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFR5cGVhaGVhZE1lbnVQbHVnaW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWixtQ0FBbUMsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLGtIQUFxQyxJQUFJLENBQStDO0FBQzVLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvTGV4aWNhbFR5cGVhaGVhZE1lbnVQbHVnaW4uanM/ZjNhNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgTGV4aWNhbFR5cGVhaGVhZE1lbnVQbHVnaW4gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbFR5cGVhaGVhZE1lbnVQbHVnaW4uZGV2LmpzJykgOiByZXF1aXJlKCcuL0xleGljYWxUeXBlYWhlYWRNZW51UGx1Z2luLnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsVHlwZWFoZWFkTWVudVBsdWdpbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/LexicalTypeaheadMenuPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/useLexicalEditable.dev.js":
/*!***************************************************************!*\
  !*** ./node_modules/@lexical/react/useLexicalEditable.dev.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst useLayoutEffectImpl = CAN_USE_DOM ? react.useLayoutEffect : react.useEffect;\nvar useLayoutEffect = useLayoutEffectImpl;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Shortcut to Lexical subscriptions when values are used for render.\n */\nfunction useLexicalSubscription(subscription) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const initializedSubscription = react.useMemo(() => subscription(editor), [editor, subscription]);\n  const valueRef = react.useRef(initializedSubscription.initialValueFn());\n  const [value, setValue] = react.useState(valueRef.current);\n  useLayoutEffect(() => {\n    const {\n      initialValueFn,\n      subscribe\n    } = initializedSubscription;\n    const currentValue = initialValueFn();\n\n    if (valueRef.current !== currentValue) {\n      valueRef.current = currentValue;\n      setValue(currentValue);\n    }\n\n    return subscribe(newValue => {\n      valueRef.current = newValue;\n      setValue(newValue);\n    });\n  }, [initializedSubscription, subscription]);\n  return value;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction subscription(editor) {\n  return {\n    initialValueFn: () => editor.isEditable(),\n    subscribe: callback => {\n      return editor.registerEditableListener(callback);\n    }\n  };\n}\n\nfunction useLexicalEditable() {\n  return useLexicalSubscription(subscription);\n}\n\nmodule.exports = useLexicalEditable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvdXNlTGV4aWNhbEVkaXRhYmxlLmRldi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyw0R0FBdUM7QUFDNUUsWUFBWSxtQkFBTyxDQUFDLHdHQUFPOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvdXNlTGV4aWNhbEVkaXRhYmxlLmRldi5qcz9mNTFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTGV4aWNhbENvbXBvc2VyQ29udGV4dCA9IHJlcXVpcmUoJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnKTtcbnZhciByZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbmNvbnN0IENBTl9VU0VfRE9NID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuY29uc3QgdXNlTGF5b3V0RWZmZWN0SW1wbCA9IENBTl9VU0VfRE9NID8gcmVhY3QudXNlTGF5b3V0RWZmZWN0IDogcmVhY3QudXNlRWZmZWN0O1xudmFyIHVzZUxheW91dEVmZmVjdCA9IHVzZUxheW91dEVmZmVjdEltcGw7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuLyoqXG4gKiBTaG9ydGN1dCB0byBMZXhpY2FsIHN1YnNjcmlwdGlvbnMgd2hlbiB2YWx1ZXMgYXJlIHVzZWQgZm9yIHJlbmRlci5cbiAqL1xuZnVuY3Rpb24gdXNlTGV4aWNhbFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pIHtcbiAgY29uc3QgW2VkaXRvcl0gPSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0LnVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgY29uc3QgaW5pdGlhbGl6ZWRTdWJzY3JpcHRpb24gPSByZWFjdC51c2VNZW1vKCgpID0+IHN1YnNjcmlwdGlvbihlZGl0b3IpLCBbZWRpdG9yLCBzdWJzY3JpcHRpb25dKTtcbiAgY29uc3QgdmFsdWVSZWYgPSByZWFjdC51c2VSZWYoaW5pdGlhbGl6ZWRTdWJzY3JpcHRpb24uaW5pdGlhbFZhbHVlRm4oKSk7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gcmVhY3QudXNlU3RhdGUodmFsdWVSZWYuY3VycmVudCk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgaW5pdGlhbFZhbHVlRm4sXG4gICAgICBzdWJzY3JpYmVcbiAgICB9ID0gaW5pdGlhbGl6ZWRTdWJzY3JpcHRpb247XG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gaW5pdGlhbFZhbHVlRm4oKTtcblxuICAgIGlmICh2YWx1ZVJlZi5jdXJyZW50ICE9PSBjdXJyZW50VmFsdWUpIHtcbiAgICAgIHZhbHVlUmVmLmN1cnJlbnQgPSBjdXJyZW50VmFsdWU7XG4gICAgICBzZXRWYWx1ZShjdXJyZW50VmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzY3JpYmUobmV3VmFsdWUgPT4ge1xuICAgICAgdmFsdWVSZWYuY3VycmVudCA9IG5ld1ZhbHVlO1xuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgIH0pO1xuICB9LCBbaW5pdGlhbGl6ZWRTdWJzY3JpcHRpb24sIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gc3Vic2NyaXB0aW9uKGVkaXRvcikge1xuICByZXR1cm4ge1xuICAgIGluaXRpYWxWYWx1ZUZuOiAoKSA9PiBlZGl0b3IuaXNFZGl0YWJsZSgpLFxuICAgIHN1YnNjcmliZTogY2FsbGJhY2sgPT4ge1xuICAgICAgcmV0dXJuIGVkaXRvci5yZWdpc3RlckVkaXRhYmxlTGlzdGVuZXIoY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlTGV4aWNhbEVkaXRhYmxlKCkge1xuICByZXR1cm4gdXNlTGV4aWNhbFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZUxleGljYWxFZGl0YWJsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/useLexicalEditable.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/useLexicalEditable.js":
/*!***********************************************************!*\
  !*** ./node_modules/@lexical/react/useLexicalEditable.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst useLexicalEditable =  true ? __webpack_require__(/*! ./useLexicalEditable.dev.js */ \"(ssr)/./node_modules/@lexical/react/useLexicalEditable.dev.js\") : 0\nmodule.exports = useLexicalEditable;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvdXNlTGV4aWNhbEVkaXRhYmxlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1osMkJBQTJCLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyxrR0FBNkIsSUFBSSxDQUF1QztBQUNwSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L3VzZUxleGljYWxFZGl0YWJsZS5qcz82ZmRiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCB1c2VMZXhpY2FsRWRpdGFibGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vdXNlTGV4aWNhbEVkaXRhYmxlLmRldi5qcycpIDogcmVxdWlyZSgnLi91c2VMZXhpY2FsRWRpdGFibGUucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IHVzZUxleGljYWxFZGl0YWJsZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/useLexicalEditable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/useLexicalNodeSelection.dev.js":
/*!********************************************************************!*\
  !*** ./node_modules/@lexical/react/useLexicalNodeSelection.dev.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction isNodeSelected(editor, key) {\n  return editor.getEditorState().read(() => {\n    const node = lexical.$getNodeByKey(key);\n\n    if (node === null) {\n      return false;\n    }\n\n    return node.isSelected();\n  });\n}\n\nfunction useLexicalNodeSelection(key) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  const [isSelected, setIsSelected] = react.useState(() => isNodeSelected(editor, key));\n  react.useEffect(() => {\n    let isMounted = true;\n    const unregister = editor.registerUpdateListener(() => {\n      if (isMounted) {\n        setIsSelected(isNodeSelected(editor, key));\n      }\n    });\n    return () => {\n      isMounted = false;\n      unregister();\n    };\n  }, [editor, key]);\n  const setSelected = react.useCallback(selected => {\n    editor.update(() => {\n      let selection = lexical.$getSelection();\n\n      if (!lexical.$isNodeSelection(selection)) {\n        selection = lexical.$createNodeSelection();\n        lexical.$setSelection(selection);\n      }\n\n      if (selected) {\n        selection.add(key);\n      } else {\n        selection.delete(key);\n      }\n    });\n  }, [editor, key]);\n  const clearSelected = react.useCallback(() => {\n    editor.update(() => {\n      const selection = lexical.$getSelection();\n\n      if (lexical.$isNodeSelection(selection)) {\n        selection.clear();\n      }\n    });\n  }, [editor]);\n  return [isSelected, setSelected, clearSelected];\n}\n\nexports.useLexicalNodeSelection = useLexicalNodeSelection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvdXNlTGV4aWNhbE5vZGVTZWxlY3Rpb24uZGV2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViLDZCQUE2QixtQkFBTyxDQUFDLDRHQUF1QztBQUM1RSxjQUFjLG1CQUFPLENBQUMsd0RBQVM7QUFDL0IsWUFBWSxtQkFBTyxDQUFDLHdHQUFPOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3JlYWN0L3VzZUxleGljYWxOb2RlU2VsZWN0aW9uLmRldi5qcz8yNTY1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTGV4aWNhbENvbXBvc2VyQ29udGV4dCA9IHJlcXVpcmUoJ0BsZXhpY2FsL3JlYWN0L0xleGljYWxDb21wb3NlckNvbnRleHQnKTtcbnZhciBsZXhpY2FsID0gcmVxdWlyZSgnbGV4aWNhbCcpO1xudmFyIHJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBpc05vZGVTZWxlY3RlZChlZGl0b3IsIGtleSkge1xuICByZXR1cm4gZWRpdG9yLmdldEVkaXRvclN0YXRlKCkucmVhZCgoKSA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IGxleGljYWwuJGdldE5vZGVCeUtleShrZXkpO1xuXG4gICAgaWYgKG5vZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZS5pc1NlbGVjdGVkKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1c2VMZXhpY2FsTm9kZVNlbGVjdGlvbihrZXkpIHtcbiAgY29uc3QgW2VkaXRvcl0gPSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0LnVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgY29uc3QgW2lzU2VsZWN0ZWQsIHNldElzU2VsZWN0ZWRdID0gcmVhY3QudXNlU3RhdGUoKCkgPT4gaXNOb2RlU2VsZWN0ZWQoZWRpdG9yLCBrZXkpKTtcbiAgcmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgaXNNb3VudGVkID0gdHJ1ZTtcbiAgICBjb25zdCB1bnJlZ2lzdGVyID0gZWRpdG9yLnJlZ2lzdGVyVXBkYXRlTGlzdGVuZXIoKCkgPT4ge1xuICAgICAgaWYgKGlzTW91bnRlZCkge1xuICAgICAgICBzZXRJc1NlbGVjdGVkKGlzTm9kZVNlbGVjdGVkKGVkaXRvciwga2V5KSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgdW5yZWdpc3RlcigpO1xuICAgIH07XG4gIH0sIFtlZGl0b3IsIGtleV0pO1xuICBjb25zdCBzZXRTZWxlY3RlZCA9IHJlYWN0LnVzZUNhbGxiYWNrKHNlbGVjdGVkID0+IHtcbiAgICBlZGl0b3IudXBkYXRlKCgpID0+IHtcbiAgICAgIGxldCBzZWxlY3Rpb24gPSBsZXhpY2FsLiRnZXRTZWxlY3Rpb24oKTtcblxuICAgICAgaWYgKCFsZXhpY2FsLiRpc05vZGVTZWxlY3Rpb24oc2VsZWN0aW9uKSkge1xuICAgICAgICBzZWxlY3Rpb24gPSBsZXhpY2FsLiRjcmVhdGVOb2RlU2VsZWN0aW9uKCk7XG4gICAgICAgIGxleGljYWwuJHNldFNlbGVjdGlvbihzZWxlY3Rpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgc2VsZWN0aW9uLmFkZChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0aW9uLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LCBbZWRpdG9yLCBrZXldKTtcbiAgY29uc3QgY2xlYXJTZWxlY3RlZCA9IHJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBlZGl0b3IudXBkYXRlKCgpID0+IHtcbiAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGxleGljYWwuJGdldFNlbGVjdGlvbigpO1xuXG4gICAgICBpZiAobGV4aWNhbC4kaXNOb2RlU2VsZWN0aW9uKHNlbGVjdGlvbikpIHtcbiAgICAgICAgc2VsZWN0aW9uLmNsZWFyKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sIFtlZGl0b3JdKTtcbiAgcmV0dXJuIFtpc1NlbGVjdGVkLCBzZXRTZWxlY3RlZCwgY2xlYXJTZWxlY3RlZF07XG59XG5cbmV4cG9ydHMudXNlTGV4aWNhbE5vZGVTZWxlY3Rpb24gPSB1c2VMZXhpY2FsTm9kZVNlbGVjdGlvbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/useLexicalNodeSelection.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/useLexicalNodeSelection.js":
/*!****************************************************************!*\
  !*** ./node_modules/@lexical/react/useLexicalNodeSelection.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst useLexicalNodeSelection =  true ? __webpack_require__(/*! ./useLexicalNodeSelection.dev.js */ \"(ssr)/./node_modules/@lexical/react/useLexicalNodeSelection.dev.js\") : 0\nmodule.exports = useLexicalNodeSelection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvdXNlTGV4aWNhbE5vZGVTZWxlY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWixnQ0FBZ0MsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLDRHQUFrQyxJQUFJLENBQTRDO0FBQ25LIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvdXNlTGV4aWNhbE5vZGVTZWxlY3Rpb24uanM/NGU5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgdXNlTGV4aWNhbE5vZGVTZWxlY3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vdXNlTGV4aWNhbE5vZGVTZWxlY3Rpb24uZGV2LmpzJykgOiByZXF1aXJlKCcuL3VzZUxleGljYWxOb2RlU2VsZWN0aW9uLnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSB1c2VMZXhpY2FsTm9kZVNlbGVjdGlvbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/useLexicalNodeSelection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/useLexicalTextEntity.dev.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@lexical/react/useLexicalTextEntity.dev.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar LexicalComposerContext = __webpack_require__(/*! @lexical/react/LexicalComposerContext */ \"(ssr)/./node_modules/@lexical/react/LexicalComposerContext.js\");\nvar text = __webpack_require__(/*! @lexical/text */ \"(ssr)/./node_modules/@lexical/text/LexicalText.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction useLexicalTextEntity(getMatch, targetNode, createNode) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    return utils.mergeRegister(...text.registerLexicalTextEntity(editor, getMatch, targetNode, createNode));\n  }, [createNode, editor, getMatch, targetNode]);\n}\n\nexports.useLexicalTextEntity = useLexicalTextEntity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvdXNlTGV4aWNhbFRleHRFbnRpdHkuZGV2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViLDZCQUE2QixtQkFBTyxDQUFDLDRHQUF1QztBQUM1RSxXQUFXLG1CQUFPLENBQUMsd0VBQWU7QUFDbEMsWUFBWSxtQkFBTyxDQUFDLDJFQUFnQjtBQUNwQyxZQUFZLG1CQUFPLENBQUMsd0dBQU87O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsNEJBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvdXNlTGV4aWNhbFRleHRFbnRpdHkuZGV2LmpzPzlmNzQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBMZXhpY2FsQ29tcG9zZXJDb250ZXh0ID0gcmVxdWlyZSgnQGxleGljYWwvcmVhY3QvTGV4aWNhbENvbXBvc2VyQ29udGV4dCcpO1xudmFyIHRleHQgPSByZXF1aXJlKCdAbGV4aWNhbC90ZXh0Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCdAbGV4aWNhbC91dGlscycpO1xudmFyIHJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuZnVuY3Rpb24gdXNlTGV4aWNhbFRleHRFbnRpdHkoZ2V0TWF0Y2gsIHRhcmdldE5vZGUsIGNyZWF0ZU5vZGUpIHtcbiAgY29uc3QgW2VkaXRvcl0gPSBMZXhpY2FsQ29tcG9zZXJDb250ZXh0LnVzZUxleGljYWxDb21wb3NlckNvbnRleHQoKTtcbiAgcmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gdXRpbHMubWVyZ2VSZWdpc3RlciguLi50ZXh0LnJlZ2lzdGVyTGV4aWNhbFRleHRFbnRpdHkoZWRpdG9yLCBnZXRNYXRjaCwgdGFyZ2V0Tm9kZSwgY3JlYXRlTm9kZSkpO1xuICB9LCBbY3JlYXRlTm9kZSwgZWRpdG9yLCBnZXRNYXRjaCwgdGFyZ2V0Tm9kZV0pO1xufVxuXG5leHBvcnRzLnVzZUxleGljYWxUZXh0RW50aXR5ID0gdXNlTGV4aWNhbFRleHRFbnRpdHk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/useLexicalTextEntity.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/react/useLexicalTextEntity.js":
/*!*************************************************************!*\
  !*** ./node_modules/@lexical/react/useLexicalTextEntity.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst useLexicalTextEntity =  true ? __webpack_require__(/*! ./useLexicalTextEntity.dev.js */ \"(ssr)/./node_modules/@lexical/react/useLexicalTextEntity.dev.js\") : 0\nmodule.exports = useLexicalTextEntity;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvdXNlTGV4aWNhbFRleHRFbnRpdHkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWiw2QkFBNkIsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLHNHQUErQixJQUFJLENBQXlDO0FBQzFKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmVhY3QvdXNlTGV4aWNhbFRleHRFbnRpdHkuanM/Mzg1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgdXNlTGV4aWNhbFRleHRFbnRpdHkgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vdXNlTGV4aWNhbFRleHRFbnRpdHkuZGV2LmpzJykgOiByZXF1aXJlKCcuL3VzZUxleGljYWxUZXh0RW50aXR5LnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSB1c2VMZXhpY2FsVGV4dEVudGl0eTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/react/useLexicalTextEntity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/rich-text/LexicalRichText.dev.js":
/*!****************************************************************!*\
  !*** ./node_modules/@lexical/rich-text/LexicalRichText.dev.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar clipboard = __webpack_require__(/*! @lexical/clipboard */ \"(ssr)/./node_modules/@lexical/clipboard/LexicalClipboard.js\");\nvar selection = __webpack_require__(/*! @lexical/selection */ \"(ssr)/./node_modules/@lexical/selection/LexicalSelection.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction caretFromPoint(x, y) {\n  if (typeof document.caretRangeFromPoint !== 'undefined') {\n    const range = document.caretRangeFromPoint(x, y);\n\n    if (range === null) {\n      return null;\n    }\n\n    return {\n      node: range.startContainer,\n      offset: range.startOffset\n    }; // @ts-ignore\n  } else if (document.caretPositionFromPoint !== 'undefined') {\n    // @ts-ignore FF - no types\n    const range = document.caretPositionFromPoint(x, y);\n\n    if (range === null) {\n      return null;\n    }\n\n    return {\n      node: range.offsetNode,\n      offset: range.offset\n    };\n  } else {\n    // Gracefully handle IE\n    return null;\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nCAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nCAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\n\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent); // export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/** @module @lexical/rich-text */\nconst DRAG_DROP_PASTE = lexical.createCommand('DRAG_DROP_PASTE_FILE');\n\n/** @noInheritDoc */\nclass QuoteNode extends lexical.ElementNode {\n  static getType() {\n    return 'quote';\n  }\n\n  static clone(node) {\n    return new QuoteNode(node.__key);\n  }\n\n  constructor(key) {\n    super(key);\n  } // View\n\n\n  createDOM(config) {\n    const element = document.createElement('blockquote');\n    utils.addClassNamesToElement(element, config.theme.quote);\n    return element;\n  }\n\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n\n  static importDOM() {\n    return {\n      blockquote: node => ({\n        conversion: convertBlockquoteElement,\n        priority: 0\n      })\n    };\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createQuoteNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      type: 'quote'\n    };\n  } // Mutation\n\n\n  insertNewAfter(_, restoreSelection) {\n    const newBlock = lexical.$createParagraphNode();\n    const direction = this.getDirection();\n    newBlock.setDirection(direction);\n    this.insertAfter(newBlock, restoreSelection);\n    return newBlock;\n  }\n\n  collapseAtStart() {\n    const paragraph = lexical.$createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => paragraph.append(child));\n    this.replace(paragraph);\n    return true;\n  }\n\n}\nfunction $createQuoteNode() {\n  return lexical.$applyNodeReplacement(new QuoteNode());\n}\nfunction $isQuoteNode(node) {\n  return node instanceof QuoteNode;\n}\n\n/** @noInheritDoc */\nclass HeadingNode extends lexical.ElementNode {\n  /** @internal */\n  static getType() {\n    return 'heading';\n  }\n\n  static clone(node) {\n    return new HeadingNode(node.__tag, node.__key);\n  }\n\n  constructor(tag, key) {\n    super(key);\n    this.__tag = tag;\n  }\n\n  getTag() {\n    return this.__tag;\n  } // View\n\n\n  createDOM(config) {\n    const tag = this.__tag;\n    const element = document.createElement(tag);\n    const theme = config.theme;\n    const classNames = theme.heading;\n\n    if (classNames !== undefined) {\n      const className = classNames[tag];\n      utils.addClassNamesToElement(element, className);\n    }\n\n    return element;\n  }\n\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n\n  static importDOM() {\n    return {\n      h1: node => ({\n        conversion: convertHeadingElement,\n        priority: 0\n      }),\n      h2: node => ({\n        conversion: convertHeadingElement,\n        priority: 0\n      }),\n      h3: node => ({\n        conversion: convertHeadingElement,\n        priority: 0\n      }),\n      h4: node => ({\n        conversion: convertHeadingElement,\n        priority: 0\n      }),\n      h5: node => ({\n        conversion: convertHeadingElement,\n        priority: 0\n      }),\n      h6: node => ({\n        conversion: convertHeadingElement,\n        priority: 0\n      }),\n      p: node => {\n        // domNode is a <p> since we matched it by nodeName\n        const paragraph = node;\n        const firstChild = paragraph.firstChild;\n\n        if (firstChild !== null && isGoogleDocsTitle(firstChild)) {\n          return {\n            conversion: () => ({\n              node: null\n            }),\n            priority: 3\n          };\n        }\n\n        return null;\n      },\n      span: node => {\n        if (isGoogleDocsTitle(node)) {\n          return {\n            conversion: domNode => {\n              return {\n                node: $createHeadingNode('h1')\n              };\n            },\n            priority: 3\n          };\n        }\n\n        return null;\n      }\n    };\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createHeadingNode(serializedNode.tag);\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      tag: this.getTag(),\n      type: 'heading',\n      version: 1\n    };\n  } // Mutation\n\n\n  insertNewAfter(selection, restoreSelection = true) {\n    const anchorOffet = selection ? selection.anchor.offset : 0;\n    const newElement = anchorOffet > 0 && anchorOffet < this.getTextContentSize() ? $createHeadingNode(this.getTag()) : lexical.$createParagraphNode();\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n\n  collapseAtStart() {\n    const newElement = !this.isEmpty() ? $createHeadingNode(this.getTag()) : lexical.$createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => newElement.append(child));\n    this.replace(newElement);\n    return true;\n  }\n\n  extractWithChild() {\n    return true;\n  }\n\n}\n\nfunction isGoogleDocsTitle(domNode) {\n  if (domNode.nodeName.toLowerCase() === 'span') {\n    return domNode.style.fontSize === '26pt';\n  }\n\n  return false;\n}\n\nfunction convertHeadingElement(domNode) {\n  const nodeName = domNode.nodeName.toLowerCase();\n  let node = null;\n\n  if (nodeName === 'h1' || nodeName === 'h2' || nodeName === 'h3' || nodeName === 'h4' || nodeName === 'h5' || nodeName === 'h6') {\n    node = $createHeadingNode(nodeName);\n  }\n\n  return {\n    node\n  };\n}\n\nfunction convertBlockquoteElement() {\n  const node = $createQuoteNode();\n  return {\n    node\n  };\n}\n\nfunction $createHeadingNode(headingTag) {\n  return lexical.$applyNodeReplacement(new HeadingNode(headingTag));\n}\nfunction $isHeadingNode(node) {\n  return node instanceof HeadingNode;\n}\n\nfunction onPasteForRichText(event, editor) {\n  event.preventDefault();\n  editor.update(() => {\n    const selection = lexical.$getSelection();\n    const clipboardData = event instanceof InputEvent || event instanceof KeyboardEvent ? null : event.clipboardData;\n\n    if (clipboardData != null && (lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection))) {\n      clipboard.$insertDataTransferForRichText(clipboardData, selection, editor);\n    }\n  }, {\n    tag: 'paste'\n  });\n}\n\nasync function onCutForRichText(event, editor) {\n  await clipboard.copyToClipboard(editor, event instanceof ClipboardEvent ? event : null);\n  editor.update(() => {\n    const selection = lexical.$getSelection();\n\n    if (lexical.$isRangeSelection(selection)) {\n      selection.removeText();\n    } else if (lexical.$isNodeSelection(selection)) {\n      selection.getNodes().forEach(node => node.remove());\n    }\n  });\n} // Clipboard may contain files that we aren't allowed to read. While the event is arguably useless,\n// in certain ocassions, we want to know whether it was a file transfer, as opposed to text. We\n// control this with the first boolean flag.\n\n\nfunction eventFiles(event) {\n  let dataTransfer = null;\n\n  if (event instanceof DragEvent) {\n    dataTransfer = event.dataTransfer;\n  } else if (event instanceof ClipboardEvent) {\n    dataTransfer = event.clipboardData;\n  }\n\n  if (dataTransfer === null) {\n    return [false, [], false];\n  }\n\n  const types = dataTransfer.types;\n  const hasFiles = types.includes('Files');\n  const hasContent = types.includes('text/html') || types.includes('text/plain');\n  return [hasFiles, Array.from(dataTransfer.files), hasContent];\n}\n\nfunction handleIndentAndOutdent(insertTab, indentOrOutdent) {\n  const selection = lexical.$getSelection();\n\n  if (!lexical.$isRangeSelection(selection)) {\n    return;\n  }\n\n  const alreadyHandled = new Set();\n  const nodes = selection.getNodes();\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const key = node.getKey();\n\n    if (alreadyHandled.has(key)) {\n      continue;\n    }\n\n    const parentBlock = utils.$getNearestBlockElementAncestorOrThrow(node);\n    const parentKey = parentBlock.getKey();\n\n    if (parentBlock.canInsertTab()) {\n      insertTab(node);\n      alreadyHandled.add(key);\n    } else if (parentBlock.canIndent() && !alreadyHandled.has(parentKey)) {\n      alreadyHandled.add(parentKey);\n      indentOrOutdent(parentBlock);\n    }\n  }\n}\n\nfunction $isTargetWithinDecorator(target) {\n  const node = lexical.$getNearestNodeFromDOMNode(target);\n  return lexical.$isDecoratorNode(node);\n}\n\nfunction $isSelectionAtEndOfRoot(selection) {\n  const focus = selection.focus;\n  return focus.key === 'root' && focus.offset === lexical.$getRoot().getChildrenSize();\n}\n\nfunction registerRichText(editor) {\n  const removeListener = utils.mergeRegister(editor.registerCommand(lexical.CLICK_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n\n    if (lexical.$isNodeSelection(selection)) {\n      selection.clear();\n      return true;\n    }\n\n    return false;\n  }, 0), editor.registerCommand(lexical.DELETE_CHARACTER_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.deleteCharacter(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_WORD_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.deleteWord(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_LINE_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.deleteLine(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, eventOrText => {\n    const selection = lexical.$getSelection();\n\n    if (typeof eventOrText === 'string') {\n      if (lexical.$isRangeSelection(selection)) {\n        selection.insertText(eventOrText);\n      } else if (lexical.DEPRECATED_$isGridSelection(selection)) ;\n    } else {\n      if (!lexical.$isRangeSelection(selection) && !lexical.DEPRECATED_$isGridSelection(selection)) {\n        return false;\n      }\n\n      const dataTransfer = eventOrText.dataTransfer;\n\n      if (dataTransfer != null) {\n        clipboard.$insertDataTransferForRichText(dataTransfer, selection, editor);\n      } else if (lexical.$isRangeSelection(selection)) {\n        const data = eventOrText.data;\n\n        if (data) {\n          selection.insertText(data);\n        }\n\n        return true;\n      }\n    }\n\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.REMOVE_TEXT_COMMAND, () => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.removeText();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.FORMAT_TEXT_COMMAND, format => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.formatText(format);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.FORMAT_ELEMENT_COMMAND, format => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection) && !lexical.$isNodeSelection(selection)) {\n      return false;\n    }\n\n    const nodes = selection.getNodes();\n\n    for (const node of nodes) {\n      const element = utils.$getNearestBlockElementAncestorOrThrow(node);\n      element.setFormat(format);\n    }\n\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_LINE_BREAK_COMMAND, selectStart => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.insertLineBreak(selectStart);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_PARAGRAPH_COMMAND, () => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.insertParagraph();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INDENT_CONTENT_COMMAND, () => {\n    handleIndentAndOutdent(() => {\n      editor.dispatchCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, '\\t');\n    }, block => {\n      const indent = block.getIndent();\n\n      if (indent !== 10) {\n        block.setIndent(indent + 1);\n      }\n    });\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.OUTDENT_CONTENT_COMMAND, () => {\n    handleIndentAndOutdent(node => {\n      if (lexical.$isTextNode(node)) {\n        const textContent = node.getTextContent();\n        const character = textContent[textContent.length - 1];\n\n        if (character === '\\t') {\n          editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, true);\n        }\n      }\n    }, block => {\n      const indent = block.getIndent();\n\n      if (indent !== 0) {\n        block.setIndent(indent - 1);\n      }\n    });\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (lexical.$isNodeSelection(selection) && !$isTargetWithinDecorator(event.target)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n\n      if (nodes.length > 0) {\n        nodes[0].selectPrevious();\n        return true;\n      }\n    } else if (lexical.$isRangeSelection(selection)) {\n      const possibleNode = lexical.$getAdjacentNode(selection.focus, true);\n\n      if (lexical.$isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\n        possibleNode.selectPrevious();\n        event.preventDefault();\n        return true;\n      } else if (lexical.$isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n        possibleNode.select();\n        event.preventDefault();\n        return true;\n      }\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (lexical.$isNodeSelection(selection)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n\n      if (nodes.length > 0) {\n        nodes[0].selectNext(0, 0);\n        return true;\n      }\n    } else if (lexical.$isRangeSelection(selection)) {\n      if ($isSelectionAtEndOfRoot(selection)) {\n        event.preventDefault();\n        return true;\n      }\n\n      const possibleNode = lexical.$getAdjacentNode(selection.focus, false);\n\n      if (lexical.$isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\n        possibleNode.selectNext();\n        event.preventDefault();\n        return true;\n      }\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, event => {\n    const selection$1 = lexical.$getSelection();\n\n    if (lexical.$isNodeSelection(selection$1)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection$1.getNodes();\n\n      if (nodes.length > 0) {\n        event.preventDefault();\n        nodes[0].selectPrevious();\n        return true;\n      }\n    }\n\n    if (!lexical.$isRangeSelection(selection$1)) {\n      return false;\n    }\n\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, true)) {\n      const isHoldingShift = event.shiftKey;\n      event.preventDefault();\n      selection.$moveCharacter(selection$1, isHoldingShift, true);\n      return true;\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_RIGHT_COMMAND, event => {\n    const selection$1 = lexical.$getSelection();\n\n    if (lexical.$isNodeSelection(selection$1) && !$isTargetWithinDecorator(event.target)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection$1.getNodes();\n\n      if (nodes.length > 0) {\n        event.preventDefault();\n        nodes[0].selectNext(0, 0);\n        return true;\n      }\n    }\n\n    if (!lexical.$isRangeSelection(selection$1)) {\n      return false;\n    }\n\n    const isHoldingShift = event.shiftKey;\n\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, false)) {\n      event.preventDefault();\n      selection.$moveCharacter(selection$1, isHoldingShift, false);\n      return true;\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, event => {\n    if ($isTargetWithinDecorator(event.target)) {\n      return false;\n    }\n\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    event.preventDefault();\n    const {\n      anchor\n    } = selection;\n    const anchorNode = anchor.getNode();\n\n    if (selection.isCollapsed() && anchor.offset === 0 && !lexical.$isRootNode(anchorNode)) {\n      const element = utils.$getNearestBlockElementAncestorOrThrow(anchorNode);\n\n      if (element.getIndent() > 0) {\n        return editor.dispatchCommand(lexical.OUTDENT_CONTENT_COMMAND, undefined);\n      }\n    }\n\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, true);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_DELETE_COMMAND, event => {\n    if ($isTargetWithinDecorator(event.target)) {\n      return false;\n    }\n\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    event.preventDefault();\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, false);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ENTER_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    if (event !== null) {\n      // If we have beforeinput, then we can avoid blocking\n      // the default behavior. This ensures that the iOS can\n      // intercept that we're actually inserting a paragraph,\n      // and autocomplete, autocapitalize etc work as intended.\n      // This can also cause a strange performance issue in\n      // Safari, where there is a noticeable pause due to\n      // preventing the key down of enter.\n      if ((IS_IOS || IS_SAFARI || IS_APPLE_WEBKIT) && CAN_USE_BEFORE_INPUT) {\n        return false;\n      }\n\n      event.preventDefault();\n\n      if (event.shiftKey) {\n        return editor.dispatchCommand(lexical.INSERT_LINE_BREAK_COMMAND, false);\n      }\n    }\n\n    return editor.dispatchCommand(lexical.INSERT_PARAGRAPH_COMMAND, undefined);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ESCAPE_COMMAND, () => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    editor.blur();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DROP_COMMAND, event => {\n    const [, files] = eventFiles(event);\n\n    if (files.length > 0) {\n      const x = event.clientX;\n      const y = event.clientY;\n      const eventRange = caretFromPoint(x, y);\n\n      if (eventRange !== null) {\n        const {\n          offset: domOffset,\n          node: domNode\n        } = eventRange;\n        const node = lexical.$getNearestNodeFromDOMNode(domNode);\n\n        if (node !== null) {\n          const selection = lexical.$createRangeSelection();\n\n          if (lexical.$isTextNode(node)) {\n            selection.anchor.set(node.getKey(), domOffset, 'text');\n            selection.focus.set(node.getKey(), domOffset, 'text');\n          } else {\n            const parentKey = node.getParentOrThrow().getKey();\n            const offset = node.getIndexWithinParent() + 1;\n            selection.anchor.set(parentKey, offset, 'element');\n            selection.focus.set(parentKey, offset, 'element');\n          }\n\n          const normalizedSelection = lexical.$normalizeSelection__EXPERIMENTAL(selection);\n          lexical.$setSelection(normalizedSelection);\n        }\n\n        editor.dispatchCommand(DRAG_DROP_PASTE, files);\n      }\n\n      event.preventDefault();\n      return true;\n    }\n\n    const selection = lexical.$getSelection();\n\n    if (lexical.$isRangeSelection(selection)) {\n      return true;\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DRAGSTART_COMMAND, event => {\n    const [isFileTransfer] = eventFiles(event);\n    const selection = lexical.$getSelection();\n\n    if (isFileTransfer && !lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DRAGOVER_COMMAND, event => {\n    const [isFileTransfer] = eventFiles(event);\n    const selection = lexical.$getSelection();\n\n    if (isFileTransfer && !lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    const x = event.clientX;\n    const y = event.clientY;\n    const eventRange = caretFromPoint(x, y);\n\n    if (eventRange !== null) {\n      const node = lexical.$getNearestNodeFromDOMNode(eventRange.node);\n\n      if (lexical.$isDecoratorNode(node)) {\n        // Show browser caret as the user is dragging the media across the screen. Won't work\n        // for DecoratorNode nor it's relevant.\n        event.preventDefault();\n      }\n    }\n\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.COPY_COMMAND, event => {\n    clipboard.copyToClipboard(editor, event instanceof ClipboardEvent ? event : null);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CUT_COMMAND, event => {\n    onCutForRichText(event, editor);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.PASTE_COMMAND, event => {\n    const [, files, hasTextContent] = eventFiles(event);\n\n    if (files.length > 0 && !hasTextContent) {\n      editor.dispatchCommand(DRAG_DROP_PASTE, files);\n      return true;\n    }\n\n    const selection = lexical.$getSelection();\n\n    if (lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection)) {\n      onPasteForRichText(event, editor);\n      return true;\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR));\n  return removeListener;\n}\n\nexports.$createHeadingNode = $createHeadingNode;\nexports.$createQuoteNode = $createQuoteNode;\nexports.$isHeadingNode = $isHeadingNode;\nexports.$isQuoteNode = $isQuoteNode;\nexports.DRAG_DROP_PASTE = DRAG_DROP_PASTE;\nexports.HeadingNode = HeadingNode;\nexports.QuoteNode = QuoteNode;\nexports.eventFiles = eventFiles;\nexports.registerRichText = registerRichText;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/rich-text/LexicalRichText.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/rich-text/LexicalRichText.js":
/*!************************************************************!*\
  !*** ./node_modules/@lexical/rich-text/LexicalRichText.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalRichText =  true ? __webpack_require__(/*! ./LexicalRichText.dev.js */ \"(ssr)/./node_modules/@lexical/rich-text/LexicalRichText.dev.js\") : 0\nmodule.exports = LexicalRichText;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvcmljaC10ZXh0L0xleGljYWxSaWNoVGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLHdCQUF3QixLQUFzQyxHQUFHLG1CQUFPLENBQUMsZ0dBQTBCLElBQUksQ0FBb0M7QUFDM0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC9yaWNoLXRleHQvTGV4aWNhbFJpY2hUZXh0LmpzPzJiNjciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxSaWNoVGV4dCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gcmVxdWlyZSgnLi9MZXhpY2FsUmljaFRleHQuZGV2LmpzJykgOiByZXF1aXJlKCcuL0xleGljYWxSaWNoVGV4dC5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbFJpY2hUZXh0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/rich-text/LexicalRichText.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/selection/LexicalSelection.dev.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@lexical/selection/LexicalSelection.dev.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CSS_TO_STYLES = new Map();\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getDOMTextNode(element) {\n  let node = element;\n\n  while (node != null) {\n    if (node.nodeType === Node.TEXT_NODE) {\n      return node;\n    }\n\n    node = node.firstChild;\n  }\n\n  return null;\n}\n\nfunction getDOMIndexWithinParent(node) {\n  const parent = node.parentNode;\n\n  if (parent == null) {\n    throw new Error('Should never happen');\n  }\n\n  return [parent, Array.from(parent.childNodes).indexOf(node)];\n}\n\nfunction createDOMRange(editor, anchorNode, _anchorOffset, focusNode, _focusOffset) {\n  const anchorKey = anchorNode.getKey();\n  const focusKey = focusNode.getKey();\n  const range = document.createRange();\n  let anchorDOM = editor.getElementByKey(anchorKey);\n  let focusDOM = editor.getElementByKey(focusKey);\n  let anchorOffset = _anchorOffset;\n  let focusOffset = _focusOffset;\n\n  if (lexical.$isTextNode(anchorNode)) {\n    anchorDOM = getDOMTextNode(anchorDOM);\n  }\n\n  if (lexical.$isTextNode(focusNode)) {\n    focusDOM = getDOMTextNode(focusDOM);\n  }\n\n  if (anchorNode === undefined || focusNode === undefined || anchorDOM === null || focusDOM === null) {\n    return null;\n  }\n\n  if (anchorDOM.nodeName === 'BR') {\n    [anchorDOM, anchorOffset] = getDOMIndexWithinParent(anchorDOM);\n  }\n\n  if (focusDOM.nodeName === 'BR') {\n    [focusDOM, focusOffset] = getDOMIndexWithinParent(focusDOM);\n  }\n\n  const firstChild = anchorDOM.firstChild;\n\n  if (anchorDOM === focusDOM && firstChild != null && firstChild.nodeName === 'BR' && anchorOffset === 0 && focusOffset === 0) {\n    focusOffset = 1;\n  }\n\n  try {\n    range.setStart(anchorDOM, anchorOffset);\n    range.setEnd(focusDOM, focusOffset);\n  } catch (e) {\n    return null;\n  }\n\n  if (range.collapsed && (anchorOffset !== focusOffset || anchorKey !== focusKey)) {\n    // Range is backwards, we need to reverse it\n    range.setStart(focusDOM, focusOffset);\n    range.setEnd(anchorDOM, anchorOffset);\n  }\n\n  return range;\n}\nfunction createRectsFromDOMRange(editor, range) {\n  const rootElement = editor.getRootElement();\n\n  if (rootElement === null) {\n    return [];\n  }\n\n  const rootRect = rootElement.getBoundingClientRect();\n  const computedStyle = getComputedStyle(rootElement);\n  const rootPadding = parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n  const selectionRects = Array.from(range.getClientRects());\n  let selectionRectsLength = selectionRects.length;\n  let prevRect;\n\n  for (let i = 0; i < selectionRectsLength; i++) {\n    const selectionRect = selectionRects[i]; // Exclude a rect that is the exact same as the last rect. getClientRects() can return\n    // the same rect twice for some elements. A more sophisticated thing to do here is to\n    // merge all the rects together into a set of rects that don't overlap, so we don't\n    // generate backgrounds that are too dark.\n\n    const isDuplicateRect = prevRect && prevRect.top === selectionRect.top && prevRect.left === selectionRect.left && prevRect.width === selectionRect.width && prevRect.height === selectionRect.height; // Exclude selections that span the entire element\n\n    const selectionSpansElement = selectionRect.width + rootPadding === rootRect.width;\n\n    if (isDuplicateRect || selectionSpansElement) {\n      selectionRects.splice(i--, 1);\n      selectionRectsLength--;\n      continue;\n    }\n\n    prevRect = selectionRect;\n  }\n\n  return selectionRects;\n}\nfunction getStyleObjectFromRawCSS(css) {\n  const styleObject = {};\n  const styles = css.split(';');\n\n  for (const style of styles) {\n    if (style !== '') {\n      const [key, value] = style.split(/:([^]+)/); // split on first colon\n\n      styleObject[key.trim()] = value.trim();\n    }\n  }\n\n  return styleObject;\n}\nfunction getStyleObjectFromCSS(css) {\n  let value = CSS_TO_STYLES.get(css);\n\n  if (value === undefined) {\n    value = getStyleObjectFromRawCSS(css);\n    CSS_TO_STYLES.set(css, value);\n  }\n\n  return value;\n}\nfunction getCSSFromStyleObject(styles) {\n  let css = '';\n\n  for (const style in styles) {\n    if (style) {\n      css += `${style}: ${styles[style]};`;\n    }\n  }\n\n  return css;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $updateElementNodeProperties(target, source) {\n  target.__first = source.__first;\n  target.__last = source.__last;\n  target.__size = source.__size;\n  target.__format = source.__format;\n  target.__indent = source.__indent;\n  target.__dir = source.__dir;\n  return target;\n}\n\nfunction $updateTextNodeProperties(target, source) {\n  target.__format = source.__format;\n  target.__style = source.__style;\n  target.__mode = source.__mode;\n  target.__detail = source.__detail;\n  return target;\n}\n\nfunction $cloneWithProperties(node) {\n  const latest = node.getLatest();\n  const constructor = latest.constructor; // @ts-expect-error\n\n  const clone = constructor.clone(latest);\n  clone.__parent = latest.__parent;\n  clone.__next = latest.__next;\n  clone.__prev = latest.__prev;\n\n  if (lexical.$isElementNode(latest) && lexical.$isElementNode(clone)) {\n    return $updateElementNodeProperties(clone, latest);\n  }\n\n  if (lexical.$isTextNode(latest) && lexical.$isTextNode(clone)) {\n    return $updateTextNodeProperties(clone, latest);\n  }\n\n  return clone;\n}\nfunction $sliceSelectedTextNodeContent(selection, textNode) {\n  if (textNode.isSelected() && !textNode.isSegmented() && !textNode.isToken() && (lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection))) {\n    const anchorNode = selection.anchor.getNode();\n    const focusNode = selection.focus.getNode();\n    const isAnchor = textNode.is(anchorNode);\n    const isFocus = textNode.is(focusNode);\n\n    if (isAnchor || isFocus) {\n      const isBackward = selection.isBackward();\n      const [anchorOffset, focusOffset] = selection.getCharacterOffsets();\n      const isSame = anchorNode.is(focusNode);\n      const isFirst = textNode.is(isBackward ? focusNode : anchorNode);\n      const isLast = textNode.is(isBackward ? anchorNode : focusNode);\n      let startOffset = 0;\n      let endOffset = undefined;\n\n      if (isSame) {\n        startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n      } else if (isFirst) {\n        const offset = isBackward ? focusOffset : anchorOffset;\n        startOffset = offset;\n        endOffset = undefined;\n      } else if (isLast) {\n        const offset = isBackward ? anchorOffset : focusOffset;\n        startOffset = 0;\n        endOffset = offset;\n      }\n\n      textNode.__text = textNode.__text.slice(startOffset, endOffset);\n      return textNode;\n    }\n  }\n\n  return textNode;\n}\nfunction $isAtNodeEnd(point) {\n  if (point.type === 'text') {\n    return point.offset === point.getNode().getTextContentSize();\n  }\n\n  return point.offset === point.getNode().getChildrenSize();\n}\nfunction trimTextContentFromAnchor(editor, anchor, delCount) {\n  // Work from the current selection anchor point\n  let currentNode = anchor.getNode();\n  let remaining = delCount;\n\n  if (lexical.$isElementNode(currentNode)) {\n    const descendantNode = currentNode.getDescendantByIndex(anchor.offset);\n\n    if (descendantNode !== null) {\n      currentNode = descendantNode;\n    }\n  }\n\n  while (remaining > 0 && currentNode !== null) {\n    let nextNode = currentNode.getPreviousSibling();\n    let additionalElementWhitespace = 0;\n\n    if (nextNode === null) {\n      let parent = currentNode.getParentOrThrow();\n      let parentSibling = parent.getPreviousSibling();\n\n      while (parentSibling === null) {\n        parent = parent.getParent();\n\n        if (parent === null) {\n          nextNode = null;\n          break;\n        }\n\n        parentSibling = parent.getPreviousSibling();\n      }\n\n      if (parent !== null) {\n        additionalElementWhitespace = parent.isInline() ? 0 : 2;\n\n        if (lexical.$isElementNode(parentSibling)) {\n          nextNode = parentSibling.getLastDescendant();\n        } else {\n          nextNode = parentSibling;\n        }\n      }\n    }\n\n    let text = currentNode.getTextContent(); // If the text is empty, we need to consider adding in two line breaks to match\n    // the content if we were to get it from its parent.\n\n    if (text === '' && lexical.$isElementNode(currentNode) && !currentNode.isInline()) {\n      // TODO: should this be handled in core?\n      text = '\\n\\n';\n    }\n\n    const currentNodeSize = currentNode.getTextContentSize();\n\n    if (!lexical.$isTextNode(currentNode) || remaining >= currentNodeSize) {\n      const parent = currentNode.getParent();\n      currentNode.remove();\n\n      if (parent != null && parent.getChildrenSize() === 0 && !lexical.$isRootNode(parent)) {\n        parent.remove();\n      }\n\n      remaining -= currentNodeSize + additionalElementWhitespace;\n      currentNode = nextNode;\n    } else {\n      const key = currentNode.getKey(); // See if we can just revert it to what was in the last editor state\n\n      const prevTextContent = editor.getEditorState().read(() => {\n        const prevNode = lexical.$getNodeByKey(key);\n\n        if (lexical.$isTextNode(prevNode) && prevNode.isSimpleText()) {\n          return prevNode.getTextContent();\n        }\n\n        return null;\n      });\n      const offset = currentNodeSize - remaining;\n      const slicedText = text.slice(0, offset);\n\n      if (prevTextContent !== null && prevTextContent !== text) {\n        const prevSelection = lexical.$getPreviousSelection();\n        let target = currentNode;\n\n        if (!currentNode.isSimpleText()) {\n          const textNode = lexical.$createTextNode(prevTextContent);\n          currentNode.replace(textNode);\n          target = textNode;\n        } else {\n          currentNode.setTextContent(prevTextContent);\n        }\n\n        if (lexical.$isRangeSelection(prevSelection) && prevSelection.isCollapsed()) {\n          const prevOffset = prevSelection.anchor.offset;\n          target.select(prevOffset, prevOffset);\n        }\n      } else if (currentNode.isSimpleText()) {\n        // Split text\n        const isSelected = anchor.key === key;\n        let anchorOffset = anchor.offset; // Move offset to end if it's less than the remaining number, otherwise\n        // we'll have a negative splitStart.\n\n        if (anchorOffset < remaining) {\n          anchorOffset = currentNodeSize;\n        }\n\n        const splitStart = isSelected ? anchorOffset - remaining : 0;\n        const splitEnd = isSelected ? anchorOffset : offset;\n\n        if (isSelected && splitStart === 0) {\n          const [excessNode] = currentNode.splitText(splitStart, splitEnd);\n          excessNode.remove();\n        } else {\n          const [, excessNode] = currentNode.splitText(splitStart, splitEnd);\n          excessNode.remove();\n        }\n      } else {\n        const textNode = lexical.$createTextNode(slicedText);\n        currentNode.replace(textNode);\n      }\n\n      remaining = 0;\n    }\n  }\n}\nfunction $addNodeStyle(node) {\n  const CSSText = node.getStyle();\n  const styles = getStyleObjectFromRawCSS(CSSText);\n  CSS_TO_STYLES.set(CSSText, styles);\n}\n\nfunction $patchStyle(target, patch) {\n  const prevStyles = getStyleObjectFromCSS('getStyle' in target ? target.getStyle() : target.style);\n  const newStyles = Object.entries(patch).reduce((styles, [key, value]) => {\n    if (value === null) {\n      delete styles[key];\n    } else {\n      styles[key] = value;\n    }\n\n    return styles;\n  }, { ...prevStyles\n  } || {});\n  const newCSSText = getCSSFromStyleObject(newStyles);\n  target.setStyle(newCSSText);\n  CSS_TO_STYLES.set(newCSSText, newStyles);\n}\n\nfunction $patchStyleText(selection, patch) {\n  const selectedNodes = selection.getNodes();\n  const selectedNodesLength = selectedNodes.length;\n  const lastIndex = selectedNodesLength - 1;\n  let firstNode = selectedNodes[0];\n  let lastNode = selectedNodes[lastIndex];\n\n  if (selection.isCollapsed()) {\n    $patchStyle(selection, patch);\n    return;\n  }\n\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const firstNodeText = firstNode.getTextContent();\n  const firstNodeTextLength = firstNodeText.length;\n  const focusOffset = focus.offset;\n  let anchorOffset = anchor.offset;\n  const isBefore = anchor.isBefore(focus);\n  let startOffset = isBefore ? anchorOffset : focusOffset;\n  let endOffset = isBefore ? focusOffset : anchorOffset;\n  const startType = isBefore ? anchor.type : focus.type;\n  const endType = isBefore ? focus.type : anchor.type;\n  const endKey = isBefore ? focus.key : anchor.key; // This is the case where the user only selected the very end of the\n  // first node so we don't want to include it in the formatting change.\n\n  if (lexical.$isTextNode(firstNode) && startOffset === firstNodeTextLength) {\n    const nextSibling = firstNode.getNextSibling();\n\n    if (lexical.$isTextNode(nextSibling)) {\n      // we basically make the second node the firstNode, changing offsets accordingly\n      anchorOffset = 0;\n      startOffset = 0;\n      firstNode = nextSibling;\n    }\n  } // This is the case where we only selected a single node\n\n\n  if (selectedNodes.length === 1) {\n    if (lexical.$isTextNode(firstNode)) {\n      startOffset = startType === 'element' ? 0 : anchorOffset > focusOffset ? focusOffset : anchorOffset;\n      endOffset = endType === 'element' ? firstNodeTextLength : anchorOffset > focusOffset ? anchorOffset : focusOffset; // No actual text is selected, so do nothing.\n\n      if (startOffset === endOffset) {\n        return;\n      } // The entire node is selected, so just format it\n\n\n      if (startOffset === 0 && endOffset === firstNodeTextLength) {\n        $patchStyle(firstNode, patch);\n        firstNode.select(startOffset, endOffset);\n      } else {\n        // The node is partially selected, so split it into two nodes\n        // and style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        $patchStyle(replacement, patch);\n        replacement.select(0, endOffset - startOffset);\n      }\n    } // multiple nodes selected.\n\n  } else {\n    if (lexical.$isTextNode(firstNode) && startOffset < firstNode.getTextContentSize()) {\n      if (startOffset !== 0) {\n        // the entire first node isn't selected, so split it\n        firstNode = firstNode.splitText(startOffset)[1];\n        startOffset = 0;\n      }\n\n      $patchStyle(firstNode, patch);\n    }\n\n    if (lexical.$isTextNode(lastNode)) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length; // The last node might not actually be the end node\n      //\n      // If not, assume the last node is fully-selected unless the end offset is\n      // zero.\n\n      if (lastNode.__key !== endKey && endOffset !== 0) {\n        endOffset = lastNodeTextLength;\n      } // if the entire last node isn't selected, split it\n\n\n      if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n\n      if (endOffset !== 0) {\n        $patchStyle(lastNode, patch);\n      }\n    } // style all the text nodes in between\n\n\n    for (let i = 1; i < lastIndex; i++) {\n      const selectedNode = selectedNodes[i];\n      const selectedNodeKey = selectedNode.getKey();\n\n      if (lexical.$isTextNode(selectedNode) && selectedNodeKey !== firstNode.getKey() && selectedNodeKey !== lastNode.getKey() && !selectedNode.isToken()) {\n        $patchStyle(selectedNode, patch);\n      }\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/**\n * Converts all nodes in the selection that are of one block type to another specified by parameter\n *\n * @param selection\n * @param createElement\n * @returns\n */\n\nfunction $setBlocksType(selection, createElement) {\n  if (selection.anchor.key === 'root') {\n    const element = createElement();\n    const root = lexical.$getRoot();\n    const firstChild = root.getFirstChild();\n\n    if (firstChild) {\n      firstChild.replace(element, true);\n    } else {\n      root.append(element);\n    }\n\n    return;\n  }\n\n  const nodes = selection.getNodes();\n  let maybeBlock = selection.anchor.getNode().getParentOrThrow();\n\n  if (nodes.indexOf(maybeBlock) === -1) {\n    nodes.push(maybeBlock);\n  }\n\n  if (maybeBlock.isInline()) {\n    maybeBlock = maybeBlock.getParentOrThrow();\n\n    if (nodes.indexOf(maybeBlock) === -1) {\n      nodes.push(maybeBlock);\n    }\n  }\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n\n    if (!isBlock(node)) {\n      continue;\n    }\n\n    const targetElement = createElement();\n    targetElement.setFormat(node.getFormatType());\n    targetElement.setIndent(node.getIndent());\n    node.replace(targetElement, true);\n  }\n}\n\nfunction isBlock(node) {\n  if (!lexical.$isElementNode(node) || lexical.$isRootOrShadowRoot(node)) {\n    return false;\n  }\n\n  const firstChild = node.getFirstChild();\n  const isLeafElement = firstChild === null || lexical.$isTextNode(firstChild) || firstChild.isInline();\n  return !node.isInline() && node.canBeEmpty() !== false && isLeafElement;\n}\n\nfunction isPointAttached(point) {\n  return point.getNode().isAttached();\n}\n\nfunction $removeParentEmptyElements(startingNode) {\n  let node = startingNode;\n\n  while (node !== null && !lexical.$isRootOrShadowRoot(node)) {\n    const latest = node.getLatest();\n    const parentNode = node.getParent();\n\n    if (latest.getChildrenSize() === 0) {\n      node.remove(true);\n    }\n\n    node = parentNode;\n  }\n}\n/** @deprecated */\n\n\nfunction $wrapNodes(selection, createElement, wrappingElement = null) {\n  const nodes = selection.getNodes();\n  const nodesLength = nodes.length;\n  const anchor = selection.anchor;\n\n  if (nodesLength === 0 || nodesLength === 1 && anchor.type === 'element' && anchor.getNode().getChildrenSize() === 0) {\n    const target = anchor.type === 'text' ? anchor.getNode().getParentOrThrow() : anchor.getNode();\n    const children = target.getChildren();\n    let element = createElement();\n    element.setFormat(target.getFormatType());\n    element.setIndent(target.getIndent());\n    children.forEach(child => element.append(child));\n\n    if (wrappingElement) {\n      element = wrappingElement.append(element);\n    }\n\n    target.replace(element);\n    return;\n  }\n\n  let topLevelNode = null;\n  let descendants = [];\n\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i]; // Determine whether wrapping has to be broken down into multiple chunks. This can happen if the\n    // user selected multiple Root-like nodes that have to be treated separately as if they are\n    // their own branch. I.e. you don't want to wrap a whole table, but rather the contents of each\n    // of each of the cell nodes.\n\n    if (lexical.$isRootOrShadowRoot(node)) {\n      $wrapNodesImpl(selection, descendants, descendants.length, createElement, wrappingElement);\n      descendants = [];\n      topLevelNode = node;\n    } else if (topLevelNode === null || topLevelNode !== null && lexical.$hasAncestor(node, topLevelNode)) {\n      descendants.push(node);\n    } else {\n      $wrapNodesImpl(selection, descendants, descendants.length, createElement, wrappingElement);\n      descendants = [node];\n    }\n  }\n\n  $wrapNodesImpl(selection, descendants, descendants.length, createElement, wrappingElement);\n}\nfunction $wrapNodesImpl(selection, nodes, nodesLength, createElement, wrappingElement = null) {\n  if (nodes.length === 0) {\n    return;\n  }\n\n  const firstNode = nodes[0];\n  const elementMapping = new Map();\n  const elements = []; // The below logic is to find the right target for us to\n  // either insertAfter/insertBefore/append the corresponding\n  // elements to. This is made more complicated due to nested\n  // structures.\n\n  let target = lexical.$isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n\n  if (target.isInline()) {\n    target = target.getParentOrThrow();\n  }\n\n  let targetIsPrevSibling = false;\n\n  while (target !== null) {\n    const prevSibling = target.getPreviousSibling();\n\n    if (prevSibling !== null) {\n      target = prevSibling;\n      targetIsPrevSibling = true;\n      break;\n    }\n\n    target = target.getParentOrThrow();\n\n    if (lexical.$isRootOrShadowRoot(target)) {\n      break;\n    }\n  }\n\n  const emptyElements = new Set(); // Find any top level empty elements\n\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n\n    if (lexical.$isElementNode(node) && node.getChildrenSize() === 0) {\n      emptyElements.add(node.getKey());\n    }\n  }\n\n  const movedNodes = new Set(); // Move out all leaf nodes into our elements array.\n  // If we find a top level empty element, also move make\n  // an element for that.\n\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n    let parent = node.getParent();\n\n    if (parent !== null && parent.isInline()) {\n      parent = parent.getParent();\n    }\n\n    if (parent !== null && lexical.$isLeafNode(node) && !movedNodes.has(node.getKey())) {\n      const parentKey = parent.getKey();\n\n      if (elementMapping.get(parentKey) === undefined) {\n        const targetElement = createElement();\n        targetElement.setFormat(parent.getFormatType());\n        targetElement.setIndent(parent.getIndent());\n        elements.push(targetElement);\n        elementMapping.set(parentKey, targetElement); // Move node and its siblings to the new\n        // element.\n\n        parent.getChildren().forEach(child => {\n          targetElement.append(child);\n          movedNodes.add(child.getKey());\n\n          if (lexical.$isElementNode(child)) {\n            // Skip nested leaf nodes if the parent has already been moved\n            child.getChildrenKeys().forEach(key => movedNodes.add(key));\n          }\n        });\n        $removeParentEmptyElements(parent);\n      }\n    } else if (emptyElements.has(node.getKey())) {\n      const targetElement = createElement();\n      targetElement.setFormat(node.getFormatType());\n      targetElement.setIndent(node.getIndent());\n      elements.push(targetElement);\n      node.remove(true);\n    }\n  }\n\n  if (wrappingElement !== null) {\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      wrappingElement.append(element);\n    }\n  }\n\n  let lastElement = null; // If our target is Root-like, let's see if we can re-adjust\n  // so that the target is the first child instead.\n\n  if (lexical.$isRootOrShadowRoot(target)) {\n    if (targetIsPrevSibling) {\n      if (wrappingElement !== null) {\n        target.insertAfter(wrappingElement);\n      } else {\n        for (let i = elements.length - 1; i >= 0; i--) {\n          const element = elements[i];\n          target.insertAfter(element);\n        }\n      }\n    } else {\n      const firstChild = target.getFirstChild();\n\n      if (lexical.$isElementNode(firstChild)) {\n        target = firstChild;\n      }\n\n      if (firstChild === null) {\n        if (wrappingElement) {\n          target.append(wrappingElement);\n        } else {\n          for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            target.append(element);\n            lastElement = element;\n          }\n        }\n      } else {\n        if (wrappingElement !== null) {\n          firstChild.insertBefore(wrappingElement);\n        } else {\n          for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            firstChild.insertBefore(element);\n            lastElement = element;\n          }\n        }\n      }\n    }\n  } else {\n    if (wrappingElement) {\n      target.insertAfter(wrappingElement);\n    } else {\n      for (let i = elements.length - 1; i >= 0; i--) {\n        const element = elements[i];\n        target.insertAfter(element);\n        lastElement = element;\n      }\n    }\n  }\n\n  const prevSelection = lexical.$getPreviousSelection();\n\n  if (lexical.$isRangeSelection(prevSelection) && isPointAttached(prevSelection.anchor) && isPointAttached(prevSelection.focus)) {\n    lexical.$setSelection(prevSelection.clone());\n  } else if (lastElement !== null) {\n    lastElement.selectEnd();\n  } else {\n    selection.dirty = true;\n  }\n}\nfunction $shouldOverrideDefaultCharacterSelection(selection, isBackward) {\n  const possibleNode = lexical.$getAdjacentNode(selection.focus, isBackward);\n  return lexical.$isDecoratorNode(possibleNode) && !possibleNode.isIsolated() || lexical.$isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty();\n}\nfunction $moveCaretSelection(selection, isHoldingShift, isBackward, granularity) {\n  selection.modify(isHoldingShift ? 'extend' : 'move', isBackward, granularity);\n}\nfunction $isParentElementRTL(selection) {\n  const anchorNode = selection.anchor.getNode();\n  const parent = lexical.$isRootNode(anchorNode) ? anchorNode : anchorNode.getParentOrThrow();\n  return parent.getDirection() === 'rtl';\n}\nfunction $moveCharacter(selection, isHoldingShift, isBackward) {\n  const isRTL = $isParentElementRTL(selection);\n  $moveCaretSelection(selection, isHoldingShift, isBackward ? !isRTL : isRTL, 'character');\n}\nfunction $selectAll(selection) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const topParent = anchorNode.getTopLevelElementOrThrow();\n  const root = topParent.getParentOrThrow();\n  let firstNode = root.getFirstDescendant();\n  let lastNode = root.getLastDescendant();\n  let firstType = 'element';\n  let lastType = 'element';\n  let lastOffset = 0;\n\n  if (lexical.$isTextNode(firstNode)) {\n    firstType = 'text';\n  } else if (!lexical.$isElementNode(firstNode) && firstNode !== null) {\n    firstNode = firstNode.getParentOrThrow();\n  }\n\n  if (lexical.$isTextNode(lastNode)) {\n    lastType = 'text';\n    lastOffset = lastNode.getTextContentSize();\n  } else if (!lexical.$isElementNode(lastNode) && lastNode !== null) {\n    lastNode = lastNode.getParentOrThrow();\n  }\n\n  if (firstNode && lastNode) {\n    anchor.set(firstNode.getKey(), 0, firstType);\n    focus.set(lastNode.getKey(), lastOffset, lastType);\n  }\n}\n\nfunction $getNodeStyleValueForProperty(node, styleProperty, defaultValue) {\n  const css = node.getStyle();\n  const styleObject = getStyleObjectFromCSS(css);\n\n  if (styleObject !== null) {\n    return styleObject[styleProperty] || defaultValue;\n  }\n\n  return defaultValue;\n}\n\nfunction $getSelectionStyleValueForProperty(selection, styleProperty, defaultValue = '') {\n  let styleValue = null;\n  const nodes = selection.getNodes();\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const isBackward = selection.isBackward();\n  const endOffset = isBackward ? focus.offset : anchor.offset;\n  const endNode = isBackward ? focus.getNode() : anchor.getNode();\n\n  if (selection.style !== '') {\n    const css = selection.style;\n    const styleObject = getStyleObjectFromCSS(css);\n\n    if (styleObject !== null && styleProperty in styleObject) {\n      return styleObject[styleProperty];\n    }\n  }\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i]; // if no actual characters in the end node are selected, we don't\n    // include it in the selection for purposes of determining style\n    // value\n\n    if (i !== 0 && endOffset === 0 && node.is(endNode)) {\n      continue;\n    }\n\n    if (lexical.$isTextNode(node)) {\n      const nodeStyleValue = $getNodeStyleValueForProperty(node, styleProperty, defaultValue);\n\n      if (styleValue === null) {\n        styleValue = nodeStyleValue;\n      } else if (styleValue !== nodeStyleValue) {\n        // multiple text nodes are in the selection and they don't all\n        // have the same style.\n        styleValue = '';\n        break;\n      }\n    }\n  }\n\n  return styleValue === null ? defaultValue : styleValue;\n}\n\nexports.$addNodeStyle = $addNodeStyle;\nexports.$cloneWithProperties = $cloneWithProperties;\nexports.$getSelectionStyleValueForProperty = $getSelectionStyleValueForProperty;\nexports.$isAtNodeEnd = $isAtNodeEnd;\nexports.$isParentElementRTL = $isParentElementRTL;\nexports.$moveCaretSelection = $moveCaretSelection;\nexports.$moveCharacter = $moveCharacter;\nexports.$patchStyleText = $patchStyleText;\nexports.$selectAll = $selectAll;\nexports.$setBlocksType = $setBlocksType;\nexports.$shouldOverrideDefaultCharacterSelection = $shouldOverrideDefaultCharacterSelection;\nexports.$sliceSelectedTextNodeContent = $sliceSelectedTextNodeContent;\nexports.$wrapNodes = $wrapNodes;\nexports.createDOMRange = createDOMRange;\nexports.createRectsFromDOMRange = createRectsFromDOMRange;\nexports.getStyleObjectFromCSS = getStyleObjectFromCSS;\nexports.trimTextContentFromAnchor = trimTextContentFromAnchor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/selection/LexicalSelection.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/selection/LexicalSelection.js":
/*!*************************************************************!*\
  !*** ./node_modules/@lexical/selection/LexicalSelection.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalSelection =  true ? __webpack_require__(/*! ./LexicalSelection.dev.js */ \"(ssr)/./node_modules/@lexical/selection/LexicalSelection.dev.js\") : 0\nmodule.exports = LexicalSelection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvc2VsZWN0aW9uL0xleGljYWxTZWxlY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWix5QkFBeUIsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLGtHQUEyQixJQUFJLENBQXFDO0FBQzlJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvc2VsZWN0aW9uL0xleGljYWxTZWxlY3Rpb24uanM/OGU0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgTGV4aWNhbFNlbGVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gcmVxdWlyZSgnLi9MZXhpY2FsU2VsZWN0aW9uLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsU2VsZWN0aW9uLnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsU2VsZWN0aW9uOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/selection/LexicalSelection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/table/LexicalTable.dev.js":
/*!*********************************************************!*\
  !*** ./node_modules/@lexical/table/LexicalTable.dev.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar utils = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst TableCellHeaderStates = {\n  BOTH: 3,\n  COLUMN: 2,\n  NO_STATUS: 0,\n  ROW: 1\n};\n\n/** @noInheritDoc */\nclass TableCellNode extends lexical.DEPRECATED_GridCellNode {\n  /** @internal */\n\n  /** @internal */\n  static getType() {\n    return 'tablecell';\n  }\n\n  static clone(node) {\n    return new TableCellNode(node.__headerState, node.__colSpan, node.__width, node.__key);\n  }\n\n  static importDOM() {\n    return {\n      td: node => ({\n        conversion: convertTableCellNodeElement,\n        priority: 0\n      }),\n      th: node => ({\n        conversion: convertTableCellNodeElement,\n        priority: 0\n      })\n    };\n  }\n\n  static importJSON(serializedNode) {\n    return $createTableCellNode(serializedNode.headerState, serializedNode.colSpan, serializedNode.width || undefined);\n  }\n\n  constructor(headerState = TableCellHeaderStates.NO_STATUS, colSpan = 1, width, key) {\n    super(colSpan, key);\n    this.__headerState = headerState;\n    this.__width = width;\n  }\n\n  createDOM(config) {\n    const element = document.createElement(this.getTag());\n\n    if (this.__width) {\n      element.style.width = `${this.__width}px`;\n    }\n\n    if (this.__colSpan !== 1) {\n      element.colSpan = this.__colSpan;\n    }\n\n    if (this.__rowSpan !== 1) {\n      element.rowSpan = this.__rowSpan;\n    }\n\n    utils.addClassNamesToElement(element, config.theme.tableCell, this.hasHeader() && config.theme.tableCellHeader);\n    return element;\n  }\n\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n\n    if (element) {\n      const element_ = element;\n      const maxWidth = 700;\n      const colCount = this.getParentOrThrow().getChildrenSize();\n      element_.style.border = '1px solid black';\n\n      if (this.__colSpan !== 1) {\n        element_.colSpan = this.__colSpan;\n      }\n\n      if (this.__rowSpan !== 1) {\n        element_.rowSpan = this.__rowSpan;\n      }\n\n      element_.style.width = `${this.getWidth() || Math.max(90, maxWidth / colCount)}px`;\n      element_.style.verticalAlign = 'top';\n      element_.style.textAlign = 'start';\n\n      if (this.hasHeader()) {\n        element_.style.backgroundColor = '#f2f3f5';\n      }\n    }\n\n    return {\n      element\n    };\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      colSpan: super.__colSpan,\n      headerState: this.__headerState,\n      type: 'tablecell',\n      width: this.getWidth()\n    };\n  }\n\n  getTag() {\n    return this.hasHeader() ? 'th' : 'td';\n  }\n\n  setHeaderStyles(headerState) {\n    const self = this.getWritable();\n    self.__headerState = headerState;\n    return this.__headerState;\n  }\n\n  getHeaderStyles() {\n    return this.getLatest().__headerState;\n  }\n\n  setWidth(width) {\n    const self = this.getWritable();\n    self.__width = width;\n    return this.__width;\n  }\n\n  getWidth() {\n    return this.getLatest().__width;\n  }\n\n  toggleHeaderStyle(headerStateToToggle) {\n    const self = this.getWritable();\n\n    if ((self.__headerState & headerStateToToggle) === headerStateToToggle) {\n      self.__headerState -= headerStateToToggle;\n    } else {\n      self.__headerState += headerStateToToggle;\n    }\n\n    return self;\n  }\n\n  hasHeaderState(headerState) {\n    return (this.getHeaderStyles() & headerState) === headerState;\n  }\n\n  hasHeader() {\n    return this.getLatest().__headerState !== TableCellHeaderStates.NO_STATUS;\n  }\n\n  updateDOM(prevNode) {\n    return prevNode.__headerState !== this.__headerState || prevNode.__width !== this.__width || prevNode.__colSpan !== this.__colSpan || prevNode.__rowSpan !== this.__rowSpan;\n  }\n\n  isShadowRoot() {\n    return true;\n  }\n\n  collapseAtStart() {\n    return true;\n  }\n\n  canBeEmpty() {\n    return false;\n  }\n\n  canIndent() {\n    return false;\n  }\n\n}\nfunction convertTableCellNodeElement(domNode) {\n  const nodeName = domNode.nodeName.toLowerCase();\n  const tableCellNode = $createTableCellNode(nodeName === 'th' ? TableCellHeaderStates.ROW : TableCellHeaderStates.NO_STATUS);\n  return {\n    forChild: (lexicalNode, parentLexicalNode) => {\n      if ($isTableCellNode(parentLexicalNode) && !lexical.$isElementNode(lexicalNode)) {\n        const paragraphNode = lexical.$createParagraphNode();\n\n        if (lexical.$isLineBreakNode(lexicalNode) && lexicalNode.getTextContent() === '\\n') {\n          return null;\n        }\n\n        paragraphNode.append(lexicalNode);\n        return paragraphNode;\n      }\n\n      return lexicalNode;\n    },\n    node: tableCellNode\n  };\n}\nfunction $createTableCellNode(headerState, colSpan = 1, width) {\n  return lexical.$applyNodeReplacement(new TableCellNode(headerState, colSpan, width));\n}\nfunction $isTableCellNode(node) {\n  return node instanceof TableCellNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass TableRowNode extends lexical.DEPRECATED_GridRowNode {\n  /** @internal */\n  static getType() {\n    return 'tablerow';\n  }\n\n  static clone(node) {\n    return new TableRowNode(node.__height, node.__key);\n  }\n\n  static importDOM() {\n    return {\n      tr: node => ({\n        conversion: convertTableRowElement,\n        priority: 0\n      })\n    };\n  }\n\n  static importJSON(serializedNode) {\n    return $createTableRowNode(serializedNode.height);\n  }\n\n  constructor(height, key) {\n    super(key);\n    this.__height = height;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      type: 'tablerow',\n      version: 1\n    };\n  }\n\n  createDOM(config) {\n    const element = document.createElement('tr');\n\n    if (this.__height) {\n      element.style.height = `${this.__height}px`;\n    }\n\n    utils.addClassNamesToElement(element, config.theme.tableRow);\n    return element;\n  }\n\n  isShadowRoot() {\n    return true;\n  }\n\n  setHeight(height) {\n    const self = this.getWritable();\n    self.__height = height;\n    return this.__height;\n  }\n\n  getHeight() {\n    return this.getLatest().__height;\n  }\n\n  updateDOM(prevNode) {\n    return prevNode.__height !== this.__height;\n  }\n\n  canBeEmpty() {\n    return false;\n  }\n\n  canIndent() {\n    return false;\n  }\n\n}\nfunction convertTableRowElement(domNode) {\n  return {\n    node: $createTableRowNode()\n  };\n}\nfunction $createTableRowNode(height) {\n  return lexical.$applyNodeReplacement(new TableRowNode(height));\n}\nfunction $isTableRowNode(node) {\n  return node instanceof TableRowNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst getDOMSelection = targetWindow => CAN_USE_DOM ? (targetWindow || window).getSelection() : null;\n\nclass TableSelection {\n  constructor(editor, tableNodeKey) {\n    this.isHighlightingCells = false;\n    this.anchorX = -1;\n    this.anchorY = -1;\n    this.focusX = -1;\n    this.focusY = -1;\n    this.listenersToRemove = new Set();\n    this.tableNodeKey = tableNodeKey;\n    this.editor = editor;\n    this.grid = {\n      cells: [],\n      columns: 0,\n      rows: 0\n    };\n    this.gridSelection = null;\n    this.anchorCellNodeKey = null;\n    this.focusCellNodeKey = null;\n    this.anchorCell = null;\n    this.focusCell = null;\n    this.hasHijackedSelectionStyles = false;\n    this.trackTableGrid();\n  }\n\n  getGrid() {\n    return this.grid;\n  }\n\n  removeListeners() {\n    Array.from(this.listenersToRemove).forEach(removeListener => removeListener());\n  }\n\n  trackTableGrid() {\n    const observer = new MutationObserver(records => {\n      this.editor.update(() => {\n        let gridNeedsRedraw = false;\n\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const target = record.target;\n          const nodeName = target.nodeName;\n\n          if (nodeName === 'TABLE' || nodeName === 'TR') {\n            gridNeedsRedraw = true;\n            break;\n          }\n        }\n\n        if (!gridNeedsRedraw) {\n          return;\n        }\n\n        const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n\n        if (!tableElement) {\n          throw new Error('Expected to find TableElement in DOM');\n        }\n\n        this.grid = getTableGrid(tableElement);\n      });\n    });\n    this.editor.update(() => {\n      const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n\n      this.grid = getTableGrid(tableElement);\n      observer.observe(tableElement, {\n        childList: true,\n        subtree: true\n      });\n    });\n  }\n\n  clearHighlight() {\n    this.isHighlightingCells = false;\n    this.anchorX = -1;\n    this.anchorY = -1;\n    this.focusX = -1;\n    this.focusY = -1;\n    this.gridSelection = null;\n    this.anchorCellNodeKey = null;\n    this.focusCellNodeKey = null;\n    this.anchorCell = null;\n    this.focusCell = null;\n    this.hasHijackedSelectionStyles = false;\n    this.enableHighlightStyle();\n    this.editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n\n      const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n\n      const grid = getTableGrid(tableElement);\n      $updateDOMForSelection(grid, null);\n      lexical.$setSelection(null);\n      this.editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n\n  enableHighlightStyle() {\n    this.editor.update(() => {\n      const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n\n      tableElement.classList.remove('disable-selection');\n      this.hasHijackedSelectionStyles = false;\n    });\n  }\n\n  disableHighlightStyle() {\n    this.editor.update(() => {\n      const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n\n      tableElement.classList.add('disable-selection');\n      this.hasHijackedSelectionStyles = true;\n    });\n  }\n\n  updateTableGridSelection(selection) {\n    if (selection != null && selection.gridKey === this.tableNodeKey) {\n      this.gridSelection = selection;\n      this.isHighlightingCells = true;\n      this.disableHighlightStyle();\n      $updateDOMForSelection(this.grid, this.gridSelection);\n    } else if (selection == null) {\n      this.clearHighlight();\n    }\n  }\n\n  setFocusCellForSelection(cell, ignoreStart = false) {\n    this.editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n\n      const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n\n      const cellX = cell.x;\n      const cellY = cell.y;\n      this.focusCell = cell;\n\n      if (this.anchorCell !== null) {\n        const domSelection = getDOMSelection(this.editor._window); // Collapse the selection\n\n        if (domSelection) {\n          domSelection.setBaseAndExtent(this.anchorCell.elem, 0, this.focusCell.elem, 0);\n        }\n      }\n\n      if (!this.isHighlightingCells && (this.anchorX !== cellX || this.anchorY !== cellY || ignoreStart)) {\n        this.isHighlightingCells = true;\n        this.disableHighlightStyle();\n      } else if (cellX === this.focusX && cellY === this.focusY) {\n        return;\n      }\n\n      this.focusX = cellX;\n      this.focusY = cellY;\n\n      if (this.isHighlightingCells) {\n        const focusTableCellNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n\n        if (this.gridSelection != null && this.anchorCellNodeKey != null && $isTableCellNode(focusTableCellNode)) {\n          const focusNodeKey = focusTableCellNode.getKey();\n          this.gridSelection = this.gridSelection.clone() || lexical.DEPRECATED_$createGridSelection();\n          this.focusCellNodeKey = focusNodeKey;\n          this.gridSelection.set(this.tableNodeKey, this.anchorCellNodeKey, this.focusCellNodeKey);\n          lexical.$setSelection(this.gridSelection);\n          this.editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n          $updateDOMForSelection(this.grid, this.gridSelection);\n        }\n      }\n    });\n  }\n\n  setAnchorCellForSelection(cell) {\n    this.isHighlightingCells = false;\n    this.anchorCell = cell;\n    this.anchorX = cell.x;\n    this.anchorY = cell.y;\n    this.editor.update(() => {\n      const anchorTableCellNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n\n      if ($isTableCellNode(anchorTableCellNode)) {\n        const anchorNodeKey = anchorTableCellNode.getKey();\n        this.gridSelection = lexical.DEPRECATED_$createGridSelection();\n        this.anchorCellNodeKey = anchorNodeKey;\n      }\n    });\n  }\n\n  formatCells(type) {\n    this.editor.update(() => {\n      const selection = lexical.$getSelection();\n\n      if (!lexical.DEPRECATED_$isGridSelection(selection)) {\n        {\n          throw Error(`Expected grid selection`);\n        }\n      }\n\n      const formatSelection = lexical.$createRangeSelection();\n      const anchor = formatSelection.anchor;\n      const focus = formatSelection.focus;\n      selection.getNodes().forEach(cellNode => {\n        if ($isTableCellNode(cellNode) && cellNode.getTextContentSize() !== 0) {\n          anchor.set(cellNode.getKey(), 0, 'element');\n          focus.set(cellNode.getKey(), cellNode.getChildrenSize(), 'element');\n          formatSelection.formatText(type);\n        }\n      });\n      lexical.$setSelection(selection);\n      this.editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n\n  clearText() {\n    this.editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n\n      const selection = lexical.$getSelection();\n\n      if (!lexical.DEPRECATED_$isGridSelection(selection)) {\n        {\n          throw Error(`Expected grid selection`);\n        }\n      }\n\n      const selectedNodes = selection.getNodes().filter($isTableCellNode);\n\n      if (selectedNodes.length === this.grid.columns * this.grid.rows) {\n        tableNode.selectPrevious(); // Delete entire table\n\n        tableNode.remove();\n        const rootNode = lexical.$getRoot();\n        rootNode.selectStart();\n        return;\n      }\n\n      selectedNodes.forEach(cellNode => {\n        if (lexical.$isElementNode(cellNode)) {\n          const paragraphNode = lexical.$createParagraphNode();\n          const textNode = lexical.$createTextNode();\n          paragraphNode.append(textNode);\n          cellNode.append(paragraphNode);\n          cellNode.getChildren().forEach(child => {\n            if (child !== paragraphNode) {\n              child.remove();\n            }\n          });\n        }\n      });\n      $updateDOMForSelection(this.grid, null);\n      lexical.$setSelection(null);\n      this.editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst LEXICAL_ELEMENT_KEY = '__lexicalTableSelection';\nfunction applyTableHandlers(tableNode, tableElement, editor) {\n  const rootElement = editor.getRootElement();\n\n  if (rootElement === null) {\n    throw new Error('No root element.');\n  }\n\n  const tableSelection = new TableSelection(editor, tableNode.getKey());\n  attachTableSelectionToTableElement(tableElement, tableSelection);\n  let isMouseDown = false;\n  let isRangeSelectionHijacked = false;\n  tableElement.addEventListener('dblclick', event => {\n    const cell = getCellFromTarget(event.target);\n\n    if (cell !== null) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      tableSelection.setAnchorCellForSelection(cell);\n      tableSelection.setFocusCellForSelection(cell, true);\n      isMouseDown = false;\n    }\n  }); // This is the anchor of the selection.\n\n  tableElement.addEventListener('mousedown', event => {\n    setTimeout(() => {\n      if (event.button !== 0) {\n        return;\n      }\n\n      const cell = getCellFromTarget(event.target);\n\n      if (cell !== null) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n        tableSelection.setAnchorCellForSelection(cell);\n      }\n    }, 0);\n  }); // This is adjusting the focus of the selection.\n\n  tableElement.addEventListener('mousemove', event => {\n    if (isRangeSelectionHijacked) {\n      event.preventDefault();\n      event.stopPropagation();\n      event.stopImmediatePropagation();\n    }\n\n    if (isMouseDown) {\n      const cell = getCellFromTarget(event.target);\n\n      if (cell !== null) {\n        const cellX = cell.x;\n        const cellY = cell.y;\n\n        if (isMouseDown && (tableSelection.anchorX !== cellX || tableSelection.anchorY !== cellY || tableSelection.isHighlightingCells)) {\n          event.preventDefault();\n          tableSelection.setFocusCellForSelection(cell);\n        }\n      }\n    }\n  }); // Select entire table at this point, when grid selection is ready.\n\n  tableElement.addEventListener('mouseleave', () => {\n    if (isMouseDown) {\n      return;\n    }\n  }); // Clear selection when clicking outside of dom.\n\n  const mouseDownCallback = event => {\n    isMouseDown = true;\n\n    if (event.button !== 0) {\n      return;\n    }\n\n    editor.update(() => {\n      const selection = lexical.$getSelection();\n\n      if (lexical.DEPRECATED_$isGridSelection(selection) && selection.gridKey === tableSelection.tableNodeKey && rootElement.contains(event.target)) {\n        return tableSelection.clearHighlight();\n      }\n    });\n  };\n\n  window.addEventListener('mousedown', mouseDownCallback);\n  tableSelection.listenersToRemove.add(() => window.removeEventListener('mousedown', mouseDownCallback));\n\n  const mouseUpCallback = event => {\n    if (isMouseDown) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    isMouseDown = false;\n  };\n\n  window.addEventListener('mouseup', mouseUpCallback);\n  tableSelection.listenersToRemove.add(() => window.removeEventListener('mouseup', mouseUpCallback));\n  tableSelection.listenersToRemove.add(() => tableElement.addEventListener('mouseup', mouseUpCallback));\n  tableSelection.listenersToRemove.add(() => tableElement.removeEventListener('mouseup', mouseUpCallback));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    const direction = 'down';\n\n    if (lexical.$isRangeSelection(selection)) {\n      if (selection.isCollapsed()) {\n        const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n        if (!$isTableCellNode(tableCellNode)) {\n          return false;\n        }\n\n        const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableSelection.grid);\n        const elementParentNode = utils.$findMatchingParent(selection.anchor.getNode(), n => lexical.$isElementNode(n));\n\n        if (elementParentNode == null) {\n          throw new Error('Expected BlockNode Parent');\n        }\n\n        const lastChild = tableCellNode.getLastChild();\n        const isSelectionInLastBlock = lastChild && elementParentNode.isParentOf(lastChild) || elementParentNode === lastChild;\n\n        if (isSelectionInLastBlock || event.shiftKey) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n          event.stopPropagation(); // Start Selection\n\n          if (event.shiftKey) {\n            tableSelection.setAnchorCellForSelection(tableNode.getCellFromCordsOrThrow(currentCords.x, currentCords.y, tableSelection.grid));\n            return adjustFocusNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, direction);\n          }\n\n          return selectGridNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, direction);\n        }\n      }\n    } else if (lexical.DEPRECATED_$isGridSelection(selection) && event.shiftKey) {\n      const tableCellNode = selection.focus.getNode();\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n\n      const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableSelection.grid);\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      return adjustFocusNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, direction);\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_HIGH));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    const direction = 'up';\n\n    if (lexical.$isRangeSelection(selection)) {\n      if (selection.isCollapsed()) {\n        const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n        if (!$isTableCellNode(tableCellNode)) {\n          return false;\n        }\n\n        const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableSelection.grid);\n        const elementParentNode = utils.$findMatchingParent(selection.anchor.getNode(), n => lexical.$isElementNode(n));\n\n        if (elementParentNode == null) {\n          throw new Error('Expected BlockNode Parent');\n        }\n\n        const lastChild = tableCellNode.getLastChild();\n        const isSelectionInLastBlock = lastChild && elementParentNode.isParentOf(lastChild) || elementParentNode === lastChild;\n\n        if (isSelectionInLastBlock || event.shiftKey) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n          event.stopPropagation(); // Start Selection\n\n          if (event.shiftKey) {\n            tableSelection.setAnchorCellForSelection(tableNode.getCellFromCordsOrThrow(currentCords.x, currentCords.y, tableSelection.grid));\n            return adjustFocusNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, direction);\n          }\n\n          return selectGridNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, direction);\n        }\n      }\n    } else if (lexical.DEPRECATED_$isGridSelection(selection) && event.shiftKey) {\n      const tableCellNode = selection.focus.getNode();\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n\n      const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableSelection.grid);\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      return adjustFocusNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, direction);\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_HIGH));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    const direction = 'backward';\n\n    if (lexical.$isRangeSelection(selection)) {\n      if (selection.isCollapsed()) {\n        const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n        if (!$isTableCellNode(tableCellNode)) {\n          return false;\n        }\n\n        const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableSelection.grid);\n        const elementParentNode = utils.$findMatchingParent(selection.anchor.getNode(), n => lexical.$isElementNode(n));\n\n        if (elementParentNode == null) {\n          throw new Error('Expected BlockNode Parent');\n        }\n\n        if (selection.anchor.offset === 0 || event.shiftKey) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n          event.stopPropagation(); // Start Selection\n\n          if (event.shiftKey) {\n            tableSelection.setAnchorCellForSelection(tableNode.getCellFromCordsOrThrow(currentCords.x, currentCords.y, tableSelection.grid));\n            return adjustFocusNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, direction);\n          }\n\n          return selectGridNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, direction);\n        }\n      }\n    } else if (lexical.DEPRECATED_$isGridSelection(selection) && event.shiftKey) {\n      const tableCellNode = selection.focus.getNode();\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n\n      const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableSelection.grid);\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      return adjustFocusNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, direction);\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_HIGH));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_RIGHT_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    const direction = 'forward';\n\n    if (lexical.$isRangeSelection(selection)) {\n      if (selection.isCollapsed()) {\n        const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n        if (!$isTableCellNode(tableCellNode)) {\n          return false;\n        }\n\n        const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableSelection.grid);\n        const elementParentNode = utils.$findMatchingParent(selection.anchor.getNode(), n => lexical.$isElementNode(n));\n\n        if (elementParentNode == null) {\n          throw new Error('Expected BlockNode Parent');\n        }\n\n        if (selection.anchor.offset === selection.anchor.getNode().getTextContentSize() || event.shiftKey) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n          event.stopPropagation(); // Start Selection\n\n          if (event.shiftKey) {\n            tableSelection.setAnchorCellForSelection(tableNode.getCellFromCordsOrThrow(currentCords.x, currentCords.y, tableSelection.grid));\n            return adjustFocusNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, direction);\n          }\n\n          return selectGridNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, direction);\n        }\n      }\n    } else if (lexical.DEPRECATED_$isGridSelection(selection) && event.shiftKey) {\n      const tableCellNode = selection.focus.getNode();\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n\n      const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableSelection.grid);\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      return adjustFocusNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, direction);\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_HIGH));\n\n  const deleteTextHandler = command => () => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    if (lexical.DEPRECATED_$isGridSelection(selection)) {\n      tableSelection.clearText();\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n\n      const anchorNode = selection.anchor.getNode();\n      const focusNode = selection.focus.getNode();\n      const isAnchorInside = tableNode.isParentOf(anchorNode);\n      const isFocusInside = tableNode.isParentOf(focusNode);\n      const selectionContainsPartialTable = isAnchorInside && !isFocusInside || isFocusInside && !isAnchorInside;\n\n      if (selectionContainsPartialTable) {\n        tableSelection.clearText();\n        return true;\n      }\n\n      const nearestElementNode = utils.$findMatchingParent(selection.anchor.getNode(), n => lexical.$isElementNode(n));\n      const topLevelCellElementNode = nearestElementNode && utils.$findMatchingParent(nearestElementNode, n => lexical.$isElementNode(n) && $isTableCellNode(n.getParent()));\n\n      if (!lexical.$isElementNode(topLevelCellElementNode) || !lexical.$isElementNode(nearestElementNode)) {\n        return false;\n      }\n\n      if (command === lexical.DELETE_LINE_COMMAND && topLevelCellElementNode.getPreviousSibling() === null) {\n        // TODO: Fix Delete Line in Table Cells.\n        return true;\n      }\n\n      if (command === lexical.DELETE_CHARACTER_COMMAND || command === lexical.DELETE_WORD_COMMAND) {\n        if (selection.isCollapsed() && selection.anchor.offset === 0) {\n          if (nearestElementNode !== topLevelCellElementNode) {\n            const children = nearestElementNode.getChildren();\n            const newParagraphNode = lexical.$createParagraphNode();\n            children.forEach(child => newParagraphNode.append(child));\n            nearestElementNode.replace(newParagraphNode);\n            nearestElementNode.getWritable().__parent = tableCellNode.getKey();\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  [lexical.DELETE_WORD_COMMAND, lexical.DELETE_LINE_COMMAND, lexical.DELETE_CHARACTER_COMMAND].forEach(command => {\n    tableSelection.listenersToRemove.add(editor.registerCommand(command, deleteTextHandler(command), lexical.COMMAND_PRIORITY_CRITICAL));\n  });\n\n  const deleteCellHandler = event => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    if (lexical.DEPRECATED_$isGridSelection(selection)) {\n      event.preventDefault();\n      event.stopPropagation();\n      tableSelection.clearText();\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n\n    return false;\n  };\n\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, deleteCellHandler, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_DELETE_COMMAND, deleteCellHandler, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.FORMAT_TEXT_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    if (lexical.DEPRECATED_$isGridSelection(selection)) {\n      tableSelection.formatCells(payload);\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    if (lexical.DEPRECATED_$isGridSelection(selection)) {\n      tableSelection.clearHighlight();\n      return false;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_TAB_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n\n      if (selection.isCollapsed()) {\n        const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableSelection.grid);\n        event.preventDefault();\n        selectGridNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, !event.shiftKey ? 'forward' : 'backward');\n        return true;\n      }\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_HIGH));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.FOCUS_COMMAND, payload => {\n    return tableNode.isSelected();\n  }, lexical.COMMAND_PRIORITY_HIGH));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.SELECTION_CHANGE_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n    const prevSelection = lexical.$getPreviousSelection();\n\n    if (selection && lexical.$isRangeSelection(selection) && !selection.isCollapsed()) {\n      const anchorNode = selection.anchor.getNode();\n      const focusNode = selection.focus.getNode();\n      const isAnchorInside = tableNode.isParentOf(anchorNode);\n      const isFocusInside = tableNode.isParentOf(focusNode);\n      const selectionContainsPartialTable = isAnchorInside && !isFocusInside || isFocusInside && !isAnchorInside;\n      const selectionIsInsideTable = isAnchorInside && isFocusInside && !tableNode.isSelected();\n\n      if (selectionContainsPartialTable) {\n        const isBackward = selection.isBackward();\n        const modifiedSelection = lexical.$createRangeSelection();\n        const tableKey = tableNode.getKey();\n        modifiedSelection.anchor.set(selection.anchor.key, selection.anchor.offset, selection.anchor.type);\n        modifiedSelection.focus.set(tableKey, isBackward ? 0 : tableNode.getChildrenSize(), 'element');\n        isRangeSelectionHijacked = true;\n        lexical.$setSelection(modifiedSelection);\n        $addHighlightStyleToTable(tableSelection);\n        return true;\n      } else if (selectionIsInsideTable) {\n        const {\n          grid\n        } = tableSelection;\n\n        if (selection.getNodes().filter($isTableCellNode).length === grid.rows * grid.columns) {\n          const gridSelection = lexical.DEPRECATED_$createGridSelection();\n          const tableKey = tableNode.getKey();\n          const firstCell = tableNode.getFirstChildOrThrow().getFirstChild();\n          const lastCell = tableNode.getLastChildOrThrow().getLastChild();\n\n          if (firstCell != null && lastCell != null) {\n            gridSelection.set(tableKey, firstCell.getKey(), lastCell.getKey());\n            lexical.$setSelection(gridSelection);\n            tableSelection.updateTableGridSelection(gridSelection);\n            return true;\n          }\n        }\n      }\n    }\n\n    if (selection && !selection.is(prevSelection) && (lexical.DEPRECATED_$isGridSelection(selection) || lexical.DEPRECATED_$isGridSelection(prevSelection)) && tableSelection.gridSelection && !tableSelection.gridSelection.is(prevSelection)) {\n      if (lexical.DEPRECATED_$isGridSelection(selection) && selection.gridKey === tableSelection.tableNodeKey) {\n        tableSelection.updateTableGridSelection(selection);\n      } else if (!lexical.DEPRECATED_$isGridSelection(selection) && lexical.DEPRECATED_$isGridSelection(prevSelection) && prevSelection.gridKey === tableSelection.tableNodeKey) {\n        tableSelection.updateTableGridSelection(null);\n      }\n\n      return false;\n    }\n\n    if (tableSelection.hasHijackedSelectionStyles && !tableNode.isSelected()) {\n      $removeHighlightStyleToTable(tableSelection);\n      isRangeSelectionHijacked = false;\n    } else if (!tableSelection.hasHijackedSelectionStyles && tableNode.isSelected()) {\n      $addHighlightStyleToTable(tableSelection);\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  return tableSelection;\n}\nfunction attachTableSelectionToTableElement(tableElement, tableSelection) {\n  tableElement[LEXICAL_ELEMENT_KEY] = tableSelection;\n}\nfunction getTableSelectionFromTableElement(tableElement) {\n  return tableElement[LEXICAL_ELEMENT_KEY];\n}\nfunction getCellFromTarget(node) {\n  let currentNode = node;\n\n  while (currentNode != null) {\n    const nodeName = currentNode.nodeName;\n\n    if (nodeName === 'TD' || nodeName === 'TH') {\n      // @ts-expect-error: internal field\n      const cell = currentNode._cell;\n\n      if (cell === undefined) {\n        return null;\n      }\n\n      return cell;\n    }\n\n    currentNode = currentNode.parentNode;\n  }\n\n  return null;\n}\nfunction getTableGrid(tableElement) {\n  const cells = [];\n  const grid = {\n    cells,\n    columns: 0,\n    rows: 0\n  };\n  let currentNode = tableElement.firstChild;\n  let x = 0;\n  let y = 0;\n  cells.length = 0;\n\n  while (currentNode != null) {\n    const nodeMame = currentNode.nodeName;\n\n    if (nodeMame === 'TD' || nodeMame === 'TH') {\n      const elem = currentNode;\n      const cell = {\n        elem,\n        highlighted: false,\n        x,\n        y\n      }; // @ts-expect-error: internal field\n\n      currentNode._cell = cell;\n\n      if (cells[y] === undefined) {\n        cells[y] = [];\n      }\n\n      cells[y][x] = cell;\n    } else {\n      const child = currentNode.firstChild;\n\n      if (child != null) {\n        currentNode = child;\n        continue;\n      }\n    }\n\n    const sibling = currentNode.nextSibling;\n\n    if (sibling != null) {\n      x++;\n      currentNode = sibling;\n      continue;\n    }\n\n    const parent = currentNode.parentNode;\n\n    if (parent != null) {\n      const parentSibling = parent.nextSibling;\n\n      if (parentSibling == null) {\n        break;\n      }\n\n      y++;\n      x = 0;\n      currentNode = parentSibling;\n    }\n  }\n\n  grid.columns = x + 1;\n  grid.rows = y + 1;\n  return grid;\n}\nfunction $updateDOMForSelection(grid, selection) {\n  const highlightedCells = [];\n  const selectedCellNodes = new Set(selection ? selection.getNodes() : []);\n  $forEachGridCell(grid, (cell, lexicalNode) => {\n    const elem = cell.elem;\n\n    if (selectedCellNodes.has(lexicalNode)) {\n      cell.highlighted = true;\n      elem.style.setProperty('background-color', 'rgb(172, 206, 247)');\n      elem.style.setProperty('caret-color', 'transparent');\n      highlightedCells.push(cell);\n    } else {\n      cell.highlighted = false;\n      elem.style.removeProperty('background-color');\n      elem.style.removeProperty('caret-color');\n\n      if (!elem.getAttribute('style')) {\n        elem.removeAttribute('style');\n      }\n    }\n  });\n  return highlightedCells;\n}\nfunction $forEachGridCell(grid, cb) {\n  const {\n    cells\n  } = grid;\n\n  for (let y = 0; y < cells.length; y++) {\n    const row = cells[y];\n\n    for (let x = 0; x < row.length; x++) {\n      const cell = row[x];\n      const lexicalNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n\n      if (lexicalNode !== null) {\n        cb(cell, lexicalNode, {\n          x,\n          y\n        });\n      }\n    }\n  }\n}\nfunction $addHighlightStyleToTable(tableSelection) {\n  tableSelection.disableHighlightStyle();\n  $forEachGridCell(tableSelection.grid, cell => {\n    const elem = cell.elem;\n    cell.highlighted = true;\n    elem.style.setProperty('background-color', 'rgb(172, 206, 247)');\n    elem.style.setProperty('caret-color', 'transparent');\n  });\n}\nfunction $removeHighlightStyleToTable(tableSelection) {\n  tableSelection.enableHighlightStyle();\n  $forEachGridCell(tableSelection.grid, cell => {\n    const elem = cell.elem;\n    cell.highlighted = false;\n    elem.style.removeProperty('background-color');\n    elem.style.removeProperty('caret-color');\n\n    if (!elem.getAttribute('style')) {\n      elem.removeAttribute('style');\n    }\n  });\n}\n\nconst selectGridNodeInDirection = (tableSelection, tableNode, x, y, direction) => {\n  const isForward = direction === 'forward';\n\n  switch (direction) {\n    case 'backward':\n    case 'forward':\n      if (x !== (isForward ? tableSelection.grid.columns - 1 : 0)) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x + (isForward ? 1 : -1), y, tableSelection.grid));\n      } else {\n        if (y !== (isForward ? tableSelection.grid.rows - 1 : 0)) {\n          selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(isForward ? 0 : tableSelection.grid.columns - 1, y + (isForward ? 1 : -1), tableSelection.grid));\n        } else if (!isForward) {\n          tableNode.selectPrevious();\n        } else {\n          tableNode.selectNext();\n        }\n      }\n\n      return true;\n\n    case 'up':\n      if (y !== 0) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x, y - 1, tableSelection.grid));\n      } else {\n        tableNode.selectPrevious();\n      }\n\n      return true;\n\n    case 'down':\n      if (y !== tableSelection.grid.rows - 1) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x, y + 1, tableSelection.grid));\n      } else {\n        tableNode.selectNext();\n      }\n\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nconst adjustFocusNodeInDirection = (tableSelection, tableNode, x, y, direction) => {\n  const isForward = direction === 'forward';\n\n  switch (direction) {\n    case 'backward':\n    case 'forward':\n      if (x !== (isForward ? tableSelection.grid.columns - 1 : 0)) {\n        tableSelection.setFocusCellForSelection(tableNode.getCellFromCordsOrThrow(x + (isForward ? 1 : -1), y, tableSelection.grid));\n      }\n\n      return true;\n\n    case 'up':\n      if (y !== 0) {\n        tableSelection.setFocusCellForSelection(tableNode.getCellFromCordsOrThrow(x, y - 1, tableSelection.grid));\n        return true;\n      } else {\n        return false;\n      }\n\n    case 'down':\n      if (y !== tableSelection.grid.rows - 1) {\n        tableSelection.setFocusCellForSelection(tableNode.getCellFromCordsOrThrow(x, y + 1, tableSelection.grid));\n        return true;\n      } else {\n        return false;\n      }\n\n    default:\n      return false;\n  }\n};\n\nfunction $isSelectionInTable(selection, tableNode) {\n  if (lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection)) {\n    const isAnchorInside = tableNode.isParentOf(selection.anchor.getNode());\n    const isFocusInside = tableNode.isParentOf(selection.focus.getNode());\n    return isAnchorInside && isFocusInside;\n  }\n\n  return false;\n}\n\nfunction selectTableCellNode(tableCell) {\n  const possibleParagraph = tableCell.getChildren().find(n => lexical.$isParagraphNode(n));\n\n  if (lexical.$isParagraphNode(possibleParagraph)) {\n    possibleParagraph.selectEnd();\n  } else {\n    tableCell.selectEnd();\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass TableNode extends lexical.DEPRECATED_GridNode {\n  /** @internal */\n  static getType() {\n    return 'table';\n  }\n\n  static clone(node) {\n    return new TableNode(node.__key);\n  }\n\n  static importDOM() {\n    return {\n      table: _node => ({\n        conversion: convertTableElement,\n        priority: 1\n      })\n    };\n  }\n\n  static importJSON(_serializedNode) {\n    return $createTableNode();\n  }\n\n  constructor(key) {\n    super(key);\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      type: 'table',\n      version: 1\n    };\n  }\n\n  createDOM(config, editor) {\n    const tableElement = document.createElement('table');\n    utils.addClassNamesToElement(tableElement, config.theme.table);\n    return tableElement;\n  }\n\n  updateDOM() {\n    return false;\n  }\n\n  exportDOM(editor) {\n    return { ...super.exportDOM(editor),\n      after: tableElement => {\n        if (tableElement) {\n          const newElement = tableElement.cloneNode();\n          const colGroup = document.createElement('colgroup');\n          const tBody = document.createElement('tbody');\n          tBody.append(...tableElement.children);\n          const firstRow = this.getFirstChildOrThrow();\n\n          if (!$isTableRowNode(firstRow)) {\n            throw new Error('Expected to find row node.');\n          }\n\n          const colCount = firstRow.getChildrenSize();\n\n          for (let i = 0; i < colCount; i++) {\n            const col = document.createElement('col');\n            colGroup.append(col);\n          }\n\n          newElement.replaceChildren(colGroup, tBody);\n          return newElement;\n        }\n      }\n    };\n  }\n\n  canExtractContents() {\n    return false;\n  }\n\n  canBeEmpty() {\n    return false;\n  }\n\n  isShadowRoot() {\n    return true;\n  }\n\n  getCordsFromCellNode(tableCellNode, grid) {\n    const {\n      rows,\n      cells\n    } = grid;\n\n    for (let y = 0; y < rows; y++) {\n      const row = cells[y];\n\n      if (row == null) {\n        throw new Error(`Row not found at y:${y}`);\n      }\n\n      const x = row.findIndex(({\n        elem\n      }) => {\n        const cellNode = lexical.$getNearestNodeFromDOMNode(elem);\n        return cellNode === tableCellNode;\n      });\n\n      if (x !== -1) {\n        return {\n          x,\n          y\n        };\n      }\n    }\n\n    throw new Error('Cell not found in table.');\n  }\n\n  getCellFromCords(x, y, grid) {\n    const {\n      cells\n    } = grid;\n    const row = cells[y];\n\n    if (row == null) {\n      return null;\n    }\n\n    const cell = row[x];\n\n    if (cell == null) {\n      return null;\n    }\n\n    return cell;\n  }\n\n  getCellFromCordsOrThrow(x, y, grid) {\n    const cell = this.getCellFromCords(x, y, grid);\n\n    if (!cell) {\n      throw new Error('Cell not found at cords.');\n    }\n\n    return cell;\n  }\n\n  getCellNodeFromCords(x, y, grid) {\n    const cell = this.getCellFromCords(x, y, grid);\n\n    if (cell == null) {\n      return null;\n    }\n\n    const node = lexical.$getNearestNodeFromDOMNode(cell.elem);\n\n    if ($isTableCellNode(node)) {\n      return node;\n    }\n\n    return null;\n  }\n\n  getCellNodeFromCordsOrThrow(x, y, grid) {\n    const node = this.getCellNodeFromCords(x, y, grid);\n\n    if (!node) {\n      throw new Error('Node at cords not TableCellNode.');\n    }\n\n    return node;\n  }\n\n  canSelectBefore() {\n    return true;\n  }\n\n  canIndent() {\n    return false;\n  }\n\n}\nfunction $getElementGridForTableNode(editor, tableNode) {\n  const tableElement = editor.getElementByKey(tableNode.getKey());\n\n  if (tableElement == null) {\n    throw new Error('Table Element Not Found');\n  }\n\n  return getTableGrid(tableElement);\n}\nfunction convertTableElement(_domNode) {\n  return {\n    node: $createTableNode()\n  };\n}\nfunction $createTableNode() {\n  return lexical.$applyNodeReplacement(new TableNode());\n}\nfunction $isTableNode(node) {\n  return node instanceof TableNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $createTableNodeWithDimensions(rowCount, columnCount, includeHeaders = true) {\n  const tableNode = $createTableNode();\n\n  for (let iRow = 0; iRow < rowCount; iRow++) {\n    const tableRowNode = $createTableRowNode();\n\n    for (let iColumn = 0; iColumn < columnCount; iColumn++) {\n      let headerState = TableCellHeaderStates.NO_STATUS;\n\n      if (typeof includeHeaders === 'object') {\n        if (iRow === 0 && includeHeaders.rows) headerState |= TableCellHeaderStates.ROW;\n        if (iColumn === 0 && includeHeaders.columns) headerState |= TableCellHeaderStates.COLUMN;\n      } else if (includeHeaders) {\n        if (iRow === 0) headerState |= TableCellHeaderStates.ROW;\n        if (iColumn === 0) headerState |= TableCellHeaderStates.COLUMN;\n      }\n\n      const tableCellNode = $createTableCellNode(headerState);\n      const paragraphNode = lexical.$createParagraphNode();\n      paragraphNode.append(lexical.$createTextNode());\n      tableCellNode.append(paragraphNode);\n      tableRowNode.append(tableCellNode);\n    }\n\n    tableNode.append(tableRowNode);\n  }\n\n  return tableNode;\n}\nfunction $getTableCellNodeFromLexicalNode(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableCellNode(n));\n\n  if ($isTableCellNode(node)) {\n    return node;\n  }\n\n  return null;\n}\nfunction $getTableRowNodeFromTableCellNodeOrThrow(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableRowNode(n));\n\n  if ($isTableRowNode(node)) {\n    return node;\n  }\n\n  throw new Error('Expected table cell to be inside of table row.');\n}\nfunction $getTableNodeFromLexicalNodeOrThrow(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableNode(n));\n\n  if ($isTableNode(node)) {\n    return node;\n  }\n\n  throw new Error('Expected table cell to be inside of table.');\n}\nfunction $getTableRowIndexFromTableCellNode(tableCellNode) {\n  const tableRowNode = $getTableRowNodeFromTableCellNodeOrThrow(tableCellNode);\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableRowNode);\n  return tableNode.getChildren().findIndex(n => n.is(tableRowNode));\n}\nfunction $getTableColumnIndexFromTableCellNode(tableCellNode) {\n  const tableRowNode = $getTableRowNodeFromTableCellNodeOrThrow(tableCellNode);\n  return tableRowNode.getChildren().findIndex(n => n.is(tableCellNode));\n}\nfunction $getTableCellSiblingsFromTableCellNode(tableCellNode, grid) {\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n  const {\n    x,\n    y\n  } = tableNode.getCordsFromCellNode(tableCellNode, grid);\n  return {\n    above: tableNode.getCellNodeFromCords(x, y - 1, grid),\n    below: tableNode.getCellNodeFromCords(x, y + 1, grid),\n    left: tableNode.getCellNodeFromCords(x - 1, y, grid),\n    right: tableNode.getCellNodeFromCords(x + 1, y, grid)\n  };\n}\nfunction $removeTableRowAtIndex(tableNode, indexToDelete) {\n  const tableRows = tableNode.getChildren();\n\n  if (indexToDelete >= tableRows.length || indexToDelete < 0) {\n    throw new Error('Expected table cell to be inside of table row.');\n  }\n\n  const targetRowNode = tableRows[indexToDelete];\n  targetRowNode.remove();\n  return tableNode;\n}\nfunction $insertTableRow(tableNode, targetIndex, shouldInsertAfter = true, rowCount, grid) {\n  const tableRows = tableNode.getChildren();\n\n  if (targetIndex >= tableRows.length || targetIndex < 0) {\n    throw new Error('Table row target index out of range');\n  }\n\n  const targetRowNode = tableRows[targetIndex];\n\n  if ($isTableRowNode(targetRowNode)) {\n    for (let r = 0; r < rowCount; r++) {\n      const tableRowCells = targetRowNode.getChildren();\n      const tableColumnCount = tableRowCells.length;\n      const newTableRowNode = $createTableRowNode();\n\n      for (let c = 0; c < tableColumnCount; c++) {\n        const tableCellFromTargetRow = tableRowCells[c];\n\n        if (!$isTableCellNode(tableCellFromTargetRow)) {\n          throw Error(`Expected table cell`);\n        }\n\n        const {\n          above,\n          below\n        } = $getTableCellSiblingsFromTableCellNode(tableCellFromTargetRow, grid);\n        let headerState = TableCellHeaderStates.NO_STATUS;\n        const width = above && above.getWidth() || below && below.getWidth() || undefined;\n\n        if (above && above.hasHeaderState(TableCellHeaderStates.COLUMN) || below && below.hasHeaderState(TableCellHeaderStates.COLUMN)) {\n          headerState |= TableCellHeaderStates.COLUMN;\n        }\n\n        const tableCellNode = $createTableCellNode(headerState, 1, width);\n        tableCellNode.append(lexical.$createParagraphNode());\n        newTableRowNode.append(tableCellNode);\n      }\n\n      if (shouldInsertAfter) {\n        targetRowNode.insertAfter(newTableRowNode);\n      } else {\n        targetRowNode.insertBefore(newTableRowNode);\n      }\n    }\n  } else {\n    throw new Error('Row before insertion index does not exist.');\n  }\n\n  return tableNode;\n}\nfunction $insertTableColumn(tableNode, targetIndex, shouldInsertAfter = true, columnCount, grid) {\n  const tableRows = tableNode.getChildren();\n\n  for (let r = 0; r < tableRows.length; r++) {\n    const currentTableRowNode = tableRows[r];\n\n    if ($isTableRowNode(currentTableRowNode)) {\n      for (let c = 0; c < columnCount; c++) {\n        const tableRowChildren = currentTableRowNode.getChildren();\n\n        if (targetIndex >= tableRowChildren.length || targetIndex < 0) {\n          throw new Error('Table column target index out of range');\n        }\n\n        const targetCell = tableRowChildren[targetIndex];\n\n        if (!$isTableCellNode(targetCell)) {\n          throw Error(`Expected table cell`);\n        }\n\n        const {\n          left,\n          right\n        } = $getTableCellSiblingsFromTableCellNode(targetCell, grid);\n        let headerState = TableCellHeaderStates.NO_STATUS;\n\n        if (left && left.hasHeaderState(TableCellHeaderStates.ROW) || right && right.hasHeaderState(TableCellHeaderStates.ROW)) {\n          headerState |= TableCellHeaderStates.ROW;\n        }\n\n        const newTableCell = $createTableCellNode(headerState);\n        newTableCell.append(lexical.$createParagraphNode());\n\n        if (shouldInsertAfter) {\n          targetCell.insertAfter(newTableCell);\n        } else {\n          targetCell.insertBefore(newTableCell);\n        }\n      }\n    }\n  }\n\n  return tableNode;\n}\nfunction $deleteTableColumn(tableNode, targetIndex) {\n  const tableRows = tableNode.getChildren();\n\n  for (let i = 0; i < tableRows.length; i++) {\n    const currentTableRowNode = tableRows[i];\n\n    if ($isTableRowNode(currentTableRowNode)) {\n      const tableRowChildren = currentTableRowNode.getChildren();\n\n      if (targetIndex >= tableRowChildren.length || targetIndex < 0) {\n        throw new Error('Table column target index out of range');\n      }\n\n      tableRowChildren[targetIndex].remove();\n    }\n  }\n\n  return tableNode;\n}\n\n/** @module @lexical/table */\nconst INSERT_TABLE_COMMAND = lexical.createCommand('INSERT_TABLE_COMMAND');\n\nexports.$createTableCellNode = $createTableCellNode;\nexports.$createTableNode = $createTableNode;\nexports.$createTableNodeWithDimensions = $createTableNodeWithDimensions;\nexports.$createTableRowNode = $createTableRowNode;\nexports.$deleteTableColumn = $deleteTableColumn;\nexports.$getElementGridForTableNode = $getElementGridForTableNode;\nexports.$getTableCellNodeFromLexicalNode = $getTableCellNodeFromLexicalNode;\nexports.$getTableColumnIndexFromTableCellNode = $getTableColumnIndexFromTableCellNode;\nexports.$getTableNodeFromLexicalNodeOrThrow = $getTableNodeFromLexicalNodeOrThrow;\nexports.$getTableRowIndexFromTableCellNode = $getTableRowIndexFromTableCellNode;\nexports.$getTableRowNodeFromTableCellNodeOrThrow = $getTableRowNodeFromTableCellNodeOrThrow;\nexports.$insertTableColumn = $insertTableColumn;\nexports.$insertTableRow = $insertTableRow;\nexports.$isTableCellNode = $isTableCellNode;\nexports.$isTableNode = $isTableNode;\nexports.$isTableRowNode = $isTableRowNode;\nexports.$removeTableRowAtIndex = $removeTableRowAtIndex;\nexports.INSERT_TABLE_COMMAND = INSERT_TABLE_COMMAND;\nexports.TableCellHeaderStates = TableCellHeaderStates;\nexports.TableCellNode = TableCellNode;\nexports.TableNode = TableNode;\nexports.TableRowNode = TableRowNode;\nexports.TableSelection = TableSelection;\nexports.applyTableHandlers = applyTableHandlers;\nexports.getCellFromTarget = getCellFromTarget;\nexports.getTableSelectionFromTableElement = getTableSelectionFromTableElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/table/LexicalTable.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/table/LexicalTable.js":
/*!*****************************************************!*\
  !*** ./node_modules/@lexical/table/LexicalTable.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalTable =  true ? __webpack_require__(/*! ./LexicalTable.dev.js */ \"(ssr)/./node_modules/@lexical/table/LexicalTable.dev.js\") : 0\nmodule.exports = LexicalTable;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvdGFibGUvTGV4aWNhbFRhYmxlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1oscUJBQXFCLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyxzRkFBdUIsSUFBSSxDQUFpQztBQUNsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3RhYmxlL0xleGljYWxUYWJsZS5qcz8zYjE0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsVGFibGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbFRhYmxlLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsVGFibGUucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxUYWJsZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/table/LexicalTable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/text/LexicalText.dev.js":
/*!*******************************************************!*\
  !*** ./node_modules/@lexical/text/LexicalText.dev.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/** @module @lexical/text */\nfunction $findTextIntersectionFromCharacters(root, targetCharacters) {\n  let node = root.getFirstChild();\n  let currentCharacters = 0;\n\n  mainLoop: while (node !== null) {\n    if (lexical.$isElementNode(node)) {\n      const child = node.getFirstChild();\n\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n    } else if (lexical.$isTextNode(node)) {\n      const characters = node.getTextContentSize();\n\n      if (currentCharacters + characters > targetCharacters) {\n        return {\n          node,\n          offset: targetCharacters - currentCharacters\n        };\n      }\n\n      currentCharacters += characters;\n    }\n\n    const sibling = node.getNextSibling();\n\n    if (sibling !== null) {\n      node = sibling;\n      continue;\n    }\n\n    let parent = node.getParent();\n\n    while (parent !== null) {\n      const parentSibling = parent.getNextSibling();\n\n      if (parentSibling !== null) {\n        node = parentSibling;\n        continue mainLoop;\n      }\n\n      parent = parent.getParent();\n    }\n\n    break;\n  }\n\n  return null;\n}\nfunction $isRootTextContentEmpty(isEditorComposing, trim = true) {\n  if (isEditorComposing) {\n    return false;\n  }\n\n  let text = $rootTextContent();\n\n  if (trim) {\n    text = text.trim();\n  }\n\n  return text === '';\n}\nfunction $isRootTextContentEmptyCurry(isEditorComposing, trim) {\n  return () => $isRootTextContentEmpty(isEditorComposing, trim);\n}\nfunction $rootTextContent() {\n  const root = lexical.$getRoot();\n  return root.getTextContent();\n}\nfunction $canShowPlaceholder(isComposing) {\n  if (!$isRootTextContentEmpty(isComposing, false)) {\n    return false;\n  }\n\n  const root = lexical.$getRoot();\n  const children = root.getChildren();\n  const childrenLength = children.length;\n\n  if (childrenLength > 1) {\n    return false;\n  }\n\n  for (let i = 0; i < childrenLength; i++) {\n    const topBlock = children[i];\n\n    if (lexical.$isElementNode(topBlock)) {\n      if (!lexical.$isParagraphNode(topBlock)) {\n        return false;\n      }\n\n      if (topBlock.__indent !== 0) {\n        return false;\n      }\n\n      const topBlockChildren = topBlock.getChildren();\n      const topBlockChildrenLength = topBlockChildren.length;\n\n      for (let s = 0; s < topBlockChildrenLength; s++) {\n        const child = topBlockChildren[i];\n\n        if (!lexical.$isTextNode(child)) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\nfunction $canShowPlaceholderCurry(isEditorComposing) {\n  return () => $canShowPlaceholder(isEditorComposing);\n}\nfunction registerLexicalTextEntity(editor, getMatch, targetNode, createNode) {\n  const isTargetNode = node => {\n    return node instanceof targetNode;\n  };\n\n  const replaceWithSimpleText = node => {\n    const textNode = lexical.$createTextNode(node.getTextContent());\n    textNode.setFormat(node.getFormat());\n    node.replace(textNode);\n  };\n\n  const getMode = node => {\n    return node.getLatest().__mode;\n  };\n\n  const textNodeTransform = node => {\n    if (!node.isSimpleText()) {\n      return;\n    }\n\n    const prevSibling = node.getPreviousSibling();\n    let text = node.getTextContent();\n    let currentNode = node;\n    let match;\n\n    if (lexical.$isTextNode(prevSibling)) {\n      const previousText = prevSibling.getTextContent();\n      const combinedText = previousText + text;\n      const prevMatch = getMatch(combinedText);\n\n      if (isTargetNode(prevSibling)) {\n        if (prevMatch === null || getMode(prevSibling) !== 0) {\n          replaceWithSimpleText(prevSibling);\n          return;\n        } else {\n          const diff = prevMatch.end - previousText.length;\n\n          if (diff > 0) {\n            const concatText = text.slice(0, diff);\n            const newTextContent = previousText + concatText;\n            prevSibling.select();\n            prevSibling.setTextContent(newTextContent);\n\n            if (diff === text.length) {\n              node.remove();\n            } else {\n              const remainingText = text.slice(diff);\n              node.setTextContent(remainingText);\n            }\n\n            return;\n          }\n        }\n      } else if (prevMatch === null || prevMatch.start < previousText.length) {\n        return;\n      }\n    } // eslint-disable-next-line no-constant-condition\n\n\n    while (true) {\n      match = getMatch(text);\n      let nextText = match === null ? '' : text.slice(match.end);\n      text = nextText;\n\n      if (nextText === '') {\n        const nextSibling = currentNode.getNextSibling();\n\n        if (lexical.$isTextNode(nextSibling)) {\n          nextText = currentNode.getTextContent() + nextSibling.getTextContent();\n          const nextMatch = getMatch(nextText);\n\n          if (nextMatch === null) {\n            if (isTargetNode(nextSibling)) {\n              replaceWithSimpleText(nextSibling);\n            } else {\n              nextSibling.markDirty();\n            }\n\n            return;\n          } else if (nextMatch.start !== 0) {\n            return;\n          }\n        }\n      } else {\n        const nextMatch = getMatch(nextText);\n\n        if (nextMatch !== null && nextMatch.start === 0) {\n          return;\n        }\n      }\n\n      if (match === null) {\n        return;\n      }\n\n      if (match.start === 0 && lexical.$isTextNode(prevSibling) && prevSibling.isTextEntity()) {\n        continue;\n      }\n\n      let nodeToReplace;\n\n      if (match.start === 0) {\n        [nodeToReplace, currentNode] = currentNode.splitText(match.end);\n      } else {\n        [, nodeToReplace, currentNode] = currentNode.splitText(match.start, match.end);\n      }\n\n      const replacementNode = createNode(nodeToReplace);\n      nodeToReplace.replace(replacementNode);\n\n      if (currentNode == null) {\n        return;\n      }\n    }\n  };\n\n  const reverseNodeTransform = node => {\n    const text = node.getTextContent();\n    const match = getMatch(text);\n\n    if (match === null || match.start !== 0) {\n      replaceWithSimpleText(node);\n      return;\n    }\n\n    if (text.length > match.end) {\n      // This will split out the rest of the text as simple text\n      node.splitText(match.end);\n      return;\n    }\n\n    const prevSibling = node.getPreviousSibling();\n\n    if (lexical.$isTextNode(prevSibling) && prevSibling.isTextEntity()) {\n      replaceWithSimpleText(prevSibling);\n      replaceWithSimpleText(node);\n    }\n\n    const nextSibling = node.getNextSibling();\n\n    if (lexical.$isTextNode(nextSibling) && nextSibling.isTextEntity()) {\n      replaceWithSimpleText(nextSibling); // This may have already been converted in the previous block\n\n      if (isTargetNode(node)) {\n        replaceWithSimpleText(node);\n      }\n    }\n  };\n\n  const removePlainTextTransform = editor.registerNodeTransform(lexical.TextNode, textNodeTransform);\n  const removeReverseNodeTransform = editor.registerNodeTransform(targetNode, reverseNodeTransform);\n  return [removePlainTextTransform, removeReverseNodeTransform];\n}\n\nexports.$canShowPlaceholder = $canShowPlaceholder;\nexports.$canShowPlaceholderCurry = $canShowPlaceholderCurry;\nexports.$findTextIntersectionFromCharacters = $findTextIntersectionFromCharacters;\nexports.$isRootTextContentEmpty = $isRootTextContentEmpty;\nexports.$isRootTextContentEmptyCurry = $isRootTextContentEmptyCurry;\nexports.$rootTextContent = $rootTextContent;\nexports.registerLexicalTextEntity = registerLexicalTextEntity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/text/LexicalText.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/text/LexicalText.js":
/*!***************************************************!*\
  !*** ./node_modules/@lexical/text/LexicalText.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalText =  true ? __webpack_require__(/*! ./LexicalText.dev.js */ \"(ssr)/./node_modules/@lexical/text/LexicalText.dev.js\") : 0\nmodule.exports = LexicalText;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvdGV4dC9MZXhpY2FsVGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDWTtBQUNaLG9CQUFvQixLQUFzQyxHQUFHLG1CQUFPLENBQUMsbUZBQXNCLElBQUksQ0FBZ0M7QUFDL0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC90ZXh0L0xleGljYWxUZXh0LmpzP2MxMGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCdcbmNvbnN0IExleGljYWxUZXh0ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyByZXF1aXJlKCcuL0xleGljYWxUZXh0LmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsVGV4dC5wcm9kLmpzJylcbm1vZHVsZS5leHBvcnRzID0gTGV4aWNhbFRleHQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/text/LexicalText.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/utils/LexicalUtils.dev.js":
/*!*********************************************************!*\
  !*** ./node_modules/@lexical/utils/LexicalUtils.dev.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar selection = __webpack_require__(/*! @lexical/selection */ \"(ssr)/./node_modules/@lexical/selection/LexicalSelection.js\");\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\n\n/** @module @lexical/utils */\nfunction addClassNamesToElement(element, ...classNames) {\n  classNames.forEach(className => {\n    if (typeof className === 'string') {\n      const classesToAdd = className.split(' ').filter(n => n !== '');\n      element.classList.add(...classesToAdd);\n    }\n  });\n}\nfunction removeClassNamesFromElement(element, ...classNames) {\n  classNames.forEach(className => {\n    if (typeof className === 'string') {\n      element.classList.remove(...className.split(' '));\n    }\n  });\n}\nfunction isMimeType(file, acceptableMimeTypes) {\n  for (const acceptableType of acceptableMimeTypes) {\n    if (file.type.startsWith(acceptableType)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Lexical File Reader with:\n *  1. MIME type support\n *  2. batched results (HistoryPlugin compatibility)\n *  3. Order aware (respects the order when multiple Files are passed)\n *\n * const filesResult = await mediaFileReader(files, ['image/']);\n * filesResult.forEach(file => editor.dispatchCommand('INSERT_IMAGE', {\n *   src: file.result,\n * }));\n */\n\nfunction mediaFileReader(files, acceptableMimeTypes) {\n  const filesIterator = files[Symbol.iterator]();\n  return new Promise((resolve, reject) => {\n    const processed = [];\n\n    const handleNextFile = () => {\n      const {\n        done,\n        value: file\n      } = filesIterator.next();\n\n      if (done) {\n        return resolve(processed);\n      }\n\n      const fileReader = new FileReader();\n      fileReader.addEventListener('error', reject);\n      fileReader.addEventListener('load', () => {\n        const result = fileReader.result;\n\n        if (typeof result === 'string') {\n          processed.push({\n            file,\n            result\n          });\n        }\n\n        handleNextFile();\n      });\n\n      if (isMimeType(file, acceptableMimeTypes)) {\n        fileReader.readAsDataURL(file);\n      } else {\n        handleNextFile();\n      }\n    };\n\n    handleNextFile();\n  });\n}\nfunction $dfs(startingNode, endingNode) {\n  const nodes = [];\n  const start = (startingNode || lexical.$getRoot()).getLatest();\n  const end = endingNode || (lexical.$isElementNode(start) ? start.getLastDescendant() : start);\n  let node = start;\n  let depth = $getDepth(node);\n\n  while (node !== null && !node.is(end)) {\n    nodes.push({\n      depth,\n      node\n    });\n\n    if (lexical.$isElementNode(node) && node.getChildrenSize() > 0) {\n      node = node.getFirstChild();\n      depth++;\n    } else {\n      // Find immediate sibling or nearest parent sibling\n      let sibling = null;\n\n      while (sibling === null && node !== null) {\n        sibling = node.getNextSibling();\n\n        if (sibling === null) {\n          node = node.getParent();\n          depth--;\n        } else {\n          node = sibling;\n        }\n      }\n    }\n  }\n\n  if (node !== null && node.is(end)) {\n    nodes.push({\n      depth,\n      node\n    });\n  }\n\n  return nodes;\n}\n\nfunction $getDepth(node) {\n  let innerNode = node;\n  let depth = 0;\n\n  while ((innerNode = innerNode.getParent()) !== null) {\n    depth++;\n  }\n\n  return depth;\n}\n\nfunction $getNearestNodeOfType(node, klass) {\n  let parent = node;\n\n  while (parent != null) {\n    if (parent instanceof klass) {\n      return parent;\n    }\n\n    parent = parent.getParent();\n  }\n\n  return null;\n}\nfunction $getNearestBlockElementAncestorOrThrow(startNode) {\n  const blockNode = $findMatchingParent(startNode, node => lexical.$isElementNode(node) && !node.isInline());\n\n  if (!lexical.$isElementNode(blockNode)) {\n    {\n      throw Error(`Expected node ${startNode.__key} to have closest block element node.`);\n    }\n  }\n\n  return blockNode;\n}\nfunction $findMatchingParent(startingNode, findFn) {\n  let curr = startingNode;\n\n  while (curr !== lexical.$getRoot() && curr != null) {\n    if (findFn(curr)) {\n      return curr;\n    }\n\n    curr = curr.getParent();\n  }\n\n  return null;\n}\nfunction mergeRegister(...func) {\n  return () => {\n    func.forEach(f => f());\n  };\n}\nfunction registerNestedElementResolver(editor, targetNode, cloneNode, handleOverlap) {\n  const $isTargetNode = node => {\n    return node instanceof targetNode;\n  };\n\n  const $findMatch = node => {\n    // First validate we don't have any children that are of the target,\n    // as we need to handle them first.\n    const children = node.getChildren();\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n\n      if ($isTargetNode(child)) {\n        return null;\n      }\n    }\n\n    let parentNode = node;\n    let childNode = node;\n\n    while (parentNode !== null) {\n      childNode = parentNode;\n      parentNode = parentNode.getParent();\n\n      if ($isTargetNode(parentNode)) {\n        return {\n          child: childNode,\n          parent: parentNode\n        };\n      }\n    }\n\n    return null;\n  };\n\n  const elementNodeTransform = node => {\n    const match = $findMatch(node);\n\n    if (match !== null) {\n      const {\n        child,\n        parent\n      } = match; // Simple path, we can move child out and siblings into a new parent.\n\n      if (child.is(node)) {\n        handleOverlap(parent, node);\n        const nextSiblings = child.getNextSiblings();\n        const nextSiblingsLength = nextSiblings.length;\n        parent.insertAfter(child);\n\n        if (nextSiblingsLength !== 0) {\n          const newParent = cloneNode(parent);\n          child.insertAfter(newParent);\n\n          for (let i = 0; i < nextSiblingsLength; i++) {\n            newParent.append(nextSiblings[i]);\n          }\n        }\n\n        if (!parent.canBeEmpty() && parent.getChildrenSize() === 0) {\n          parent.remove();\n        }\n      }\n    }\n  };\n\n  return editor.registerNodeTransform(targetNode, elementNodeTransform);\n}\nfunction $restoreEditorState(editor, editorState) {\n  const FULL_RECONCILE = 2;\n  const nodeMap = new Map();\n  const activeEditorState = editor._pendingEditorState;\n\n  for (const [key, node] of editorState._nodeMap) {\n    const clone = selection.$cloneWithProperties(node);\n\n    if (lexical.$isTextNode(clone)) {\n      clone.__text = node.__text;\n    }\n\n    nodeMap.set(key, clone);\n  }\n\n  if (activeEditorState) {\n    activeEditorState._nodeMap = nodeMap;\n  }\n\n  editor._dirtyType = FULL_RECONCILE;\n  const selection$1 = editorState._selection;\n  lexical.$setSelection(selection$1 === null ? null : selection$1.clone());\n}\nfunction $insertNodeToNearestRoot(node) {\n  const selection = lexical.$getSelection();\n\n  if (lexical.$isRangeSelection(selection)) {\n    const {\n      focus\n    } = selection;\n    const focusNode = focus.getNode();\n    const focusOffset = focus.offset;\n\n    if (lexical.$isRootOrShadowRoot(focusNode)) {\n      const focusChild = focusNode.getChildAtIndex(focusOffset);\n\n      if (focusChild == null) {\n        focusNode.append(node);\n      } else {\n        focusChild.insertBefore(node);\n      }\n\n      node.selectNext();\n    } else {\n      let splitNode;\n      let splitOffset;\n\n      if (lexical.$isTextNode(focusNode)) {\n        splitNode = focusNode.getParentOrThrow();\n        splitOffset = focusNode.getIndexWithinParent();\n\n        if (focusOffset > 0) {\n          splitOffset += 1;\n          focusNode.splitText(focusOffset);\n        }\n      } else {\n        splitNode = focusNode;\n        splitOffset = focusOffset;\n      }\n\n      const [, rightTree] = lexical.$splitNode(splitNode, splitOffset);\n      rightTree.insertBefore(node);\n      rightTree.selectStart();\n    }\n  } else {\n    if (lexical.$isNodeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection)) {\n      const nodes = selection.getNodes();\n      nodes[nodes.length - 1].getTopLevelElementOrThrow().insertAfter(node);\n    } else {\n      const root = lexical.$getRoot();\n      root.append(node);\n    }\n\n    const paragraphNode = lexical.$createParagraphNode();\n    node.insertAfter(paragraphNode);\n    paragraphNode.select();\n  }\n\n  return node.getLatest();\n}\nfunction $wrapNodeInElement(node, createElementNode) {\n  const elementNode = createElementNode();\n  node.replace(elementNode);\n  elementNode.append(node);\n  return elementNode;\n}\nfunction isHTMLAnchorElement(x) {\n  return isHTMLElement(x) && x.tagName === 'A';\n}\nfunction isHTMLElement(x) {\n  // @ts-ignore-next-line - strict check on nodeType here should filter out non-Element EventTarget implementors\n  return x.nodeType === 1;\n}\n\nexports.$splitNode = lexical.$splitNode;\nexports.$dfs = $dfs;\nexports.$findMatchingParent = $findMatchingParent;\nexports.$getNearestBlockElementAncestorOrThrow = $getNearestBlockElementAncestorOrThrow;\nexports.$getNearestNodeOfType = $getNearestNodeOfType;\nexports.$insertNodeToNearestRoot = $insertNodeToNearestRoot;\nexports.$restoreEditorState = $restoreEditorState;\nexports.$wrapNodeInElement = $wrapNodeInElement;\nexports.addClassNamesToElement = addClassNamesToElement;\nexports.isHTMLAnchorElement = isHTMLAnchorElement;\nexports.isHTMLElement = isHTMLElement;\nexports.isMimeType = isMimeType;\nexports.mediaFileReader = mediaFileReader;\nexports.mergeRegister = mergeRegister;\nexports.registerNestedElementResolver = registerNestedElementResolver;\nexports.removeClassNamesFromElement = removeClassNamesFromElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvdXRpbHMvTGV4aWNhbFV0aWxzLmRldi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYixnQkFBZ0IsbUJBQU8sQ0FBQyx1RkFBb0I7QUFDNUMsY0FBYyxtQkFBTyxDQUFDLHdEQUFTOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQyxpQkFBaUI7QUFDcEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLHFCQUFxQjtBQUN6Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFNBQVM7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDBCQUEwQix3QkFBd0I7QUFDbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEIsWUFBWTtBQUNaLDJCQUEyQjtBQUMzQiw4Q0FBOEM7QUFDOUMsNkJBQTZCO0FBQzdCLGdDQUFnQztBQUNoQywyQkFBMkI7QUFDM0IsMEJBQTBCO0FBQzFCLDhCQUE4QjtBQUM5QiwyQkFBMkI7QUFDM0IscUJBQXFCO0FBQ3JCLGtCQUFrQjtBQUNsQix1QkFBdUI7QUFDdkIscUJBQXFCO0FBQ3JCLHFDQUFxQztBQUNyQyxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbXNfY3JlYXRvci8uL25vZGVfbW9kdWxlcy9AbGV4aWNhbC91dGlscy9MZXhpY2FsVXRpbHMuZGV2LmpzP2QxMDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzZWxlY3Rpb24gPSByZXF1aXJlKCdAbGV4aWNhbC9zZWxlY3Rpb24nKTtcbnZhciBsZXhpY2FsID0gcmVxdWlyZSgnbGV4aWNhbCcpO1xuXG4vKiogQG1vZHVsZSBAbGV4aWNhbC91dGlscyAqL1xuZnVuY3Rpb24gYWRkQ2xhc3NOYW1lc1RvRWxlbWVudChlbGVtZW50LCAuLi5jbGFzc05hbWVzKSB7XG4gIGNsYXNzTmFtZXMuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgY2xhc3Nlc1RvQWRkID0gY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKG4gPT4gbiAhPT0gJycpO1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXNUb0FkZCk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzTmFtZXNGcm9tRWxlbWVudChlbGVtZW50LCAuLi5jbGFzc05hbWVzKSB7XG4gIGNsYXNzTmFtZXMuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzTmFtZS5zcGxpdCgnICcpKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gaXNNaW1lVHlwZShmaWxlLCBhY2NlcHRhYmxlTWltZVR5cGVzKSB7XG4gIGZvciAoY29uc3QgYWNjZXB0YWJsZVR5cGUgb2YgYWNjZXB0YWJsZU1pbWVUeXBlcykge1xuICAgIGlmIChmaWxlLnR5cGUuc3RhcnRzV2l0aChhY2NlcHRhYmxlVHlwZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogTGV4aWNhbCBGaWxlIFJlYWRlciB3aXRoOlxuICogIDEuIE1JTUUgdHlwZSBzdXBwb3J0XG4gKiAgMi4gYmF0Y2hlZCByZXN1bHRzIChIaXN0b3J5UGx1Z2luIGNvbXBhdGliaWxpdHkpXG4gKiAgMy4gT3JkZXIgYXdhcmUgKHJlc3BlY3RzIHRoZSBvcmRlciB3aGVuIG11bHRpcGxlIEZpbGVzIGFyZSBwYXNzZWQpXG4gKlxuICogY29uc3QgZmlsZXNSZXN1bHQgPSBhd2FpdCBtZWRpYUZpbGVSZWFkZXIoZmlsZXMsIFsnaW1hZ2UvJ10pO1xuICogZmlsZXNSZXN1bHQuZm9yRWFjaChmaWxlID0+IGVkaXRvci5kaXNwYXRjaENvbW1hbmQoJ0lOU0VSVF9JTUFHRScsIHtcbiAqICAgc3JjOiBmaWxlLnJlc3VsdCxcbiAqIH0pKTtcbiAqL1xuXG5mdW5jdGlvbiBtZWRpYUZpbGVSZWFkZXIoZmlsZXMsIGFjY2VwdGFibGVNaW1lVHlwZXMpIHtcbiAgY29uc3QgZmlsZXNJdGVyYXRvciA9IGZpbGVzW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBwcm9jZXNzZWQgPSBbXTtcblxuICAgIGNvbnN0IGhhbmRsZU5leHRGaWxlID0gKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBkb25lLFxuICAgICAgICB2YWx1ZTogZmlsZVxuICAgICAgfSA9IGZpbGVzSXRlcmF0b3IubmV4dCgpO1xuXG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShwcm9jZXNzZWQpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIGZpbGVSZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCByZWplY3QpO1xuICAgICAgZmlsZVJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBmaWxlUmVhZGVyLnJlc3VsdDtcblxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBwcm9jZXNzZWQucHVzaCh7XG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBoYW5kbGVOZXh0RmlsZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChpc01pbWVUeXBlKGZpbGUsIGFjY2VwdGFibGVNaW1lVHlwZXMpKSB7XG4gICAgICAgIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZU5leHRGaWxlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGhhbmRsZU5leHRGaWxlKCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gJGRmcyhzdGFydGluZ05vZGUsIGVuZGluZ05vZGUpIHtcbiAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgY29uc3Qgc3RhcnQgPSAoc3RhcnRpbmdOb2RlIHx8IGxleGljYWwuJGdldFJvb3QoKSkuZ2V0TGF0ZXN0KCk7XG4gIGNvbnN0IGVuZCA9IGVuZGluZ05vZGUgfHwgKGxleGljYWwuJGlzRWxlbWVudE5vZGUoc3RhcnQpID8gc3RhcnQuZ2V0TGFzdERlc2NlbmRhbnQoKSA6IHN0YXJ0KTtcbiAgbGV0IG5vZGUgPSBzdGFydDtcbiAgbGV0IGRlcHRoID0gJGdldERlcHRoKG5vZGUpO1xuXG4gIHdoaWxlIChub2RlICE9PSBudWxsICYmICFub2RlLmlzKGVuZCkpIHtcbiAgICBub2Rlcy5wdXNoKHtcbiAgICAgIGRlcHRoLFxuICAgICAgbm9kZVxuICAgIH0pO1xuXG4gICAgaWYgKGxleGljYWwuJGlzRWxlbWVudE5vZGUobm9kZSkgJiYgbm9kZS5nZXRDaGlsZHJlblNpemUoKSA+IDApIHtcbiAgICAgIG5vZGUgPSBub2RlLmdldEZpcnN0Q2hpbGQoKTtcbiAgICAgIGRlcHRoKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZpbmQgaW1tZWRpYXRlIHNpYmxpbmcgb3IgbmVhcmVzdCBwYXJlbnQgc2libGluZ1xuICAgICAgbGV0IHNpYmxpbmcgPSBudWxsO1xuXG4gICAgICB3aGlsZSAoc2libGluZyA9PT0gbnVsbCAmJiBub2RlICE9PSBudWxsKSB7XG4gICAgICAgIHNpYmxpbmcgPSBub2RlLmdldE5leHRTaWJsaW5nKCk7XG5cbiAgICAgICAgaWYgKHNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgICBub2RlID0gbm9kZS5nZXRQYXJlbnQoKTtcbiAgICAgICAgICBkZXB0aC0tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUgPSBzaWJsaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG5vZGUgIT09IG51bGwgJiYgbm9kZS5pcyhlbmQpKSB7XG4gICAgbm9kZXMucHVzaCh7XG4gICAgICBkZXB0aCxcbiAgICAgIG5vZGVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBub2Rlcztcbn1cblxuZnVuY3Rpb24gJGdldERlcHRoKG5vZGUpIHtcbiAgbGV0IGlubmVyTm9kZSA9IG5vZGU7XG4gIGxldCBkZXB0aCA9IDA7XG5cbiAgd2hpbGUgKChpbm5lck5vZGUgPSBpbm5lck5vZGUuZ2V0UGFyZW50KCkpICE9PSBudWxsKSB7XG4gICAgZGVwdGgrKztcbiAgfVxuXG4gIHJldHVybiBkZXB0aDtcbn1cblxuZnVuY3Rpb24gJGdldE5lYXJlc3ROb2RlT2ZUeXBlKG5vZGUsIGtsYXNzKSB7XG4gIGxldCBwYXJlbnQgPSBub2RlO1xuXG4gIHdoaWxlIChwYXJlbnQgIT0gbnVsbCkge1xuICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBrbGFzcykge1xuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9XG5cbiAgICBwYXJlbnQgPSBwYXJlbnQuZ2V0UGFyZW50KCk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uICRnZXROZWFyZXN0QmxvY2tFbGVtZW50QW5jZXN0b3JPclRocm93KHN0YXJ0Tm9kZSkge1xuICBjb25zdCBibG9ja05vZGUgPSAkZmluZE1hdGNoaW5nUGFyZW50KHN0YXJ0Tm9kZSwgbm9kZSA9PiBsZXhpY2FsLiRpc0VsZW1lbnROb2RlKG5vZGUpICYmICFub2RlLmlzSW5saW5lKCkpO1xuXG4gIGlmICghbGV4aWNhbC4kaXNFbGVtZW50Tm9kZShibG9ja05vZGUpKSB7XG4gICAge1xuICAgICAgdGhyb3cgRXJyb3IoYEV4cGVjdGVkIG5vZGUgJHtzdGFydE5vZGUuX19rZXl9IHRvIGhhdmUgY2xvc2VzdCBibG9jayBlbGVtZW50IG5vZGUuYCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJsb2NrTm9kZTtcbn1cbmZ1bmN0aW9uICRmaW5kTWF0Y2hpbmdQYXJlbnQoc3RhcnRpbmdOb2RlLCBmaW5kRm4pIHtcbiAgbGV0IGN1cnIgPSBzdGFydGluZ05vZGU7XG5cbiAgd2hpbGUgKGN1cnIgIT09IGxleGljYWwuJGdldFJvb3QoKSAmJiBjdXJyICE9IG51bGwpIHtcbiAgICBpZiAoZmluZEZuKGN1cnIpKSB7XG4gICAgICByZXR1cm4gY3VycjtcbiAgICB9XG5cbiAgICBjdXJyID0gY3Vyci5nZXRQYXJlbnQoKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gbWVyZ2VSZWdpc3RlciguLi5mdW5jKSB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgZnVuYy5mb3JFYWNoKGYgPT4gZigpKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyTmVzdGVkRWxlbWVudFJlc29sdmVyKGVkaXRvciwgdGFyZ2V0Tm9kZSwgY2xvbmVOb2RlLCBoYW5kbGVPdmVybGFwKSB7XG4gIGNvbnN0ICRpc1RhcmdldE5vZGUgPSBub2RlID0+IHtcbiAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHRhcmdldE5vZGU7XG4gIH07XG5cbiAgY29uc3QgJGZpbmRNYXRjaCA9IG5vZGUgPT4ge1xuICAgIC8vIEZpcnN0IHZhbGlkYXRlIHdlIGRvbid0IGhhdmUgYW55IGNoaWxkcmVuIHRoYXQgYXJlIG9mIHRoZSB0YXJnZXQsXG4gICAgLy8gYXMgd2UgbmVlZCB0byBoYW5kbGUgdGhlbSBmaXJzdC5cbiAgICBjb25zdCBjaGlsZHJlbiA9IG5vZGUuZ2V0Q2hpbGRyZW4oKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG5cbiAgICAgIGlmICgkaXNUYXJnZXROb2RlKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcGFyZW50Tm9kZSA9IG5vZGU7XG4gICAgbGV0IGNoaWxkTm9kZSA9IG5vZGU7XG5cbiAgICB3aGlsZSAocGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgY2hpbGROb2RlID0gcGFyZW50Tm9kZTtcbiAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLmdldFBhcmVudCgpO1xuXG4gICAgICBpZiAoJGlzVGFyZ2V0Tm9kZShwYXJlbnROb2RlKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkOiBjaGlsZE5vZGUsXG4gICAgICAgICAgcGFyZW50OiBwYXJlbnROb2RlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgY29uc3QgZWxlbWVudE5vZGVUcmFuc2Zvcm0gPSBub2RlID0+IHtcbiAgICBjb25zdCBtYXRjaCA9ICRmaW5kTWF0Y2gobm9kZSk7XG5cbiAgICBpZiAobWF0Y2ggIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIHBhcmVudFxuICAgICAgfSA9IG1hdGNoOyAvLyBTaW1wbGUgcGF0aCwgd2UgY2FuIG1vdmUgY2hpbGQgb3V0IGFuZCBzaWJsaW5ncyBpbnRvIGEgbmV3IHBhcmVudC5cblxuICAgICAgaWYgKGNoaWxkLmlzKG5vZGUpKSB7XG4gICAgICAgIGhhbmRsZU92ZXJsYXAocGFyZW50LCBub2RlKTtcbiAgICAgICAgY29uc3QgbmV4dFNpYmxpbmdzID0gY2hpbGQuZ2V0TmV4dFNpYmxpbmdzKCk7XG4gICAgICAgIGNvbnN0IG5leHRTaWJsaW5nc0xlbmd0aCA9IG5leHRTaWJsaW5ncy5sZW5ndGg7XG4gICAgICAgIHBhcmVudC5pbnNlcnRBZnRlcihjaGlsZCk7XG5cbiAgICAgICAgaWYgKG5leHRTaWJsaW5nc0xlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIGNvbnN0IG5ld1BhcmVudCA9IGNsb25lTm9kZShwYXJlbnQpO1xuICAgICAgICAgIGNoaWxkLmluc2VydEFmdGVyKG5ld1BhcmVudCk7XG5cbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5leHRTaWJsaW5nc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBuZXdQYXJlbnQuYXBwZW5kKG5leHRTaWJsaW5nc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXJlbnQuY2FuQmVFbXB0eSgpICYmIHBhcmVudC5nZXRDaGlsZHJlblNpemUoKSA9PT0gMCkge1xuICAgICAgICAgIHBhcmVudC5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gZWRpdG9yLnJlZ2lzdGVyTm9kZVRyYW5zZm9ybSh0YXJnZXROb2RlLCBlbGVtZW50Tm9kZVRyYW5zZm9ybSk7XG59XG5mdW5jdGlvbiAkcmVzdG9yZUVkaXRvclN0YXRlKGVkaXRvciwgZWRpdG9yU3RhdGUpIHtcbiAgY29uc3QgRlVMTF9SRUNPTkNJTEUgPSAyO1xuICBjb25zdCBub2RlTWFwID0gbmV3IE1hcCgpO1xuICBjb25zdCBhY3RpdmVFZGl0b3JTdGF0ZSA9IGVkaXRvci5fcGVuZGluZ0VkaXRvclN0YXRlO1xuXG4gIGZvciAoY29uc3QgW2tleSwgbm9kZV0gb2YgZWRpdG9yU3RhdGUuX25vZGVNYXApIHtcbiAgICBjb25zdCBjbG9uZSA9IHNlbGVjdGlvbi4kY2xvbmVXaXRoUHJvcGVydGllcyhub2RlKTtcblxuICAgIGlmIChsZXhpY2FsLiRpc1RleHROb2RlKGNsb25lKSkge1xuICAgICAgY2xvbmUuX190ZXh0ID0gbm9kZS5fX3RleHQ7XG4gICAgfVxuXG4gICAgbm9kZU1hcC5zZXQoa2V5LCBjbG9uZSk7XG4gIH1cblxuICBpZiAoYWN0aXZlRWRpdG9yU3RhdGUpIHtcbiAgICBhY3RpdmVFZGl0b3JTdGF0ZS5fbm9kZU1hcCA9IG5vZGVNYXA7XG4gIH1cblxuICBlZGl0b3IuX2RpcnR5VHlwZSA9IEZVTExfUkVDT05DSUxFO1xuICBjb25zdCBzZWxlY3Rpb24kMSA9IGVkaXRvclN0YXRlLl9zZWxlY3Rpb247XG4gIGxleGljYWwuJHNldFNlbGVjdGlvbihzZWxlY3Rpb24kMSA9PT0gbnVsbCA/IG51bGwgOiBzZWxlY3Rpb24kMS5jbG9uZSgpKTtcbn1cbmZ1bmN0aW9uICRpbnNlcnROb2RlVG9OZWFyZXN0Um9vdChub2RlKSB7XG4gIGNvbnN0IHNlbGVjdGlvbiA9IGxleGljYWwuJGdldFNlbGVjdGlvbigpO1xuXG4gIGlmIChsZXhpY2FsLiRpc1JhbmdlU2VsZWN0aW9uKHNlbGVjdGlvbikpIHtcbiAgICBjb25zdCB7XG4gICAgICBmb2N1c1xuICAgIH0gPSBzZWxlY3Rpb247XG4gICAgY29uc3QgZm9jdXNOb2RlID0gZm9jdXMuZ2V0Tm9kZSgpO1xuICAgIGNvbnN0IGZvY3VzT2Zmc2V0ID0gZm9jdXMub2Zmc2V0O1xuXG4gICAgaWYgKGxleGljYWwuJGlzUm9vdE9yU2hhZG93Um9vdChmb2N1c05vZGUpKSB7XG4gICAgICBjb25zdCBmb2N1c0NoaWxkID0gZm9jdXNOb2RlLmdldENoaWxkQXRJbmRleChmb2N1c09mZnNldCk7XG5cbiAgICAgIGlmIChmb2N1c0NoaWxkID09IG51bGwpIHtcbiAgICAgICAgZm9jdXNOb2RlLmFwcGVuZChub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvY3VzQ2hpbGQuaW5zZXJ0QmVmb3JlKG5vZGUpO1xuICAgICAgfVxuXG4gICAgICBub2RlLnNlbGVjdE5leHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHNwbGl0Tm9kZTtcbiAgICAgIGxldCBzcGxpdE9mZnNldDtcblxuICAgICAgaWYgKGxleGljYWwuJGlzVGV4dE5vZGUoZm9jdXNOb2RlKSkge1xuICAgICAgICBzcGxpdE5vZGUgPSBmb2N1c05vZGUuZ2V0UGFyZW50T3JUaHJvdygpO1xuICAgICAgICBzcGxpdE9mZnNldCA9IGZvY3VzTm9kZS5nZXRJbmRleFdpdGhpblBhcmVudCgpO1xuXG4gICAgICAgIGlmIChmb2N1c09mZnNldCA+IDApIHtcbiAgICAgICAgICBzcGxpdE9mZnNldCArPSAxO1xuICAgICAgICAgIGZvY3VzTm9kZS5zcGxpdFRleHQoZm9jdXNPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpdE5vZGUgPSBmb2N1c05vZGU7XG4gICAgICAgIHNwbGl0T2Zmc2V0ID0gZm9jdXNPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFssIHJpZ2h0VHJlZV0gPSBsZXhpY2FsLiRzcGxpdE5vZGUoc3BsaXROb2RlLCBzcGxpdE9mZnNldCk7XG4gICAgICByaWdodFRyZWUuaW5zZXJ0QmVmb3JlKG5vZGUpO1xuICAgICAgcmlnaHRUcmVlLnNlbGVjdFN0YXJ0KCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChsZXhpY2FsLiRpc05vZGVTZWxlY3Rpb24oc2VsZWN0aW9uKSB8fCBsZXhpY2FsLkRFUFJFQ0FURURfJGlzR3JpZFNlbGVjdGlvbihzZWxlY3Rpb24pKSB7XG4gICAgICBjb25zdCBub2RlcyA9IHNlbGVjdGlvbi5nZXROb2RlcygpO1xuICAgICAgbm9kZXNbbm9kZXMubGVuZ3RoIC0gMV0uZ2V0VG9wTGV2ZWxFbGVtZW50T3JUaHJvdygpLmluc2VydEFmdGVyKG5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByb290ID0gbGV4aWNhbC4kZ2V0Um9vdCgpO1xuICAgICAgcm9vdC5hcHBlbmQobm9kZSk7XG4gICAgfVxuXG4gICAgY29uc3QgcGFyYWdyYXBoTm9kZSA9IGxleGljYWwuJGNyZWF0ZVBhcmFncmFwaE5vZGUoKTtcbiAgICBub2RlLmluc2VydEFmdGVyKHBhcmFncmFwaE5vZGUpO1xuICAgIHBhcmFncmFwaE5vZGUuc2VsZWN0KCk7XG4gIH1cblxuICByZXR1cm4gbm9kZS5nZXRMYXRlc3QoKTtcbn1cbmZ1bmN0aW9uICR3cmFwTm9kZUluRWxlbWVudChub2RlLCBjcmVhdGVFbGVtZW50Tm9kZSkge1xuICBjb25zdCBlbGVtZW50Tm9kZSA9IGNyZWF0ZUVsZW1lbnROb2RlKCk7XG4gIG5vZGUucmVwbGFjZShlbGVtZW50Tm9kZSk7XG4gIGVsZW1lbnROb2RlLmFwcGVuZChub2RlKTtcbiAgcmV0dXJuIGVsZW1lbnROb2RlO1xufVxuZnVuY3Rpb24gaXNIVE1MQW5jaG9yRWxlbWVudCh4KSB7XG4gIHJldHVybiBpc0hUTUxFbGVtZW50KHgpICYmIHgudGFnTmFtZSA9PT0gJ0EnO1xufVxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudCh4KSB7XG4gIC8vIEB0cy1pZ25vcmUtbmV4dC1saW5lIC0gc3RyaWN0IGNoZWNrIG9uIG5vZGVUeXBlIGhlcmUgc2hvdWxkIGZpbHRlciBvdXQgbm9uLUVsZW1lbnQgRXZlbnRUYXJnZXQgaW1wbGVtZW50b3JzXG4gIHJldHVybiB4Lm5vZGVUeXBlID09PSAxO1xufVxuXG5leHBvcnRzLiRzcGxpdE5vZGUgPSBsZXhpY2FsLiRzcGxpdE5vZGU7XG5leHBvcnRzLiRkZnMgPSAkZGZzO1xuZXhwb3J0cy4kZmluZE1hdGNoaW5nUGFyZW50ID0gJGZpbmRNYXRjaGluZ1BhcmVudDtcbmV4cG9ydHMuJGdldE5lYXJlc3RCbG9ja0VsZW1lbnRBbmNlc3Rvck9yVGhyb3cgPSAkZ2V0TmVhcmVzdEJsb2NrRWxlbWVudEFuY2VzdG9yT3JUaHJvdztcbmV4cG9ydHMuJGdldE5lYXJlc3ROb2RlT2ZUeXBlID0gJGdldE5lYXJlc3ROb2RlT2ZUeXBlO1xuZXhwb3J0cy4kaW5zZXJ0Tm9kZVRvTmVhcmVzdFJvb3QgPSAkaW5zZXJ0Tm9kZVRvTmVhcmVzdFJvb3Q7XG5leHBvcnRzLiRyZXN0b3JlRWRpdG9yU3RhdGUgPSAkcmVzdG9yZUVkaXRvclN0YXRlO1xuZXhwb3J0cy4kd3JhcE5vZGVJbkVsZW1lbnQgPSAkd3JhcE5vZGVJbkVsZW1lbnQ7XG5leHBvcnRzLmFkZENsYXNzTmFtZXNUb0VsZW1lbnQgPSBhZGRDbGFzc05hbWVzVG9FbGVtZW50O1xuZXhwb3J0cy5pc0hUTUxBbmNob3JFbGVtZW50ID0gaXNIVE1MQW5jaG9yRWxlbWVudDtcbmV4cG9ydHMuaXNIVE1MRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQ7XG5leHBvcnRzLmlzTWltZVR5cGUgPSBpc01pbWVUeXBlO1xuZXhwb3J0cy5tZWRpYUZpbGVSZWFkZXIgPSBtZWRpYUZpbGVSZWFkZXI7XG5leHBvcnRzLm1lcmdlUmVnaXN0ZXIgPSBtZXJnZVJlZ2lzdGVyO1xuZXhwb3J0cy5yZWdpc3Rlck5lc3RlZEVsZW1lbnRSZXNvbHZlciA9IHJlZ2lzdGVyTmVzdGVkRWxlbWVudFJlc29sdmVyO1xuZXhwb3J0cy5yZW1vdmVDbGFzc05hbWVzRnJvbUVsZW1lbnQgPSByZW1vdmVDbGFzc05hbWVzRnJvbUVsZW1lbnQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/utils/LexicalUtils.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/utils/LexicalUtils.js":
/*!*****************************************************!*\
  !*** ./node_modules/@lexical/utils/LexicalUtils.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalUtils =  true ? __webpack_require__(/*! ./LexicalUtils.dev.js */ \"(ssr)/./node_modules/@lexical/utils/LexicalUtils.dev.js\") : 0\nmodule.exports = LexicalUtils;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwvdXRpbHMvTGV4aWNhbFV0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ1oscUJBQXFCLEtBQXNDLEdBQUcsbUJBQU8sQ0FBQyxzRkFBdUIsSUFBSSxDQUFpQztBQUNsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Ntc19jcmVhdG9yLy4vbm9kZV9tb2R1bGVzL0BsZXhpY2FsL3V0aWxzL0xleGljYWxVdGlscy5qcz84MGVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5jb25zdCBMZXhpY2FsVXRpbHMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IHJlcXVpcmUoJy4vTGV4aWNhbFV0aWxzLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsVXRpbHMucHJvZC5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IExleGljYWxVdGlsczsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/utils/LexicalUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/yjs/LexicalYjs.dev.js":
/*!*****************************************************!*\
  !*** ./node_modules/@lexical/yjs/LexicalYjs.dev.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar lexical = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/lexical/Lexical.js\");\nvar yjs = __webpack_require__(/*! yjs */ \"(ssr)/./node_modules/yjs/dist/yjs.mjs\");\nvar selection = __webpack_require__(/*! @lexical/selection */ \"(ssr)/./node_modules/@lexical/selection/LexicalSelection.js\");\nvar offset = __webpack_require__(/*! @lexical/offset */ \"(ssr)/./node_modules/@lexical/offset/LexicalOffset.js\");\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass CollabLineBreakNode {\n  constructor(map, parent) {\n    this._key = '';\n    this._map = map;\n    this._parent = parent;\n    this._type = 'linebreak';\n  }\n\n  getNode() {\n    const node = lexical.$getNodeByKey(this._key);\n    return lexical.$isLineBreakNode(node) ? node : null;\n  }\n\n  getKey() {\n    return this._key;\n  }\n\n  getSharedType() {\n    return this._map;\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  getSize() {\n    return 1;\n  }\n\n  getOffset() {\n    const collabElementNode = this._parent;\n    return collabElementNode.getChildOffset(this);\n  }\n\n  destroy(binding) {\n    const collabNodeMap = binding.collabNodeMap;\n    collabNodeMap.delete(this._key);\n  }\n\n}\nfunction $createCollabLineBreakNode(map, parent) {\n  const collabNode = new CollabLineBreakNode(map, parent); // @ts-expect-error: internal field\n\n  map._collabNode = collabNode;\n  return collabNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction simpleDiffWithCursor(a, b, cursor) {\n  const aLength = a.length;\n  const bLength = b.length;\n  let left = 0; // number of same characters counting from left\n\n  let right = 0; // number of same characters counting from right\n  // Iterate left to the right until we find a changed character\n  // First iteration considers the current cursor position\n\n  while (left < aLength && left < bLength && a[left] === b[left] && left < cursor) {\n    left++;\n  } // Iterate right to the left until we find a changed character\n\n\n  while (right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1]) {\n    right++;\n  } // Try to iterate left further to the right without caring about the current cursor position\n\n\n  while (right + left < aLength && right + left < bLength && a[left] === b[left]) {\n    left++;\n  }\n\n  return {\n    index: left,\n    insert: b.slice(left, bLength - right),\n    remove: aLength - left - right\n  };\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction diffTextContentAndApplyDelta(collabNode, key, prevText, nextText) {\n  const selection = lexical.$getSelection();\n  let cursorOffset = nextText.length;\n\n  if (lexical.$isRangeSelection(selection) && selection.isCollapsed()) {\n    const anchor = selection.anchor;\n\n    if (anchor.key === key) {\n      cursorOffset = anchor.offset;\n    }\n  }\n\n  const diff = simpleDiffWithCursor(prevText, nextText, cursorOffset);\n  collabNode.spliceText(diff.index, diff.remove, diff.insert);\n}\n\nclass CollabTextNode {\n  constructor(map, text, parent, type) {\n    this._key = '';\n    this._map = map;\n    this._parent = parent;\n    this._text = text;\n    this._type = type;\n    this._normalized = false;\n  }\n\n  getPrevNode(nodeMap) {\n    if (nodeMap === null) {\n      return null;\n    }\n\n    const node = nodeMap.get(this._key);\n    return lexical.$isTextNode(node) ? node : null;\n  }\n\n  getNode() {\n    const node = lexical.$getNodeByKey(this._key);\n    return lexical.$isTextNode(node) ? node : null;\n  }\n\n  getSharedType() {\n    return this._map;\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  getKey() {\n    return this._key;\n  }\n\n  getSize() {\n    return this._text.length + (this._normalized ? 0 : 1);\n  }\n\n  getOffset() {\n    const collabElementNode = this._parent;\n    return collabElementNode.getChildOffset(this);\n  }\n\n  spliceText(index, delCount, newText) {\n    const collabElementNode = this._parent;\n    const xmlText = collabElementNode._xmlText;\n    const offset = this.getOffset() + 1 + index;\n\n    if (delCount !== 0) {\n      xmlText.delete(offset, delCount);\n    }\n\n    if (newText !== '') {\n      xmlText.insert(offset, newText);\n    }\n  }\n\n  syncPropertiesAndTextFromLexical(binding, nextLexicalNode, prevNodeMap) {\n    const prevLexicalNode = this.getPrevNode(prevNodeMap);\n    const nextText = nextLexicalNode.__text;\n    syncPropertiesFromLexical(binding, this._map, prevLexicalNode, nextLexicalNode);\n\n    if (prevLexicalNode !== null) {\n      const prevText = prevLexicalNode.__text;\n\n      if (prevText !== nextText) {\n        const key = nextLexicalNode.__key;\n        diffTextContentAndApplyDelta(this, key, prevText, nextText);\n        this._text = nextText;\n      }\n    }\n  }\n\n  syncPropertiesAndTextFromYjs(binding, keysChanged) {\n    const lexicalNode = this.getNode();\n\n    if (!(lexicalNode !== null)) {\n      throw Error(`syncPropertiesAndTextFromYjs: cound not find decorator node`);\n    }\n\n    syncPropertiesFromYjs(binding, this._map, lexicalNode, keysChanged);\n    const collabText = this._text;\n\n    if (lexicalNode.__text !== collabText) {\n      const writable = lexicalNode.getWritable();\n      writable.__text = collabText;\n    }\n  }\n\n  destroy(binding) {\n    const collabNodeMap = binding.collabNodeMap;\n    collabNodeMap.delete(this._key);\n  }\n\n}\nfunction $createCollabTextNode(map, text, parent, type) {\n  const collabNode = new CollabTextNode(map, text, parent, type); // @ts-expect-error: internal field\n\n  map._collabNode = collabNode;\n  return collabNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst excludedProperties = new Set(['__key', '__parent', '__cachedText', '__text', '__size', '__next', '__prev', '__first', '__last']);\nfunction $getNodeByKeyOrThrow(key) {\n  const node = lexical.$getNodeByKey(key);\n\n  if (!(node !== null)) {\n    throw Error(`could not find node by key`);\n  }\n\n  return node;\n}\nfunction $createCollabNodeFromLexicalNode(binding, lexicalNode, parent) {\n  const nodeType = lexicalNode.__type;\n  let collabNode;\n\n  if (lexical.$isElementNode(lexicalNode)) {\n    const xmlText = new yjs.XmlText();\n    collabNode = $createCollabElementNode(xmlText, parent, nodeType);\n    collabNode.syncPropertiesFromLexical(binding, lexicalNode, null);\n    collabNode.syncChildrenFromLexical(binding, lexicalNode, null, null, null);\n  } else if (lexical.$isTextNode(lexicalNode)) {\n    // TODO create a token text node for token, segmented nodes.\n    const map = new yjs.Map();\n    collabNode = $createCollabTextNode(map, lexicalNode.__text, parent, nodeType);\n    collabNode.syncPropertiesAndTextFromLexical(binding, lexicalNode, null);\n  } else if (lexical.$isLineBreakNode(lexicalNode)) {\n    const map = new yjs.Map();\n    map.set('__type', 'linebreak');\n    collabNode = $createCollabLineBreakNode(map, parent);\n  } else if (lexical.$isDecoratorNode(lexicalNode)) {\n    const xmlElem = new yjs.XmlElement();\n    collabNode = $createCollabDecoratorNode(xmlElem, parent, nodeType);\n    collabNode.syncPropertiesFromLexical(binding, lexicalNode, null);\n  } else {\n    {\n      throw Error(`Expected text, element, decorator, or linebreak node`);\n    }\n  }\n\n  collabNode._key = lexicalNode.__key;\n  return collabNode;\n}\n\nfunction getNodeTypeFromSharedType(sharedType) {\n  const type = sharedType instanceof yjs.Map ? sharedType.get('__type') : sharedType.getAttribute('__type');\n\n  if (!(type != null)) {\n    throw Error(`Expected shared type to include type attribute`);\n  }\n\n  return type;\n}\n\nfunction getOrInitCollabNodeFromSharedType(binding, sharedType, parent) {\n  // @ts-expect-error: internal field\n  const collabNode = sharedType._collabNode;\n\n  if (collabNode === undefined) {\n    const registeredNodes = binding.editor._nodes;\n    const type = getNodeTypeFromSharedType(sharedType);\n    const nodeInfo = registeredNodes.get(type);\n\n    if (!(nodeInfo !== undefined)) {\n      throw Error(`Node ${type} is not registered`);\n    }\n\n    const sharedParent = sharedType.parent;\n    const targetParent = parent === undefined && sharedParent !== null ? getOrInitCollabNodeFromSharedType(binding, sharedParent) : parent || null;\n\n    if (!(targetParent instanceof CollabElementNode)) {\n      throw Error(`Expected parent to be a collab element node`);\n    }\n\n    if (sharedType instanceof yjs.XmlText) {\n      return $createCollabElementNode(sharedType, targetParent, type);\n    } else if (sharedType instanceof yjs.Map) {\n      if (type === 'linebreak') {\n        return $createCollabLineBreakNode(sharedType, targetParent);\n      }\n\n      return $createCollabTextNode(sharedType, '', targetParent, type);\n    } else if (sharedType instanceof yjs.XmlElement) {\n      return $createCollabDecoratorNode(sharedType, targetParent, type);\n    }\n  }\n\n  return collabNode;\n}\nfunction createLexicalNodeFromCollabNode(binding, collabNode, parentKey) {\n  const type = collabNode.getType();\n  const registeredNodes = binding.editor._nodes;\n  const nodeInfo = registeredNodes.get(type);\n\n  if (!(nodeInfo !== undefined)) {\n    throw Error(`Node ${type} is not registered`);\n  }\n\n  const lexicalNode = new nodeInfo.klass();\n  lexicalNode.__parent = parentKey;\n  collabNode._key = lexicalNode.__key;\n\n  if (collabNode instanceof CollabElementNode) {\n    const xmlText = collabNode._xmlText;\n    collabNode.syncPropertiesFromYjs(binding, null);\n    collabNode.applyChildrenYjsDelta(binding, xmlText.toDelta());\n    collabNode.syncChildrenFromYjs(binding);\n  } else if (collabNode instanceof CollabTextNode) {\n    collabNode.syncPropertiesAndTextFromYjs(binding, null);\n  } else if (collabNode instanceof CollabDecoratorNode) {\n    collabNode.syncPropertiesFromYjs(binding, null);\n  }\n\n  binding.collabNodeMap.set(lexicalNode.__key, collabNode);\n  return lexicalNode;\n}\nfunction syncPropertiesFromYjs(binding, sharedType, lexicalNode, keysChanged) {\n  const properties = keysChanged === null ? sharedType instanceof yjs.Map ? Array.from(sharedType.keys()) : Object.keys(sharedType.getAttributes()) : Array.from(keysChanged);\n  let writableNode;\n\n  for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n\n    if (excludedProperties.has(property)) {\n      continue;\n    }\n\n    const prevValue = lexicalNode[property];\n    let nextValue = sharedType instanceof yjs.Map ? sharedType.get(property) : sharedType.getAttribute(property);\n\n    if (prevValue !== nextValue) {\n      if (nextValue instanceof yjs.Doc) {\n        const yjsDocMap = binding.docMap;\n\n        if (prevValue instanceof yjs.Doc) {\n          yjsDocMap.delete(prevValue.guid);\n        }\n\n        const nestedEditor = lexical.createEditor();\n        const key = nextValue.guid;\n        nestedEditor._key = key;\n        yjsDocMap.set(key, nextValue);\n        nextValue = nestedEditor;\n      }\n\n      if (writableNode === undefined) {\n        writableNode = lexicalNode.getWritable();\n      }\n\n      writableNode[property] = nextValue;\n    }\n  }\n}\nfunction syncPropertiesFromLexical(binding, sharedType, prevLexicalNode, nextLexicalNode) {\n  const type = nextLexicalNode.__type;\n  const nodeProperties = binding.nodeProperties;\n  let properties = nodeProperties.get(type);\n\n  if (properties === undefined) {\n    properties = Object.keys(nextLexicalNode).filter(property => {\n      return !excludedProperties.has(property);\n    });\n    nodeProperties.set(type, properties);\n  }\n\n  const EditorClass = binding.editor.constructor;\n\n  for (let i = 0; i < properties.length; i++) {\n    const property = properties[i];\n    const prevValue = prevLexicalNode === null ? undefined : prevLexicalNode[property];\n    let nextValue = nextLexicalNode[property];\n\n    if (prevValue !== nextValue) {\n      if (nextValue instanceof EditorClass) {\n        const yjsDocMap = binding.docMap;\n        let prevDoc;\n\n        if (prevValue instanceof EditorClass) {\n          // @ts-expect-error Lexical node\n          const prevKey = prevValue._key;\n          prevDoc = yjsDocMap.get(prevKey);\n          yjsDocMap.delete(prevKey);\n        } // If we already have a document, use it.\n\n\n        const doc = prevDoc || new yjs.Doc();\n        const key = doc.guid; // @ts-expect-error Lexical node\n\n        nextValue._key = key;\n        yjsDocMap.set(key, doc);\n        nextValue = doc; // Mark the node dirty as we've assigned a new key to it\n\n        binding.editor.update(() => {\n          nextLexicalNode.markDirty();\n        });\n      }\n\n      if (sharedType instanceof yjs.Map) {\n        sharedType.set(property, nextValue);\n      } else {\n        sharedType.setAttribute(property, nextValue);\n      }\n    }\n  }\n}\nfunction spliceString(str, index, delCount, newText) {\n  return str.slice(0, index) + newText + str.slice(index + delCount);\n}\nfunction getPositionFromElementAndOffset(node, offset, boundaryIsEdge) {\n  let index = 0;\n  let i = 0;\n  const children = node._children;\n  const childrenLength = children.length;\n\n  for (; i < childrenLength; i++) {\n    const child = children[i];\n    const childOffset = index;\n    const size = child.getSize();\n    index += size;\n    const exceedsBoundary = boundaryIsEdge ? index >= offset : index > offset;\n\n    if (exceedsBoundary && child instanceof CollabTextNode) {\n      let textOffset = offset - childOffset - 1;\n\n      if (textOffset < 0) {\n        textOffset = 0;\n      }\n\n      const diffLength = index - offset;\n      return {\n        length: diffLength,\n        node: child,\n        nodeIndex: i,\n        offset: textOffset\n      };\n    }\n\n    if (index > offset) {\n      return {\n        length: 0,\n        node: child,\n        nodeIndex: i,\n        offset: childOffset\n      };\n    } else if (i === childrenLength - 1) {\n      return {\n        length: 0,\n        node: null,\n        nodeIndex: i + 1,\n        offset: childOffset + 1\n      };\n    }\n  }\n\n  return {\n    length: 0,\n    node: null,\n    nodeIndex: 0,\n    offset: 0\n  };\n}\nfunction doesSelectionNeedRecovering(selection) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  let recoveryNeeded = false;\n\n  try {\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n\n    if ( // We might have removed a node that no longer exists\n    !anchorNode.isAttached() || !focusNode.isAttached() || // If we've split a node, then the offset might not be right\n    lexical.$isTextNode(anchorNode) && anchor.offset > anchorNode.getTextContentSize() || lexical.$isTextNode(focusNode) && focus.offset > focusNode.getTextContentSize()) {\n      recoveryNeeded = true;\n    }\n  } catch (e) {\n    // Sometimes checking nor a node via getNode might trigger\n    // an error, so we need recovery then too.\n    recoveryNeeded = true;\n  }\n\n  return recoveryNeeded;\n}\nfunction syncWithTransaction(binding, fn) {\n  binding.doc.transact(fn, binding);\n}\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n\n  while (nodeKey !== null) {\n    const node = nodeMap === null ? lexical.$getNodeByKey(nodeKey) : nodeMap.get(nodeKey);\n\n    if (node === null || node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n\n  return children;\n}\nfunction removeFromParent(node) {\n  const oldParent = node.getParent();\n\n  if (oldParent !== null) {\n    const writableNode = node.getWritable();\n    const writableParent = oldParent.getWritable();\n    const prevSibling = node.getPreviousSibling();\n    const nextSibling = node.getNextSibling(); // TODO: this function duplicates a bunch of operations, can be simplified.\n\n    if (prevSibling === null) {\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableParent.__first = nextSibling.__key;\n        writableNextSibling.__prev = null;\n      } else {\n        writableParent.__first = null;\n      }\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableNextSibling.__prev = writablePrevSibling.__key;\n        writablePrevSibling.__next = writableNextSibling.__key;\n      } else {\n        writablePrevSibling.__next = null;\n      }\n\n      writableNode.__prev = null;\n    }\n\n    if (nextSibling === null) {\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writableParent.__last = prevSibling.__key;\n        writablePrevSibling.__next = null;\n      } else {\n        writableParent.__last = null;\n      }\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writablePrevSibling.__next = writableNextSibling.__key;\n        writableNextSibling.__prev = writablePrevSibling.__key;\n      } else {\n        writableNextSibling.__prev = null;\n      }\n\n      writableNode.__next = null;\n    }\n\n    writableParent.__size--;\n    writableNode.__parent = null;\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass CollabDecoratorNode {\n  constructor(xmlElem, parent, type) {\n    this._key = '';\n    this._xmlElem = xmlElem;\n    this._parent = parent;\n    this._type = type;\n    this._unobservers = new Set();\n  }\n\n  getPrevNode(nodeMap) {\n    if (nodeMap === null) {\n      return null;\n    }\n\n    const node = nodeMap.get(this._key);\n    return lexical.$isDecoratorNode(node) ? node : null;\n  }\n\n  getNode() {\n    const node = lexical.$getNodeByKey(this._key);\n    return lexical.$isDecoratorNode(node) ? node : null;\n  }\n\n  getSharedType() {\n    return this._xmlElem;\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  getKey() {\n    return this._key;\n  }\n\n  getSize() {\n    return 1;\n  }\n\n  getOffset() {\n    const collabElementNode = this._parent;\n    return collabElementNode.getChildOffset(this);\n  }\n\n  syncPropertiesFromLexical(binding, nextLexicalNode, prevNodeMap) {\n    const prevLexicalNode = this.getPrevNode(prevNodeMap);\n    const xmlElem = this._xmlElem;\n    syncPropertiesFromLexical(binding, xmlElem, prevLexicalNode, nextLexicalNode);\n  }\n\n  syncPropertiesFromYjs(binding, keysChanged) {\n    const lexicalNode = this.getNode();\n\n    if (!(lexicalNode !== null)) {\n      throw Error(`syncPropertiesFromYjs: cound not find decorator node`);\n    }\n\n    const xmlElem = this._xmlElem;\n    syncPropertiesFromYjs(binding, xmlElem, lexicalNode, keysChanged);\n  }\n\n  destroy(binding) {\n    const collabNodeMap = binding.collabNodeMap;\n    collabNodeMap.delete(this._key);\n\n    this._unobservers.forEach(unobserver => unobserver());\n\n    this._unobservers.clear();\n  }\n\n}\nfunction $createCollabDecoratorNode(xmlElem, parent, type) {\n  const collabNode = new CollabDecoratorNode(xmlElem, parent, type); // @ts-expect-error: internal field\n\n  xmlElem._collabNode = collabNode;\n  return collabNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass CollabElementNode {\n  constructor(xmlText, parent, type) {\n    this._key = '';\n    this._children = [];\n    this._xmlText = xmlText;\n    this._type = type;\n    this._parent = parent;\n  }\n\n  getPrevNode(nodeMap) {\n    if (nodeMap === null) {\n      return null;\n    }\n\n    const node = nodeMap.get(this._key);\n    return lexical.$isElementNode(node) ? node : null;\n  }\n\n  getNode() {\n    const node = lexical.$getNodeByKey(this._key);\n    return lexical.$isElementNode(node) ? node : null;\n  }\n\n  getSharedType() {\n    return this._xmlText;\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  getKey() {\n    return this._key;\n  }\n\n  isEmpty() {\n    return this._children.length === 0;\n  }\n\n  getSize() {\n    return 1;\n  }\n\n  getOffset() {\n    const collabElementNode = this._parent;\n\n    if (!(collabElementNode !== null)) {\n      throw Error(`getOffset: cound not find collab element node`);\n    }\n\n    return collabElementNode.getChildOffset(this);\n  }\n\n  syncPropertiesFromYjs(binding, keysChanged) {\n    const lexicalNode = this.getNode();\n\n    if (!(lexicalNode !== null)) {\n      throw Error(`syncPropertiesFromYjs: cound not find element node`);\n    }\n\n    syncPropertiesFromYjs(binding, this._xmlText, lexicalNode, keysChanged);\n  }\n\n  applyChildrenYjsDelta(binding, deltas) {\n    const children = this._children;\n    let currIndex = 0;\n\n    for (let i = 0; i < deltas.length; i++) {\n      const delta = deltas[i];\n      const insertDelta = delta.insert;\n      const deleteDelta = delta.delete;\n\n      if (delta.retain != null) {\n        currIndex += delta.retain;\n      } else if (typeof deleteDelta === 'number') {\n        let deletionSize = deleteDelta;\n\n        while (deletionSize > 0) {\n          const {\n            node,\n            nodeIndex,\n            offset,\n            length\n          } = getPositionFromElementAndOffset(this, currIndex, false);\n\n          if (node instanceof CollabElementNode || node instanceof CollabLineBreakNode || node instanceof CollabDecoratorNode) {\n            children.splice(nodeIndex, 1);\n            deletionSize -= 1;\n          } else if (node instanceof CollabTextNode) {\n            const delCount = Math.min(deletionSize, length);\n            const prevCollabNode = nodeIndex !== 0 ? children[nodeIndex - 1] : null;\n            const nodeSize = node.getSize();\n\n            if (offset === 0 && delCount === 1 && nodeIndex > 0 && prevCollabNode instanceof CollabTextNode && length === nodeSize && // If the node has no keys, it's been deleted\n            Array.from(node._map.keys()).length === 0) {\n              // Merge the text node with previous.\n              prevCollabNode._text += node._text;\n              children.splice(nodeIndex, 1);\n            } else if (offset === 0 && delCount === nodeSize) {\n              // The entire thing needs removing\n              children.splice(nodeIndex, 1);\n            } else {\n              node._text = spliceString(node._text, offset, delCount, '');\n            }\n\n            deletionSize -= delCount;\n          } else {\n            // Can occur due to the deletion from the dangling text heuristic below.\n            break;\n          }\n        }\n      } else if (insertDelta != null) {\n        if (typeof insertDelta === 'string') {\n          const {\n            node,\n            offset\n          } = getPositionFromElementAndOffset(this, currIndex, true);\n\n          if (node instanceof CollabTextNode) {\n            node._text = spliceString(node._text, offset, 0, insertDelta);\n          } else {\n            // TODO: maybe we can improve this by keeping around a redundant\n            // text node map, rather than removing all the text nodes, so there\n            // never can be dangling text.\n            // We have a conflict where there was likely a CollabTextNode and\n            // an Lexical TextNode too, but they were removed in a merge. So\n            // let's just ignore the text and trigger a removal for it from our\n            // shared type.\n            this._xmlText.delete(offset, insertDelta.length);\n          }\n\n          currIndex += insertDelta.length;\n        } else {\n          const sharedType = insertDelta;\n          const {\n            nodeIndex\n          } = getPositionFromElementAndOffset(this, currIndex, false);\n          const collabNode = getOrInitCollabNodeFromSharedType(binding, sharedType, this);\n          children.splice(nodeIndex, 0, collabNode);\n          currIndex += 1;\n        }\n      } else {\n        throw new Error('Unexpected delta format');\n      }\n    }\n  }\n\n  syncChildrenFromYjs(binding) {\n    // Now diff the children of the collab node with that of our existing Lexical node.\n    const lexicalNode = this.getNode();\n\n    if (!(lexicalNode !== null)) {\n      throw Error(`syncChildrenFromYjs: cound not find element node`);\n    }\n\n    const key = lexicalNode.__key;\n    const prevLexicalChildrenKeys = createChildrenArray(lexicalNode, null);\n    const lexicalChildrenKeysLength = prevLexicalChildrenKeys.length;\n    const collabChildren = this._children;\n    const collabChildrenLength = collabChildren.length;\n    const collabNodeMap = binding.collabNodeMap;\n    const visitedKeys = new Set();\n    let collabKeys;\n    let writableLexicalNode;\n    let prevIndex = 0;\n    let prevChildNode = null;\n\n    if (collabChildrenLength !== lexicalChildrenKeysLength) {\n      writableLexicalNode = lexicalNode.getWritable();\n    }\n\n    for (let i = 0; i < collabChildrenLength; i++) {\n      const lexicalChildKey = prevLexicalChildrenKeys[prevIndex];\n      const childCollabNode = collabChildren[i];\n      const collabLexicalChildNode = childCollabNode.getNode();\n      const collabKey = childCollabNode._key;\n\n      if (collabLexicalChildNode !== null && lexicalChildKey === collabKey) {\n        const childNeedsUpdating = lexical.$isTextNode(collabLexicalChildNode); // Update\n\n        visitedKeys.add(lexicalChildKey);\n\n        if (childNeedsUpdating) {\n          childCollabNode._key = lexicalChildKey;\n\n          if (childCollabNode instanceof CollabElementNode) {\n            const xmlText = childCollabNode._xmlText;\n            childCollabNode.syncPropertiesFromYjs(binding, null);\n            childCollabNode.applyChildrenYjsDelta(binding, xmlText.toDelta());\n            childCollabNode.syncChildrenFromYjs(binding);\n          } else if (childCollabNode instanceof CollabTextNode) {\n            childCollabNode.syncPropertiesAndTextFromYjs(binding, null);\n          } else if (childCollabNode instanceof CollabDecoratorNode) {\n            childCollabNode.syncPropertiesFromYjs(binding, null);\n          } else if (!(childCollabNode instanceof CollabLineBreakNode)) {\n            {\n              throw Error(`syncChildrenFromYjs: expected text, element, decorator, or linebreak collab node`);\n            }\n          }\n        }\n        prevChildNode = collabLexicalChildNode;\n        prevIndex++;\n      } else {\n        if (collabKeys === undefined) {\n          collabKeys = new Set();\n\n          for (let s = 0; s < collabChildrenLength; s++) {\n            const child = collabChildren[s];\n            const childKey = child._key;\n\n            if (childKey !== '') {\n              collabKeys.add(childKey);\n            }\n          }\n        }\n\n        if (collabLexicalChildNode !== null && lexicalChildKey !== undefined && !collabKeys.has(lexicalChildKey)) {\n          const nodeToRemove = $getNodeByKeyOrThrow(lexicalChildKey);\n          removeFromParent(nodeToRemove);\n          i--;\n          prevIndex++;\n          continue;\n        }\n\n        writableLexicalNode = lexicalNode.getWritable(); // Create/Replace\n\n        const lexicalChildNode = createLexicalNodeFromCollabNode(binding, childCollabNode, key);\n        const childKey = lexicalChildNode.__key;\n        collabNodeMap.set(childKey, childCollabNode);\n\n        if (prevChildNode === null) {\n          const nextSibling = writableLexicalNode.getFirstChild();\n          writableLexicalNode.__first = childKey;\n\n          if (nextSibling !== null) {\n            const writableNextSibling = nextSibling.getWritable();\n            writableNextSibling.__prev = childKey;\n            lexicalChildNode.__next = writableNextSibling.__key;\n          }\n        } else {\n          const writablePrevChildNode = prevChildNode.getWritable();\n          const nextSibling = prevChildNode.getNextSibling();\n          writablePrevChildNode.__next = childKey;\n          lexicalChildNode.__prev = prevChildNode.__key;\n\n          if (nextSibling !== null) {\n            const writableNextSibling = nextSibling.getWritable();\n            writableNextSibling.__prev = childKey;\n            lexicalChildNode.__next = writableNextSibling.__key;\n          }\n        }\n\n        if (i === collabChildrenLength - 1) {\n          writableLexicalNode.__last = childKey;\n        }\n\n        writableLexicalNode.__size++;\n        prevChildNode = lexicalChildNode;\n      }\n    }\n\n    for (let i = 0; i < lexicalChildrenKeysLength; i++) {\n      const lexicalChildKey = prevLexicalChildrenKeys[i];\n\n      if (!visitedKeys.has(lexicalChildKey)) {\n        // Remove\n        const lexicalChildNode = $getNodeByKeyOrThrow(lexicalChildKey);\n        const collabNode = binding.collabNodeMap.get(lexicalChildKey);\n\n        if (collabNode !== undefined) {\n          collabNode.destroy(binding);\n        }\n\n        removeFromParent(lexicalChildNode);\n      }\n    }\n  }\n\n  syncPropertiesFromLexical(binding, nextLexicalNode, prevNodeMap) {\n    syncPropertiesFromLexical(binding, this._xmlText, this.getPrevNode(prevNodeMap), nextLexicalNode);\n  }\n\n  _syncChildFromLexical(binding, index, key, prevNodeMap, dirtyElements, dirtyLeaves) {\n    const childCollabNode = this._children[index]; // Update\n\n    const nextChildNode = $getNodeByKeyOrThrow(key);\n\n    if (childCollabNode instanceof CollabElementNode && lexical.$isElementNode(nextChildNode)) {\n      childCollabNode.syncPropertiesFromLexical(binding, nextChildNode, prevNodeMap);\n      childCollabNode.syncChildrenFromLexical(binding, nextChildNode, prevNodeMap, dirtyElements, dirtyLeaves);\n    } else if (childCollabNode instanceof CollabTextNode && lexical.$isTextNode(nextChildNode)) {\n      childCollabNode.syncPropertiesAndTextFromLexical(binding, nextChildNode, prevNodeMap);\n    } else if (childCollabNode instanceof CollabDecoratorNode && lexical.$isDecoratorNode(nextChildNode)) {\n      childCollabNode.syncPropertiesFromLexical(binding, nextChildNode, prevNodeMap);\n    }\n  }\n\n  syncChildrenFromLexical(binding, nextLexicalNode, prevNodeMap, dirtyElements, dirtyLeaves) {\n    const prevLexicalNode = this.getPrevNode(prevNodeMap);\n    const prevChildren = prevLexicalNode === null ? [] : createChildrenArray(prevLexicalNode, prevNodeMap);\n    const nextChildren = createChildrenArray(nextLexicalNode, null);\n    const prevEndIndex = prevChildren.length - 1;\n    const nextEndIndex = nextChildren.length - 1;\n    const collabNodeMap = binding.collabNodeMap;\n    let prevChildrenSet;\n    let nextChildrenSet;\n    let prevIndex = 0;\n    let nextIndex = 0;\n\n    while (prevIndex <= prevEndIndex && nextIndex <= nextEndIndex) {\n      const prevKey = prevChildren[prevIndex];\n      const nextKey = nextChildren[nextIndex];\n\n      if (prevKey === nextKey) {\n        // Nove move, create or remove\n        this._syncChildFromLexical(binding, nextIndex, nextKey, prevNodeMap, dirtyElements, dirtyLeaves);\n\n        prevIndex++;\n        nextIndex++;\n      } else {\n        if (prevChildrenSet === undefined) {\n          prevChildrenSet = new Set(prevChildren);\n        }\n\n        if (nextChildrenSet === undefined) {\n          nextChildrenSet = new Set(nextChildren);\n        }\n\n        const nextHasPrevKey = nextChildrenSet.has(prevKey);\n        const prevHasNextKey = prevChildrenSet.has(nextKey);\n\n        if (!nextHasPrevKey) {\n          // Remove\n          this.splice(binding, nextIndex, 1);\n          prevIndex++;\n        } else {\n          // Create or replace\n          const nextChildNode = $getNodeByKeyOrThrow(nextKey);\n          const collabNode = $createCollabNodeFromLexicalNode(binding, nextChildNode, this);\n          collabNodeMap.set(nextKey, collabNode);\n\n          if (prevHasNextKey) {\n            this.splice(binding, nextIndex, 1, collabNode);\n            prevIndex++;\n            nextIndex++;\n          } else {\n            this.splice(binding, nextIndex, 0, collabNode);\n            nextIndex++;\n          }\n        }\n      }\n    }\n\n    const appendNewChildren = prevIndex > prevEndIndex;\n    const removeOldChildren = nextIndex > nextEndIndex;\n\n    if (appendNewChildren && !removeOldChildren) {\n      for (; nextIndex <= nextEndIndex; ++nextIndex) {\n        const key = nextChildren[nextIndex];\n        const nextChildNode = $getNodeByKeyOrThrow(key);\n        const collabNode = $createCollabNodeFromLexicalNode(binding, nextChildNode, this);\n        this.append(collabNode);\n        collabNodeMap.set(key, collabNode);\n      }\n    } else if (removeOldChildren && !appendNewChildren) {\n      for (let i = this._children.length - 1; i >= nextIndex; i--) {\n        this.splice(binding, i, 1);\n      }\n    }\n  }\n\n  append(collabNode) {\n    const xmlText = this._xmlText;\n    const children = this._children;\n    const lastChild = children[children.length - 1];\n    const offset = lastChild !== undefined ? lastChild.getOffset() + lastChild.getSize() : 0;\n\n    if (collabNode instanceof CollabElementNode) {\n      xmlText.insertEmbed(offset, collabNode._xmlText);\n    } else if (collabNode instanceof CollabTextNode) {\n      const map = collabNode._map;\n\n      if (map.parent === null) {\n        xmlText.insertEmbed(offset, map);\n      }\n\n      xmlText.insert(offset + 1, collabNode._text);\n    } else if (collabNode instanceof CollabLineBreakNode) {\n      xmlText.insertEmbed(offset, collabNode._map);\n    } else if (collabNode instanceof CollabDecoratorNode) {\n      xmlText.insertEmbed(offset, collabNode._xmlElem);\n    }\n\n    this._children.push(collabNode);\n  }\n\n  splice(binding, index, delCount, collabNode) {\n    const children = this._children;\n    const child = children[index];\n\n    if (child === undefined) {\n      if (!(collabNode !== undefined)) {\n        throw Error(`splice: could not find collab element node`);\n      }\n\n      this.append(collabNode);\n      return;\n    }\n\n    const offset = child.getOffset();\n\n    if (!(offset !== -1)) {\n      throw Error(`splice: expected offset to be greater than zero`);\n    }\n\n    const xmlText = this._xmlText;\n\n    if (delCount !== 0) {\n      // What if we delete many nodes, don't we need to get all their\n      // sizes?\n      xmlText.delete(offset, child.getSize());\n    }\n\n    if (collabNode instanceof CollabElementNode) {\n      xmlText.insertEmbed(offset, collabNode._xmlText);\n    } else if (collabNode instanceof CollabTextNode) {\n      const map = collabNode._map;\n\n      if (map.parent === null) {\n        xmlText.insertEmbed(offset, map);\n      }\n\n      xmlText.insert(offset + 1, collabNode._text);\n    } else if (collabNode instanceof CollabLineBreakNode) {\n      xmlText.insertEmbed(offset, collabNode._map);\n    } else if (collabNode instanceof CollabDecoratorNode) {\n      xmlText.insertEmbed(offset, collabNode._xmlElem);\n    }\n\n    if (delCount !== 0) {\n      const childrenToDelete = children.slice(index, index + delCount);\n\n      for (let i = 0; i < childrenToDelete.length; i++) {\n        childrenToDelete[i].destroy(binding);\n      }\n    }\n\n    if (collabNode !== undefined) {\n      children.splice(index, delCount, collabNode);\n    } else {\n      children.splice(index, delCount);\n    }\n  }\n\n  getChildOffset(collabNode) {\n    let offset = 0;\n    const children = this._children;\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n\n      if (child === collabNode) {\n        return offset;\n      }\n\n      offset += child.getSize();\n    }\n\n    return -1;\n  }\n\n  destroy(binding) {\n    const collabNodeMap = binding.collabNodeMap;\n    const children = this._children;\n\n    for (let i = 0; i < children.length; i++) {\n      children[i].destroy(binding);\n    }\n\n    collabNodeMap.delete(this._key);\n  }\n\n}\nfunction $createCollabElementNode(xmlText, parent, type) {\n  const collabNode = new CollabElementNode(xmlText, parent, type); // @ts-expect-error: internal field\n\n  xmlText._collabNode = collabNode;\n  return collabNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction createBinding(editor, provider, id, doc, docMap) {\n  if (!(doc !== undefined && doc !== null)) {\n    throw Error(`createBinding: doc is null or undefined`);\n  }\n\n  const rootXmlText = doc.get('root', yjs.XmlText);\n  const root = $createCollabElementNode(rootXmlText, null, 'root');\n  root._key = 'root';\n  return {\n    clientID: doc.clientID,\n    collabNodeMap: new Map(),\n    cursors: new Map(),\n    cursorsContainer: null,\n    doc,\n    docMap,\n    editor,\n    id,\n    nodeProperties: new Map(),\n    root\n  };\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction createRelativePosition(point, binding) {\n  const collabNodeMap = binding.collabNodeMap;\n  const collabNode = collabNodeMap.get(point.key);\n\n  if (collabNode === undefined) {\n    return null;\n  }\n\n  let offset = point.offset;\n  let sharedType = collabNode.getSharedType();\n\n  if (collabNode instanceof CollabTextNode) {\n    sharedType = collabNode._parent._xmlText;\n    const currentOffset = collabNode.getOffset();\n\n    if (currentOffset === -1) {\n      return null;\n    }\n\n    offset = currentOffset + 1 + offset;\n  } else if (collabNode instanceof CollabElementNode && point.type === 'element') {\n    const parent = point.getNode();\n    let accumulatedOffset = 0;\n    let i = 0;\n    let node = parent.getFirstChild();\n\n    while (node !== null && i++ < offset) {\n      if (lexical.$isTextNode(node)) {\n        accumulatedOffset += node.getTextContentSize() + 1;\n      } else {\n        accumulatedOffset++;\n      }\n\n      node = node.getNextSibling();\n    }\n\n    offset = accumulatedOffset;\n  }\n\n  return yjs.createRelativePositionFromTypeIndex(sharedType, offset);\n}\n\nfunction createAbsolutePosition(relativePosition, binding) {\n  return yjs.createAbsolutePositionFromRelativePosition(relativePosition, binding.doc);\n}\n\nfunction shouldUpdatePosition(currentPos, pos) {\n  if (currentPos == null) {\n    if (pos != null) {\n      return true;\n    }\n  } else if (pos == null || !yjs.compareRelativePositions(currentPos, pos)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction createCursor(name, color) {\n  return {\n    color: color,\n    name: name,\n    selection: null\n  };\n}\n\nfunction destroySelection(binding, selection) {\n  const cursorsContainer = binding.cursorsContainer;\n\n  if (cursorsContainer !== null) {\n    const selections = selection.selections;\n    const selectionsLength = selections.length;\n\n    for (let i = 0; i < selectionsLength; i++) {\n      cursorsContainer.removeChild(selections[i]);\n    }\n  }\n}\n\nfunction destroyCursor(binding, cursor) {\n  const selection = cursor.selection;\n\n  if (selection !== null) {\n    destroySelection(binding, selection);\n  }\n}\n\nfunction createCursorSelection(cursor, anchorKey, anchorOffset, focusKey, focusOffset) {\n  const color = cursor.color;\n  const caret = document.createElement('span');\n  caret.style.cssText = `position:absolute;top:0;bottom:0;right:-1px;width:1px;background-color:${color};z-index:10;`;\n  const name = document.createElement('span');\n  name.textContent = cursor.name;\n  name.style.cssText = `position:absolute;left:-2px;top:-16px;background-color:${color};color:#fff;line-height:12px;font-size:12px;padding:2px;font-family:Arial;font-weight:bold;white-space:nowrap;`;\n  caret.appendChild(name);\n  return {\n    anchor: {\n      key: anchorKey,\n      offset: anchorOffset\n    },\n    caret,\n    color,\n    focus: {\n      key: focusKey,\n      offset: focusOffset\n    },\n    name,\n    selections: []\n  };\n}\n\nfunction updateCursor(binding, cursor, nextSelection, nodeMap) {\n  const editor = binding.editor;\n  const rootElement = editor.getRootElement();\n  const cursorsContainer = binding.cursorsContainer;\n\n  if (cursorsContainer === null || rootElement === null) {\n    return;\n  }\n\n  const cursorsContainerOffsetParent = cursorsContainer.offsetParent;\n\n  if (cursorsContainerOffsetParent === null) {\n    return;\n  }\n\n  const containerRect = cursorsContainerOffsetParent.getBoundingClientRect();\n  const prevSelection = cursor.selection;\n\n  if (nextSelection === null) {\n    if (prevSelection === null) {\n      return;\n    } else {\n      cursor.selection = null;\n      destroySelection(binding, prevSelection);\n      return;\n    }\n  } else {\n    cursor.selection = nextSelection;\n  }\n\n  const caret = nextSelection.caret;\n  const color = nextSelection.color;\n  const selections = nextSelection.selections;\n  const anchor = nextSelection.anchor;\n  const focus = nextSelection.focus;\n  const anchorKey = anchor.key;\n  const focusKey = focus.key;\n  const anchorNode = nodeMap.get(anchorKey);\n  const focusNode = nodeMap.get(focusKey);\n\n  if (anchorNode == null || focusNode == null) {\n    return;\n  }\n\n  let selectionRects; // In the case of a collapsed selection on a linebreak, we need\n  // to improvise as the browser will return nothing here as <br>\n  // apparantly take up no visual space :/\n  // This won't work in all cases, but it's better than just showing\n  // nothing all the time.\n\n  if (anchorNode === focusNode && lexical.$isLineBreakNode(anchorNode)) {\n    const brRect = editor.getElementByKey(anchorKey).getBoundingClientRect();\n    selectionRects = [brRect];\n  } else {\n    const range = selection.createDOMRange(editor, anchorNode, anchor.offset, focusNode, focus.offset);\n\n    if (range === null) {\n      return;\n    }\n\n    selectionRects = selection.createRectsFromDOMRange(editor, range);\n  }\n\n  const selectionsLength = selections.length;\n  const selectionRectsLength = selectionRects.length;\n\n  for (let i = 0; i < selectionRectsLength; i++) {\n    const selectionRect = selectionRects[i];\n    let selection = selections[i];\n\n    if (selection === undefined) {\n      selection = document.createElement('span');\n      selections[i] = selection;\n      const selectionBg = document.createElement('span');\n      selection.appendChild(selectionBg);\n      cursorsContainer.appendChild(selection);\n    }\n\n    const top = selectionRect.top - containerRect.top;\n    const left = selectionRect.left - containerRect.left;\n    const style = `position:absolute;top:${top}px;left:${left}px;height:${selectionRect.height}px;width:${selectionRect.width}px;pointer-events:none;z-index:5;`;\n    selection.style.cssText = style;\n    selection.firstChild.style.cssText = `${style}left:0;top:0;background-color:${color};opacity:0.3;`;\n\n    if (i === selectionRectsLength - 1) {\n      if (caret.parentNode !== selection) {\n        selection.appendChild(caret);\n      }\n    }\n  }\n\n  for (let i = selectionsLength - 1; i >= selectionRectsLength; i--) {\n    const selection = selections[i];\n    cursorsContainer.removeChild(selection);\n    selections.pop();\n  }\n}\n\nfunction syncLocalCursorPosition(binding, provider) {\n  const awareness = provider.awareness;\n  const localState = awareness.getLocalState();\n\n  if (localState === null) {\n    return;\n  }\n\n  const anchorPos = localState.anchorPos;\n  const focusPos = localState.focusPos;\n\n  if (anchorPos !== null && focusPos !== null) {\n    const anchorAbsPos = createAbsolutePosition(anchorPos, binding);\n    const focusAbsPos = createAbsolutePosition(focusPos, binding);\n\n    if (anchorAbsPos !== null && focusAbsPos !== null) {\n      const [anchorCollabNode, anchorOffset] = getCollabNodeAndOffset(anchorAbsPos.type, anchorAbsPos.index);\n      const [focusCollabNode, focusOffset] = getCollabNodeAndOffset(focusAbsPos.type, focusAbsPos.index);\n\n      if (anchorCollabNode !== null && focusCollabNode !== null) {\n        const anchorKey = anchorCollabNode.getKey();\n        const focusKey = focusCollabNode.getKey();\n        const selection = lexical.$getSelection();\n\n        if (!lexical.$isRangeSelection(selection)) {\n          return;\n        }\n\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        setPoint(anchor, anchorKey, anchorOffset);\n        setPoint(focus, focusKey, focusOffset);\n      }\n    }\n  }\n}\n\nfunction setPoint(point, key, offset) {\n  if (point.key !== key || point.offset !== offset) {\n    let anchorNode = lexical.$getNodeByKey(key);\n\n    if (anchorNode !== null && !lexical.$isElementNode(anchorNode) && !lexical.$isTextNode(anchorNode)) {\n      const parent = anchorNode.getParentOrThrow();\n      key = parent.getKey();\n      offset = anchorNode.getIndexWithinParent();\n      anchorNode = parent;\n    }\n\n    point.set(key, offset, lexical.$isElementNode(anchorNode) ? 'element' : 'text');\n  }\n}\n\nfunction getCollabNodeAndOffset( // eslint-disable-next-line @typescript-eslint/no-explicit-any\nsharedType, offset) {\n  const collabNode = sharedType._collabNode;\n\n  if (collabNode === undefined) {\n    return [null, 0];\n  }\n\n  if (collabNode instanceof CollabElementNode) {\n    const {\n      node,\n      offset: collabNodeOffset\n    } = getPositionFromElementAndOffset(collabNode, offset, true);\n\n    if (node === null) {\n      return [collabNode, 0];\n    } else {\n      return [node, collabNodeOffset];\n    }\n  }\n\n  return [null, 0];\n}\n\nfunction syncCursorPositions(binding, provider) {\n  const awarenessStates = Array.from(provider.awareness.getStates());\n  const localClientID = binding.clientID;\n  const cursors = binding.cursors;\n  const editor = binding.editor;\n  const nodeMap = editor._editorState._nodeMap;\n  const visitedClientIDs = new Set();\n\n  for (let i = 0; i < awarenessStates.length; i++) {\n    const awarenessState = awarenessStates[i];\n    const [clientID, awareness] = awarenessState;\n\n    if (clientID !== localClientID) {\n      visitedClientIDs.add(clientID);\n      const {\n        anchorPos,\n        focusPos,\n        name,\n        color,\n        focusing\n      } = awareness;\n      let selection = null;\n      let cursor = cursors.get(clientID);\n\n      if (cursor === undefined) {\n        cursor = createCursor(name, color);\n        cursors.set(clientID, cursor);\n      }\n\n      if (anchorPos !== null && focusPos !== null && focusing) {\n        const anchorAbsPos = createAbsolutePosition(anchorPos, binding);\n        const focusAbsPos = createAbsolutePosition(focusPos, binding);\n\n        if (anchorAbsPos !== null && focusAbsPos !== null) {\n          const [anchorCollabNode, anchorOffset] = getCollabNodeAndOffset(anchorAbsPos.type, anchorAbsPos.index);\n          const [focusCollabNode, focusOffset] = getCollabNodeAndOffset(focusAbsPos.type, focusAbsPos.index);\n\n          if (anchorCollabNode !== null && focusCollabNode !== null) {\n            const anchorKey = anchorCollabNode.getKey();\n            const focusKey = focusCollabNode.getKey();\n            selection = cursor.selection;\n\n            if (selection === null) {\n              selection = createCursorSelection(cursor, anchorKey, anchorOffset, focusKey, focusOffset);\n            } else {\n              const anchor = selection.anchor;\n              const focus = selection.focus;\n              anchor.key = anchorKey;\n              anchor.offset = anchorOffset;\n              focus.key = focusKey;\n              focus.offset = focusOffset;\n            }\n          }\n        }\n      }\n\n      updateCursor(binding, cursor, selection, nodeMap);\n    }\n  }\n\n  const allClientIDs = Array.from(cursors.keys());\n\n  for (let i = 0; i < allClientIDs.length; i++) {\n    const clientID = allClientIDs[i];\n\n    if (!visitedClientIDs.has(clientID)) {\n      const cursor = cursors.get(clientID);\n\n      if (cursor !== undefined) {\n        destroyCursor(binding, cursor);\n        cursors.delete(clientID);\n      }\n    }\n  }\n}\nfunction syncLexicalSelectionToYjs(binding, provider, prevSelection, nextSelection) {\n  const awareness = provider.awareness;\n  const localState = awareness.getLocalState();\n\n  if (localState === null) {\n    return;\n  }\n\n  const {\n    anchorPos: currentAnchorPos,\n    focusPos: currentFocusPos,\n    name,\n    color,\n    focusing\n  } = localState;\n  let anchorPos = null;\n  let focusPos = null;\n\n  if (nextSelection === null || currentAnchorPos !== null && !nextSelection.is(prevSelection)) {\n    if (prevSelection === null) {\n      return;\n    }\n  }\n\n  if (lexical.$isRangeSelection(nextSelection)) {\n    anchorPos = createRelativePosition(nextSelection.anchor, binding);\n    focusPos = createRelativePosition(nextSelection.focus, binding);\n  }\n\n  if (shouldUpdatePosition(currentAnchorPos, anchorPos) || shouldUpdatePosition(currentFocusPos, focusPos)) {\n    awareness.setLocalState({\n      anchorPos,\n      color,\n      focusPos,\n      focusing,\n      name\n    });\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction syncEvent(binding, event) {\n  const {\n    target\n  } = event;\n  const collabNode = getOrInitCollabNodeFromSharedType(binding, target);\n\n  if (collabNode instanceof CollabElementNode && event instanceof yjs.YTextEvent) {\n    // @ts-expect-error We need to access the private property of the class\n    const {\n      keysChanged,\n      childListChanged,\n      delta\n    } = event; // Update\n\n    if (keysChanged.size > 0) {\n      collabNode.syncPropertiesFromYjs(binding, keysChanged);\n    }\n\n    if (childListChanged) {\n      collabNode.applyChildrenYjsDelta(binding, delta);\n      collabNode.syncChildrenFromYjs(binding);\n    }\n  } else if (collabNode instanceof CollabTextNode && event instanceof yjs.YMapEvent) {\n    const {\n      keysChanged\n    } = event; // Update\n\n    if (keysChanged.size > 0) {\n      collabNode.syncPropertiesAndTextFromYjs(binding, keysChanged);\n    }\n  } else if (collabNode instanceof CollabDecoratorNode && event instanceof yjs.YXmlEvent) {\n    const {\n      attributesChanged\n    } = event; // Update\n\n    if (attributesChanged.size > 0) {\n      collabNode.syncPropertiesFromYjs(binding, attributesChanged);\n    }\n  } else {\n    {\n      throw Error(`Expected text, element, or decorator event`);\n    }\n  }\n}\n\nfunction syncYjsChangesToLexical(binding, provider, events, isFromUndoManger) {\n  const editor = binding.editor;\n  const currentEditorState = editor._editorState;\n  editor.update(() => {\n    const pendingEditorState = editor._pendingEditorState;\n\n    for (let i = 0; i < events.length; i++) {\n      const event = events[i];\n      syncEvent(binding, event);\n    }\n\n    const selection = lexical.$getSelection();\n\n    if (lexical.$isRangeSelection(selection)) {\n      // We can't use Yjs's cursor position here, as it doesn't always\n      // handle selection recovery correctly – especially on elements that\n      // get moved around or split. So instead, we roll our own solution.\n      if (doesSelectionNeedRecovering(selection)) {\n        const prevSelection = currentEditorState._selection;\n\n        if (lexical.$isRangeSelection(prevSelection)) {\n          const prevOffsetView = offset.$createOffsetView(editor, 0, currentEditorState);\n          const nextOffsetView = offset.$createOffsetView(editor, 0, pendingEditorState);\n          const [start, end] = prevOffsetView.getOffsetsFromSelection(prevSelection);\n          const nextSelection = nextOffsetView.createSelectionFromOffsets(start, end, prevOffsetView);\n\n          if (nextSelection !== null) {\n            lexical.$setSelection(nextSelection);\n          } else {\n            // Fallback is to use the Yjs cursor position\n            syncLocalCursorPosition(binding, provider);\n\n            if (doesSelectionNeedRecovering(selection)) {\n              const root = lexical.$getRoot(); // If there was a collision on the top level paragraph\n              // we need to re-add a paragraph\n\n              if (root.getChildrenSize() === 0) {\n                root.append(lexical.$createParagraphNode());\n              } // Fallback\n\n\n              lexical.$getRoot().selectEnd();\n            }\n          }\n        }\n\n        syncLexicalSelectionToYjs(binding, provider, prevSelection, lexical.$getSelection());\n      } else {\n        syncLocalCursorPosition(binding, provider);\n      }\n    }\n  }, {\n    onUpdate: () => {\n      syncCursorPositions(binding, provider);\n    },\n    skipTransforms: true,\n    tag: isFromUndoManger ? 'historic' : 'collaboration'\n  });\n}\n\nfunction handleNormalizationMergeConflicts(binding, normalizedNodes) {\n  // We handle the merge operations here\n  const normalizedNodesKeys = Array.from(normalizedNodes);\n  const collabNodeMap = binding.collabNodeMap;\n  const mergedNodes = [];\n\n  for (let i = 0; i < normalizedNodesKeys.length; i++) {\n    const nodeKey = normalizedNodesKeys[i];\n    const lexicalNode = lexical.$getNodeByKey(nodeKey);\n    const collabNode = collabNodeMap.get(nodeKey);\n\n    if (collabNode instanceof CollabTextNode) {\n      if (lexical.$isTextNode(lexicalNode)) {\n        // We mutate the text collab nodes after removing\n        // all the dead nodes first, otherwise offsets break.\n        mergedNodes.push([collabNode, lexicalNode.__text]);\n      } else {\n        const offset = collabNode.getOffset();\n\n        if (offset === -1) {\n          continue;\n        }\n\n        const parent = collabNode._parent;\n        collabNode._normalized = true;\n\n        parent._xmlText.delete(offset, 1);\n\n        collabNodeMap.delete(nodeKey);\n        const parentChildren = parent._children;\n        const index = parentChildren.indexOf(collabNode);\n        parentChildren.splice(index, 1);\n      }\n    }\n  }\n\n  for (let i = 0; i < mergedNodes.length; i++) {\n    const [collabNode, text] = mergedNodes[i];\n\n    if (collabNode instanceof CollabTextNode && typeof text === 'string') {\n      collabNode._text = text;\n    }\n  }\n}\n\nfunction syncLexicalUpdateToYjs(binding, provider, prevEditorState, currEditorState, dirtyElements, dirtyLeaves, normalizedNodes, tags) {\n  syncWithTransaction(binding, () => {\n    currEditorState.read(() => {\n      // We check if the update has come from a origin where the origin\n      // was the collaboration binding previously. This can help us\n      // prevent unnecessarily re-diffing and possible re-applying\n      // the same change editor state again. For example, if a user\n      // types a character and we get it, we don't want to then insert\n      // the same character again. The exception to this heuristic is\n      // when we need to handle normalization merge conflicts.\n      if (tags.has('collaboration') || tags.has('historic')) {\n        if (normalizedNodes.size > 0) {\n          handleNormalizationMergeConflicts(binding, normalizedNodes);\n        }\n\n        return;\n      }\n\n      if (dirtyElements.has('root')) {\n        const prevNodeMap = prevEditorState._nodeMap;\n        const nextLexicalRoot = lexical.$getRoot();\n        const collabRoot = binding.root;\n        collabRoot.syncPropertiesFromLexical(binding, nextLexicalRoot, prevNodeMap);\n        collabRoot.syncChildrenFromLexical(binding, nextLexicalRoot, prevNodeMap, dirtyElements, dirtyLeaves);\n      }\n\n      const selection = lexical.$getSelection();\n      const prevSelection = prevEditorState._selection;\n      syncLexicalSelectionToYjs(binding, provider, prevSelection, selection);\n    });\n  });\n}\n\n/** @module @lexical/yjs */\nconst CONNECTED_COMMAND = lexical.createCommand('CONNECTED_COMMAND');\nconst TOGGLE_CONNECT_COMMAND = lexical.createCommand('TOGGLE_CONNECT_COMMAND');\nfunction createUndoManager(binding, root) {\n  return new yjs.UndoManager(root, {\n    trackedOrigins: new Set([binding, null])\n  });\n}\nfunction initLocalState(provider, name, color, focusing) {\n  provider.awareness.setLocalState({\n    anchorPos: null,\n    color,\n    focusPos: null,\n    focusing: focusing,\n    name\n  });\n}\nfunction setLocalStateFocus(provider, name, color, focusing) {\n  const {\n    awareness\n  } = provider;\n  let localState = awareness.getLocalState();\n\n  if (localState === null) {\n    localState = {\n      anchorPos: null,\n      color,\n      focusPos: null,\n      focusing: focusing,\n      name\n    };\n  }\n\n  localState.focusing = focusing;\n  awareness.setLocalState(localState);\n}\n\nexports.CONNECTED_COMMAND = CONNECTED_COMMAND;\nexports.TOGGLE_CONNECT_COMMAND = TOGGLE_CONNECT_COMMAND;\nexports.createBinding = createBinding;\nexports.createUndoManager = createUndoManager;\nexports.initLocalState = initLocalState;\nexports.setLocalStateFocus = setLocalStateFocus;\nexports.syncCursorPositions = syncCursorPositions;\nexports.syncLexicalUpdateToYjs = syncLexicalUpdateToYjs;\nexports.syncYjsChangesToLexical = syncYjsChangesToLexical;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwveWpzL0xleGljYWxZanMuZGV2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhOztBQUViLGNBQWMsbUJBQU8sQ0FBQyx3REFBUztBQUMvQixVQUFVLG1CQUFPLENBQUMsa0RBQUs7QUFDdkIsZ0JBQWdCLG1CQUFPLENBQUMsdUZBQW9CO0FBQzVDLGFBQWEsbUJBQU8sQ0FBQyw4RUFBaUI7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyREFBMkQ7O0FBRTNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjs7QUFFaEIsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7OztBQUdKO0FBQ0E7QUFDQSxJQUFJOzs7QUFHSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtFQUFrRTs7QUFFbEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEIsTUFBTTtBQUNoQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLE1BQU07QUFDOUI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLHVCQUF1QjtBQUN6Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQSxrQkFBa0IsdUJBQXVCO0FBQ3pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTs7O0FBR1Y7QUFDQSw4QkFBOEI7O0FBRTlCO0FBQ0E7QUFDQSx5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLG9CQUFvQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQzs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxRUFBcUU7O0FBRXJFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7O0FBRVo7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLDBCQUEwQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdGQUFnRjs7QUFFaEY7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUEsMEJBQTBCLDBCQUEwQjtBQUNwRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseURBQXlEOztBQUV6RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsK0JBQStCO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtREFBbUQ7O0FBRW5EOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSwyQkFBMkI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLDhDQUE4QyxnQkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsc0JBQXNCLDZCQUE2QjtBQUNuRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixxQkFBcUI7QUFDekM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1FQUFtRTs7QUFFbkU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsTUFBTSxTQUFTLFdBQVcsVUFBVSxtQkFBbUIsT0FBTyxXQUFXO0FBQ3BIO0FBQ0E7QUFDQSwwQ0FBMEMsVUFBVSxVQUFVLG1CQUFtQixPQUFPLFdBQVcsaUJBQWlCLGVBQWUsWUFBWSxrQkFBa0IsaUJBQWlCLG1CQUFtQjtBQUNyTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtCQUFrQiwwQkFBMEI7QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUNBQXFDLE1BQU0sSUFBSSxHQUFHLE9BQU8sS0FBSyxHQUFHLFNBQVMscUJBQXFCLEdBQUcsUUFBUSxvQkFBb0IsR0FBRyxvQkFBb0IsVUFBVTtBQUMvSjtBQUNBLDRDQUE0QyxNQUFNLE9BQU8sTUFBTSxtQkFBbUIsT0FBTyxZQUFZOztBQUVyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDLDJCQUEyQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLDRCQUE0QjtBQUM5QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLGtCQUFrQix5QkFBeUI7QUFDM0M7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLFNBQVM7O0FBRWY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxNQUFNLFNBQVM7O0FBRWY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxNQUFNLFNBQVM7O0FBRWY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQSwrQ0FBK0M7QUFDL0M7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQjs7O0FBR2hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsZ0NBQWdDO0FBQ2xEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQix3QkFBd0I7QUFDMUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6Qiw4QkFBOEI7QUFDOUIscUJBQXFCO0FBQ3JCLHlCQUF5QjtBQUN6QixzQkFBc0I7QUFDdEIsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiw4QkFBOEI7QUFDOUIsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwveWpzL0xleGljYWxZanMuZGV2LmpzPzUxMDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBsZXhpY2FsID0gcmVxdWlyZSgnbGV4aWNhbCcpO1xudmFyIHlqcyA9IHJlcXVpcmUoJ3lqcycpO1xudmFyIHNlbGVjdGlvbiA9IHJlcXVpcmUoJ0BsZXhpY2FsL3NlbGVjdGlvbicpO1xudmFyIG9mZnNldCA9IHJlcXVpcmUoJ0BsZXhpY2FsL29mZnNldCcpO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5jbGFzcyBDb2xsYWJMaW5lQnJlYWtOb2RlIHtcbiAgY29uc3RydWN0b3IobWFwLCBwYXJlbnQpIHtcbiAgICB0aGlzLl9rZXkgPSAnJztcbiAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuX3R5cGUgPSAnbGluZWJyZWFrJztcbiAgfVxuXG4gIGdldE5vZGUoKSB7XG4gICAgY29uc3Qgbm9kZSA9IGxleGljYWwuJGdldE5vZGVCeUtleSh0aGlzLl9rZXkpO1xuICAgIHJldHVybiBsZXhpY2FsLiRpc0xpbmVCcmVha05vZGUobm9kZSkgPyBub2RlIDogbnVsbDtcbiAgfVxuXG4gIGdldEtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5fa2V5O1xuICB9XG5cbiAgZ2V0U2hhcmVkVHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwO1xuICB9XG5cbiAgZ2V0VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgfVxuXG4gIGdldFNpemUoKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBnZXRPZmZzZXQoKSB7XG4gICAgY29uc3QgY29sbGFiRWxlbWVudE5vZGUgPSB0aGlzLl9wYXJlbnQ7XG4gICAgcmV0dXJuIGNvbGxhYkVsZW1lbnROb2RlLmdldENoaWxkT2Zmc2V0KHRoaXMpO1xuICB9XG5cbiAgZGVzdHJveShiaW5kaW5nKSB7XG4gICAgY29uc3QgY29sbGFiTm9kZU1hcCA9IGJpbmRpbmcuY29sbGFiTm9kZU1hcDtcbiAgICBjb2xsYWJOb2RlTWFwLmRlbGV0ZSh0aGlzLl9rZXkpO1xuICB9XG5cbn1cbmZ1bmN0aW9uICRjcmVhdGVDb2xsYWJMaW5lQnJlYWtOb2RlKG1hcCwgcGFyZW50KSB7XG4gIGNvbnN0IGNvbGxhYk5vZGUgPSBuZXcgQ29sbGFiTGluZUJyZWFrTm9kZShtYXAsIHBhcmVudCk7IC8vIEB0cy1leHBlY3QtZXJyb3I6IGludGVybmFsIGZpZWxkXG5cbiAgbWFwLl9jb2xsYWJOb2RlID0gY29sbGFiTm9kZTtcbiAgcmV0dXJuIGNvbGxhYk5vZGU7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbmZ1bmN0aW9uIHNpbXBsZURpZmZXaXRoQ3Vyc29yKGEsIGIsIGN1cnNvcikge1xuICBjb25zdCBhTGVuZ3RoID0gYS5sZW5ndGg7XG4gIGNvbnN0IGJMZW5ndGggPSBiLmxlbmd0aDtcbiAgbGV0IGxlZnQgPSAwOyAvLyBudW1iZXIgb2Ygc2FtZSBjaGFyYWN0ZXJzIGNvdW50aW5nIGZyb20gbGVmdFxuXG4gIGxldCByaWdodCA9IDA7IC8vIG51bWJlciBvZiBzYW1lIGNoYXJhY3RlcnMgY291bnRpbmcgZnJvbSByaWdodFxuICAvLyBJdGVyYXRlIGxlZnQgdG8gdGhlIHJpZ2h0IHVudGlsIHdlIGZpbmQgYSBjaGFuZ2VkIGNoYXJhY3RlclxuICAvLyBGaXJzdCBpdGVyYXRpb24gY29uc2lkZXJzIHRoZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvblxuXG4gIHdoaWxlIChsZWZ0IDwgYUxlbmd0aCAmJiBsZWZ0IDwgYkxlbmd0aCAmJiBhW2xlZnRdID09PSBiW2xlZnRdICYmIGxlZnQgPCBjdXJzb3IpIHtcbiAgICBsZWZ0Kys7XG4gIH0gLy8gSXRlcmF0ZSByaWdodCB0byB0aGUgbGVmdCB1bnRpbCB3ZSBmaW5kIGEgY2hhbmdlZCBjaGFyYWN0ZXJcblxuXG4gIHdoaWxlIChyaWdodCArIGxlZnQgPCBhTGVuZ3RoICYmIHJpZ2h0ICsgbGVmdCA8IGJMZW5ndGggJiYgYVthTGVuZ3RoIC0gcmlnaHQgLSAxXSA9PT0gYltiTGVuZ3RoIC0gcmlnaHQgLSAxXSkge1xuICAgIHJpZ2h0Kys7XG4gIH0gLy8gVHJ5IHRvIGl0ZXJhdGUgbGVmdCBmdXJ0aGVyIHRvIHRoZSByaWdodCB3aXRob3V0IGNhcmluZyBhYm91dCB0aGUgY3VycmVudCBjdXJzb3IgcG9zaXRpb25cblxuXG4gIHdoaWxlIChyaWdodCArIGxlZnQgPCBhTGVuZ3RoICYmIHJpZ2h0ICsgbGVmdCA8IGJMZW5ndGggJiYgYVtsZWZ0XSA9PT0gYltsZWZ0XSkge1xuICAgIGxlZnQrKztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaW5kZXg6IGxlZnQsXG4gICAgaW5zZXJ0OiBiLnNsaWNlKGxlZnQsIGJMZW5ndGggLSByaWdodCksXG4gICAgcmVtb3ZlOiBhTGVuZ3RoIC0gbGVmdCAtIHJpZ2h0XG4gIH07XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gZGlmZlRleHRDb250ZW50QW5kQXBwbHlEZWx0YShjb2xsYWJOb2RlLCBrZXksIHByZXZUZXh0LCBuZXh0VGV4dCkge1xuICBjb25zdCBzZWxlY3Rpb24gPSBsZXhpY2FsLiRnZXRTZWxlY3Rpb24oKTtcbiAgbGV0IGN1cnNvck9mZnNldCA9IG5leHRUZXh0Lmxlbmd0aDtcblxuICBpZiAobGV4aWNhbC4kaXNSYW5nZVNlbGVjdGlvbihzZWxlY3Rpb24pICYmIHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpKSB7XG4gICAgY29uc3QgYW5jaG9yID0gc2VsZWN0aW9uLmFuY2hvcjtcblxuICAgIGlmIChhbmNob3Iua2V5ID09PSBrZXkpIHtcbiAgICAgIGN1cnNvck9mZnNldCA9IGFuY2hvci5vZmZzZXQ7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZGlmZiA9IHNpbXBsZURpZmZXaXRoQ3Vyc29yKHByZXZUZXh0LCBuZXh0VGV4dCwgY3Vyc29yT2Zmc2V0KTtcbiAgY29sbGFiTm9kZS5zcGxpY2VUZXh0KGRpZmYuaW5kZXgsIGRpZmYucmVtb3ZlLCBkaWZmLmluc2VydCk7XG59XG5cbmNsYXNzIENvbGxhYlRleHROb2RlIHtcbiAgY29uc3RydWN0b3IobWFwLCB0ZXh0LCBwYXJlbnQsIHR5cGUpIHtcbiAgICB0aGlzLl9rZXkgPSAnJztcbiAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuX3RleHQgPSB0ZXh0O1xuICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgIHRoaXMuX25vcm1hbGl6ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGdldFByZXZOb2RlKG5vZGVNYXApIHtcbiAgICBpZiAobm9kZU1hcCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9kZSA9IG5vZGVNYXAuZ2V0KHRoaXMuX2tleSk7XG4gICAgcmV0dXJuIGxleGljYWwuJGlzVGV4dE5vZGUobm9kZSkgPyBub2RlIDogbnVsbDtcbiAgfVxuXG4gIGdldE5vZGUoKSB7XG4gICAgY29uc3Qgbm9kZSA9IGxleGljYWwuJGdldE5vZGVCeUtleSh0aGlzLl9rZXkpO1xuICAgIHJldHVybiBsZXhpY2FsLiRpc1RleHROb2RlKG5vZGUpID8gbm9kZSA6IG51bGw7XG4gIH1cblxuICBnZXRTaGFyZWRUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9tYXA7XG4gIH1cblxuICBnZXRUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgZ2V0S2V5KCkge1xuICAgIHJldHVybiB0aGlzLl9rZXk7XG4gIH1cblxuICBnZXRTaXplKCkge1xuICAgIHJldHVybiB0aGlzLl90ZXh0Lmxlbmd0aCArICh0aGlzLl9ub3JtYWxpemVkID8gMCA6IDEpO1xuICB9XG5cbiAgZ2V0T2Zmc2V0KCkge1xuICAgIGNvbnN0IGNvbGxhYkVsZW1lbnROb2RlID0gdGhpcy5fcGFyZW50O1xuICAgIHJldHVybiBjb2xsYWJFbGVtZW50Tm9kZS5nZXRDaGlsZE9mZnNldCh0aGlzKTtcbiAgfVxuXG4gIHNwbGljZVRleHQoaW5kZXgsIGRlbENvdW50LCBuZXdUZXh0KSB7XG4gICAgY29uc3QgY29sbGFiRWxlbWVudE5vZGUgPSB0aGlzLl9wYXJlbnQ7XG4gICAgY29uc3QgeG1sVGV4dCA9IGNvbGxhYkVsZW1lbnROb2RlLl94bWxUZXh0O1xuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuZ2V0T2Zmc2V0KCkgKyAxICsgaW5kZXg7XG5cbiAgICBpZiAoZGVsQ291bnQgIT09IDApIHtcbiAgICAgIHhtbFRleHQuZGVsZXRlKG9mZnNldCwgZGVsQ291bnQpO1xuICAgIH1cblxuICAgIGlmIChuZXdUZXh0ICE9PSAnJykge1xuICAgICAgeG1sVGV4dC5pbnNlcnQob2Zmc2V0LCBuZXdUZXh0KTtcbiAgICB9XG4gIH1cblxuICBzeW5jUHJvcGVydGllc0FuZFRleHRGcm9tTGV4aWNhbChiaW5kaW5nLCBuZXh0TGV4aWNhbE5vZGUsIHByZXZOb2RlTWFwKSB7XG4gICAgY29uc3QgcHJldkxleGljYWxOb2RlID0gdGhpcy5nZXRQcmV2Tm9kZShwcmV2Tm9kZU1hcCk7XG4gICAgY29uc3QgbmV4dFRleHQgPSBuZXh0TGV4aWNhbE5vZGUuX190ZXh0O1xuICAgIHN5bmNQcm9wZXJ0aWVzRnJvbUxleGljYWwoYmluZGluZywgdGhpcy5fbWFwLCBwcmV2TGV4aWNhbE5vZGUsIG5leHRMZXhpY2FsTm9kZSk7XG5cbiAgICBpZiAocHJldkxleGljYWxOb2RlICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBwcmV2VGV4dCA9IHByZXZMZXhpY2FsTm9kZS5fX3RleHQ7XG5cbiAgICAgIGlmIChwcmV2VGV4dCAhPT0gbmV4dFRleHQpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gbmV4dExleGljYWxOb2RlLl9fa2V5O1xuICAgICAgICBkaWZmVGV4dENvbnRlbnRBbmRBcHBseURlbHRhKHRoaXMsIGtleSwgcHJldlRleHQsIG5leHRUZXh0KTtcbiAgICAgICAgdGhpcy5fdGV4dCA9IG5leHRUZXh0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN5bmNQcm9wZXJ0aWVzQW5kVGV4dEZyb21ZanMoYmluZGluZywga2V5c0NoYW5nZWQpIHtcbiAgICBjb25zdCBsZXhpY2FsTm9kZSA9IHRoaXMuZ2V0Tm9kZSgpO1xuXG4gICAgaWYgKCEobGV4aWNhbE5vZGUgIT09IG51bGwpKSB7XG4gICAgICB0aHJvdyBFcnJvcihgc3luY1Byb3BlcnRpZXNBbmRUZXh0RnJvbVlqczogY291bmQgbm90IGZpbmQgZGVjb3JhdG9yIG5vZGVgKTtcbiAgICB9XG5cbiAgICBzeW5jUHJvcGVydGllc0Zyb21ZanMoYmluZGluZywgdGhpcy5fbWFwLCBsZXhpY2FsTm9kZSwga2V5c0NoYW5nZWQpO1xuICAgIGNvbnN0IGNvbGxhYlRleHQgPSB0aGlzLl90ZXh0O1xuXG4gICAgaWYgKGxleGljYWxOb2RlLl9fdGV4dCAhPT0gY29sbGFiVGV4dCkge1xuICAgICAgY29uc3Qgd3JpdGFibGUgPSBsZXhpY2FsTm9kZS5nZXRXcml0YWJsZSgpO1xuICAgICAgd3JpdGFibGUuX190ZXh0ID0gY29sbGFiVGV4dDtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95KGJpbmRpbmcpIHtcbiAgICBjb25zdCBjb2xsYWJOb2RlTWFwID0gYmluZGluZy5jb2xsYWJOb2RlTWFwO1xuICAgIGNvbGxhYk5vZGVNYXAuZGVsZXRlKHRoaXMuX2tleSk7XG4gIH1cblxufVxuZnVuY3Rpb24gJGNyZWF0ZUNvbGxhYlRleHROb2RlKG1hcCwgdGV4dCwgcGFyZW50LCB0eXBlKSB7XG4gIGNvbnN0IGNvbGxhYk5vZGUgPSBuZXcgQ29sbGFiVGV4dE5vZGUobWFwLCB0ZXh0LCBwYXJlbnQsIHR5cGUpOyAvLyBAdHMtZXhwZWN0LWVycm9yOiBpbnRlcm5hbCBmaWVsZFxuXG4gIG1hcC5fY29sbGFiTm9kZSA9IGNvbGxhYk5vZGU7XG4gIHJldHVybiBjb2xsYWJOb2RlO1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5jb25zdCBleGNsdWRlZFByb3BlcnRpZXMgPSBuZXcgU2V0KFsnX19rZXknLCAnX19wYXJlbnQnLCAnX19jYWNoZWRUZXh0JywgJ19fdGV4dCcsICdfX3NpemUnLCAnX19uZXh0JywgJ19fcHJldicsICdfX2ZpcnN0JywgJ19fbGFzdCddKTtcbmZ1bmN0aW9uICRnZXROb2RlQnlLZXlPclRocm93KGtleSkge1xuICBjb25zdCBub2RlID0gbGV4aWNhbC4kZ2V0Tm9kZUJ5S2V5KGtleSk7XG5cbiAgaWYgKCEobm9kZSAhPT0gbnVsbCkpIHtcbiAgICB0aHJvdyBFcnJvcihgY291bGQgbm90IGZpbmQgbm9kZSBieSBrZXlgKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gJGNyZWF0ZUNvbGxhYk5vZGVGcm9tTGV4aWNhbE5vZGUoYmluZGluZywgbGV4aWNhbE5vZGUsIHBhcmVudCkge1xuICBjb25zdCBub2RlVHlwZSA9IGxleGljYWxOb2RlLl9fdHlwZTtcbiAgbGV0IGNvbGxhYk5vZGU7XG5cbiAgaWYgKGxleGljYWwuJGlzRWxlbWVudE5vZGUobGV4aWNhbE5vZGUpKSB7XG4gICAgY29uc3QgeG1sVGV4dCA9IG5ldyB5anMuWG1sVGV4dCgpO1xuICAgIGNvbGxhYk5vZGUgPSAkY3JlYXRlQ29sbGFiRWxlbWVudE5vZGUoeG1sVGV4dCwgcGFyZW50LCBub2RlVHlwZSk7XG4gICAgY29sbGFiTm9kZS5zeW5jUHJvcGVydGllc0Zyb21MZXhpY2FsKGJpbmRpbmcsIGxleGljYWxOb2RlLCBudWxsKTtcbiAgICBjb2xsYWJOb2RlLnN5bmNDaGlsZHJlbkZyb21MZXhpY2FsKGJpbmRpbmcsIGxleGljYWxOb2RlLCBudWxsLCBudWxsLCBudWxsKTtcbiAgfSBlbHNlIGlmIChsZXhpY2FsLiRpc1RleHROb2RlKGxleGljYWxOb2RlKSkge1xuICAgIC8vIFRPRE8gY3JlYXRlIGEgdG9rZW4gdGV4dCBub2RlIGZvciB0b2tlbiwgc2VnbWVudGVkIG5vZGVzLlxuICAgIGNvbnN0IG1hcCA9IG5ldyB5anMuTWFwKCk7XG4gICAgY29sbGFiTm9kZSA9ICRjcmVhdGVDb2xsYWJUZXh0Tm9kZShtYXAsIGxleGljYWxOb2RlLl9fdGV4dCwgcGFyZW50LCBub2RlVHlwZSk7XG4gICAgY29sbGFiTm9kZS5zeW5jUHJvcGVydGllc0FuZFRleHRGcm9tTGV4aWNhbChiaW5kaW5nLCBsZXhpY2FsTm9kZSwgbnVsbCk7XG4gIH0gZWxzZSBpZiAobGV4aWNhbC4kaXNMaW5lQnJlYWtOb2RlKGxleGljYWxOb2RlKSkge1xuICAgIGNvbnN0IG1hcCA9IG5ldyB5anMuTWFwKCk7XG4gICAgbWFwLnNldCgnX190eXBlJywgJ2xpbmVicmVhaycpO1xuICAgIGNvbGxhYk5vZGUgPSAkY3JlYXRlQ29sbGFiTGluZUJyZWFrTm9kZShtYXAsIHBhcmVudCk7XG4gIH0gZWxzZSBpZiAobGV4aWNhbC4kaXNEZWNvcmF0b3JOb2RlKGxleGljYWxOb2RlKSkge1xuICAgIGNvbnN0IHhtbEVsZW0gPSBuZXcgeWpzLlhtbEVsZW1lbnQoKTtcbiAgICBjb2xsYWJOb2RlID0gJGNyZWF0ZUNvbGxhYkRlY29yYXRvck5vZGUoeG1sRWxlbSwgcGFyZW50LCBub2RlVHlwZSk7XG4gICAgY29sbGFiTm9kZS5zeW5jUHJvcGVydGllc0Zyb21MZXhpY2FsKGJpbmRpbmcsIGxleGljYWxOb2RlLCBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICB7XG4gICAgICB0aHJvdyBFcnJvcihgRXhwZWN0ZWQgdGV4dCwgZWxlbWVudCwgZGVjb3JhdG9yLCBvciBsaW5lYnJlYWsgbm9kZWApO1xuICAgIH1cbiAgfVxuXG4gIGNvbGxhYk5vZGUuX2tleSA9IGxleGljYWxOb2RlLl9fa2V5O1xuICByZXR1cm4gY29sbGFiTm9kZTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZVR5cGVGcm9tU2hhcmVkVHlwZShzaGFyZWRUeXBlKSB7XG4gIGNvbnN0IHR5cGUgPSBzaGFyZWRUeXBlIGluc3RhbmNlb2YgeWpzLk1hcCA/IHNoYXJlZFR5cGUuZ2V0KCdfX3R5cGUnKSA6IHNoYXJlZFR5cGUuZ2V0QXR0cmlidXRlKCdfX3R5cGUnKTtcblxuICBpZiAoISh0eXBlICE9IG51bGwpKSB7XG4gICAgdGhyb3cgRXJyb3IoYEV4cGVjdGVkIHNoYXJlZCB0eXBlIHRvIGluY2x1ZGUgdHlwZSBhdHRyaWJ1dGVgKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuXG5mdW5jdGlvbiBnZXRPckluaXRDb2xsYWJOb2RlRnJvbVNoYXJlZFR5cGUoYmluZGluZywgc2hhcmVkVHlwZSwgcGFyZW50KSB7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IGludGVybmFsIGZpZWxkXG4gIGNvbnN0IGNvbGxhYk5vZGUgPSBzaGFyZWRUeXBlLl9jb2xsYWJOb2RlO1xuXG4gIGlmIChjb2xsYWJOb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCByZWdpc3RlcmVkTm9kZXMgPSBiaW5kaW5nLmVkaXRvci5fbm9kZXM7XG4gICAgY29uc3QgdHlwZSA9IGdldE5vZGVUeXBlRnJvbVNoYXJlZFR5cGUoc2hhcmVkVHlwZSk7XG4gICAgY29uc3Qgbm9kZUluZm8gPSByZWdpc3RlcmVkTm9kZXMuZ2V0KHR5cGUpO1xuXG4gICAgaWYgKCEobm9kZUluZm8gIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgIHRocm93IEVycm9yKGBOb2RlICR7dHlwZX0gaXMgbm90IHJlZ2lzdGVyZWRgKTtcbiAgICB9XG5cbiAgICBjb25zdCBzaGFyZWRQYXJlbnQgPSBzaGFyZWRUeXBlLnBhcmVudDtcbiAgICBjb25zdCB0YXJnZXRQYXJlbnQgPSBwYXJlbnQgPT09IHVuZGVmaW5lZCAmJiBzaGFyZWRQYXJlbnQgIT09IG51bGwgPyBnZXRPckluaXRDb2xsYWJOb2RlRnJvbVNoYXJlZFR5cGUoYmluZGluZywgc2hhcmVkUGFyZW50KSA6IHBhcmVudCB8fCBudWxsO1xuXG4gICAgaWYgKCEodGFyZ2V0UGFyZW50IGluc3RhbmNlb2YgQ29sbGFiRWxlbWVudE5vZGUpKSB7XG4gICAgICB0aHJvdyBFcnJvcihgRXhwZWN0ZWQgcGFyZW50IHRvIGJlIGEgY29sbGFiIGVsZW1lbnQgbm9kZWApO1xuICAgIH1cblxuICAgIGlmIChzaGFyZWRUeXBlIGluc3RhbmNlb2YgeWpzLlhtbFRleHQpIHtcbiAgICAgIHJldHVybiAkY3JlYXRlQ29sbGFiRWxlbWVudE5vZGUoc2hhcmVkVHlwZSwgdGFyZ2V0UGFyZW50LCB0eXBlKTtcbiAgICB9IGVsc2UgaWYgKHNoYXJlZFR5cGUgaW5zdGFuY2VvZiB5anMuTWFwKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ2xpbmVicmVhaycpIHtcbiAgICAgICAgcmV0dXJuICRjcmVhdGVDb2xsYWJMaW5lQnJlYWtOb2RlKHNoYXJlZFR5cGUsIHRhcmdldFBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkY3JlYXRlQ29sbGFiVGV4dE5vZGUoc2hhcmVkVHlwZSwgJycsIHRhcmdldFBhcmVudCwgdHlwZSk7XG4gICAgfSBlbHNlIGlmIChzaGFyZWRUeXBlIGluc3RhbmNlb2YgeWpzLlhtbEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiAkY3JlYXRlQ29sbGFiRGVjb3JhdG9yTm9kZShzaGFyZWRUeXBlLCB0YXJnZXRQYXJlbnQsIHR5cGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb2xsYWJOb2RlO1xufVxuZnVuY3Rpb24gY3JlYXRlTGV4aWNhbE5vZGVGcm9tQ29sbGFiTm9kZShiaW5kaW5nLCBjb2xsYWJOb2RlLCBwYXJlbnRLZXkpIHtcbiAgY29uc3QgdHlwZSA9IGNvbGxhYk5vZGUuZ2V0VHlwZSgpO1xuICBjb25zdCByZWdpc3RlcmVkTm9kZXMgPSBiaW5kaW5nLmVkaXRvci5fbm9kZXM7XG4gIGNvbnN0IG5vZGVJbmZvID0gcmVnaXN0ZXJlZE5vZGVzLmdldCh0eXBlKTtcblxuICBpZiAoIShub2RlSW5mbyAhPT0gdW5kZWZpbmVkKSkge1xuICAgIHRocm93IEVycm9yKGBOb2RlICR7dHlwZX0gaXMgbm90IHJlZ2lzdGVyZWRgKTtcbiAgfVxuXG4gIGNvbnN0IGxleGljYWxOb2RlID0gbmV3IG5vZGVJbmZvLmtsYXNzKCk7XG4gIGxleGljYWxOb2RlLl9fcGFyZW50ID0gcGFyZW50S2V5O1xuICBjb2xsYWJOb2RlLl9rZXkgPSBsZXhpY2FsTm9kZS5fX2tleTtcblxuICBpZiAoY29sbGFiTm9kZSBpbnN0YW5jZW9mIENvbGxhYkVsZW1lbnROb2RlKSB7XG4gICAgY29uc3QgeG1sVGV4dCA9IGNvbGxhYk5vZGUuX3htbFRleHQ7XG4gICAgY29sbGFiTm9kZS5zeW5jUHJvcGVydGllc0Zyb21ZanMoYmluZGluZywgbnVsbCk7XG4gICAgY29sbGFiTm9kZS5hcHBseUNoaWxkcmVuWWpzRGVsdGEoYmluZGluZywgeG1sVGV4dC50b0RlbHRhKCkpO1xuICAgIGNvbGxhYk5vZGUuc3luY0NoaWxkcmVuRnJvbVlqcyhiaW5kaW5nKTtcbiAgfSBlbHNlIGlmIChjb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiVGV4dE5vZGUpIHtcbiAgICBjb2xsYWJOb2RlLnN5bmNQcm9wZXJ0aWVzQW5kVGV4dEZyb21ZanMoYmluZGluZywgbnVsbCk7XG4gIH0gZWxzZSBpZiAoY29sbGFiTm9kZSBpbnN0YW5jZW9mIENvbGxhYkRlY29yYXRvck5vZGUpIHtcbiAgICBjb2xsYWJOb2RlLnN5bmNQcm9wZXJ0aWVzRnJvbVlqcyhiaW5kaW5nLCBudWxsKTtcbiAgfVxuXG4gIGJpbmRpbmcuY29sbGFiTm9kZU1hcC5zZXQobGV4aWNhbE5vZGUuX19rZXksIGNvbGxhYk5vZGUpO1xuICByZXR1cm4gbGV4aWNhbE5vZGU7XG59XG5mdW5jdGlvbiBzeW5jUHJvcGVydGllc0Zyb21ZanMoYmluZGluZywgc2hhcmVkVHlwZSwgbGV4aWNhbE5vZGUsIGtleXNDaGFuZ2VkKSB7XG4gIGNvbnN0IHByb3BlcnRpZXMgPSBrZXlzQ2hhbmdlZCA9PT0gbnVsbCA/IHNoYXJlZFR5cGUgaW5zdGFuY2VvZiB5anMuTWFwID8gQXJyYXkuZnJvbShzaGFyZWRUeXBlLmtleXMoKSkgOiBPYmplY3Qua2V5cyhzaGFyZWRUeXBlLmdldEF0dHJpYnV0ZXMoKSkgOiBBcnJheS5mcm9tKGtleXNDaGFuZ2VkKTtcbiAgbGV0IHdyaXRhYmxlTm9kZTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07XG5cbiAgICBpZiAoZXhjbHVkZWRQcm9wZXJ0aWVzLmhhcyhwcm9wZXJ0eSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHByZXZWYWx1ZSA9IGxleGljYWxOb2RlW3Byb3BlcnR5XTtcbiAgICBsZXQgbmV4dFZhbHVlID0gc2hhcmVkVHlwZSBpbnN0YW5jZW9mIHlqcy5NYXAgPyBzaGFyZWRUeXBlLmdldChwcm9wZXJ0eSkgOiBzaGFyZWRUeXBlLmdldEF0dHJpYnV0ZShwcm9wZXJ0eSk7XG5cbiAgICBpZiAocHJldlZhbHVlICE9PSBuZXh0VmFsdWUpIHtcbiAgICAgIGlmIChuZXh0VmFsdWUgaW5zdGFuY2VvZiB5anMuRG9jKSB7XG4gICAgICAgIGNvbnN0IHlqc0RvY01hcCA9IGJpbmRpbmcuZG9jTWFwO1xuXG4gICAgICAgIGlmIChwcmV2VmFsdWUgaW5zdGFuY2VvZiB5anMuRG9jKSB7XG4gICAgICAgICAgeWpzRG9jTWFwLmRlbGV0ZShwcmV2VmFsdWUuZ3VpZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXN0ZWRFZGl0b3IgPSBsZXhpY2FsLmNyZWF0ZUVkaXRvcigpO1xuICAgICAgICBjb25zdCBrZXkgPSBuZXh0VmFsdWUuZ3VpZDtcbiAgICAgICAgbmVzdGVkRWRpdG9yLl9rZXkgPSBrZXk7XG4gICAgICAgIHlqc0RvY01hcC5zZXQoa2V5LCBuZXh0VmFsdWUpO1xuICAgICAgICBuZXh0VmFsdWUgPSBuZXN0ZWRFZGl0b3I7XG4gICAgICB9XG5cbiAgICAgIGlmICh3cml0YWJsZU5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB3cml0YWJsZU5vZGUgPSBsZXhpY2FsTm9kZS5nZXRXcml0YWJsZSgpO1xuICAgICAgfVxuXG4gICAgICB3cml0YWJsZU5vZGVbcHJvcGVydHldID0gbmV4dFZhbHVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc3luY1Byb3BlcnRpZXNGcm9tTGV4aWNhbChiaW5kaW5nLCBzaGFyZWRUeXBlLCBwcmV2TGV4aWNhbE5vZGUsIG5leHRMZXhpY2FsTm9kZSkge1xuICBjb25zdCB0eXBlID0gbmV4dExleGljYWxOb2RlLl9fdHlwZTtcbiAgY29uc3Qgbm9kZVByb3BlcnRpZXMgPSBiaW5kaW5nLm5vZGVQcm9wZXJ0aWVzO1xuICBsZXQgcHJvcGVydGllcyA9IG5vZGVQcm9wZXJ0aWVzLmdldCh0eXBlKTtcblxuICBpZiAocHJvcGVydGllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcHJvcGVydGllcyA9IE9iamVjdC5rZXlzKG5leHRMZXhpY2FsTm9kZSkuZmlsdGVyKHByb3BlcnR5ID0+IHtcbiAgICAgIHJldHVybiAhZXhjbHVkZWRQcm9wZXJ0aWVzLmhhcyhwcm9wZXJ0eSk7XG4gICAgfSk7XG4gICAgbm9kZVByb3BlcnRpZXMuc2V0KHR5cGUsIHByb3BlcnRpZXMpO1xuICB9XG5cbiAgY29uc3QgRWRpdG9yQ2xhc3MgPSBiaW5kaW5nLmVkaXRvci5jb25zdHJ1Y3RvcjtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07XG4gICAgY29uc3QgcHJldlZhbHVlID0gcHJldkxleGljYWxOb2RlID09PSBudWxsID8gdW5kZWZpbmVkIDogcHJldkxleGljYWxOb2RlW3Byb3BlcnR5XTtcbiAgICBsZXQgbmV4dFZhbHVlID0gbmV4dExleGljYWxOb2RlW3Byb3BlcnR5XTtcblxuICAgIGlmIChwcmV2VmFsdWUgIT09IG5leHRWYWx1ZSkge1xuICAgICAgaWYgKG5leHRWYWx1ZSBpbnN0YW5jZW9mIEVkaXRvckNsYXNzKSB7XG4gICAgICAgIGNvbnN0IHlqc0RvY01hcCA9IGJpbmRpbmcuZG9jTWFwO1xuICAgICAgICBsZXQgcHJldkRvYztcblxuICAgICAgICBpZiAocHJldlZhbHVlIGluc3RhbmNlb2YgRWRpdG9yQ2xhc3MpIHtcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIExleGljYWwgbm9kZVxuICAgICAgICAgIGNvbnN0IHByZXZLZXkgPSBwcmV2VmFsdWUuX2tleTtcbiAgICAgICAgICBwcmV2RG9jID0geWpzRG9jTWFwLmdldChwcmV2S2V5KTtcbiAgICAgICAgICB5anNEb2NNYXAuZGVsZXRlKHByZXZLZXkpO1xuICAgICAgICB9IC8vIElmIHdlIGFscmVhZHkgaGF2ZSBhIGRvY3VtZW50LCB1c2UgaXQuXG5cblxuICAgICAgICBjb25zdCBkb2MgPSBwcmV2RG9jIHx8IG5ldyB5anMuRG9jKCk7XG4gICAgICAgIGNvbnN0IGtleSA9IGRvYy5ndWlkOyAvLyBAdHMtZXhwZWN0LWVycm9yIExleGljYWwgbm9kZVxuXG4gICAgICAgIG5leHRWYWx1ZS5fa2V5ID0ga2V5O1xuICAgICAgICB5anNEb2NNYXAuc2V0KGtleSwgZG9jKTtcbiAgICAgICAgbmV4dFZhbHVlID0gZG9jOyAvLyBNYXJrIHRoZSBub2RlIGRpcnR5IGFzIHdlJ3ZlIGFzc2lnbmVkIGEgbmV3IGtleSB0byBpdFxuXG4gICAgICAgIGJpbmRpbmcuZWRpdG9yLnVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgbmV4dExleGljYWxOb2RlLm1hcmtEaXJ0eSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoYXJlZFR5cGUgaW5zdGFuY2VvZiB5anMuTWFwKSB7XG4gICAgICAgIHNoYXJlZFR5cGUuc2V0KHByb3BlcnR5LCBuZXh0VmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2hhcmVkVHlwZS5zZXRBdHRyaWJ1dGUocHJvcGVydHksIG5leHRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzcGxpY2VTdHJpbmcoc3RyLCBpbmRleCwgZGVsQ291bnQsIG5ld1RleHQpIHtcbiAgcmV0dXJuIHN0ci5zbGljZSgwLCBpbmRleCkgKyBuZXdUZXh0ICsgc3RyLnNsaWNlKGluZGV4ICsgZGVsQ291bnQpO1xufVxuZnVuY3Rpb24gZ2V0UG9zaXRpb25Gcm9tRWxlbWVudEFuZE9mZnNldChub2RlLCBvZmZzZXQsIGJvdW5kYXJ5SXNFZGdlKSB7XG4gIGxldCBpbmRleCA9IDA7XG4gIGxldCBpID0gMDtcbiAgY29uc3QgY2hpbGRyZW4gPSBub2RlLl9jaGlsZHJlbjtcbiAgY29uc3QgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgZm9yICg7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICBjb25zdCBjaGlsZE9mZnNldCA9IGluZGV4O1xuICAgIGNvbnN0IHNpemUgPSBjaGlsZC5nZXRTaXplKCk7XG4gICAgaW5kZXggKz0gc2l6ZTtcbiAgICBjb25zdCBleGNlZWRzQm91bmRhcnkgPSBib3VuZGFyeUlzRWRnZSA/IGluZGV4ID49IG9mZnNldCA6IGluZGV4ID4gb2Zmc2V0O1xuXG4gICAgaWYgKGV4Y2VlZHNCb3VuZGFyeSAmJiBjaGlsZCBpbnN0YW5jZW9mIENvbGxhYlRleHROb2RlKSB7XG4gICAgICBsZXQgdGV4dE9mZnNldCA9IG9mZnNldCAtIGNoaWxkT2Zmc2V0IC0gMTtcblxuICAgICAgaWYgKHRleHRPZmZzZXQgPCAwKSB7XG4gICAgICAgIHRleHRPZmZzZXQgPSAwO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkaWZmTGVuZ3RoID0gaW5kZXggLSBvZmZzZXQ7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZW5ndGg6IGRpZmZMZW5ndGgsXG4gICAgICAgIG5vZGU6IGNoaWxkLFxuICAgICAgICBub2RlSW5kZXg6IGksXG4gICAgICAgIG9mZnNldDogdGV4dE9mZnNldFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPiBvZmZzZXQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlbmd0aDogMCxcbiAgICAgICAgbm9kZTogY2hpbGQsXG4gICAgICAgIG5vZGVJbmRleDogaSxcbiAgICAgICAgb2Zmc2V0OiBjaGlsZE9mZnNldFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGkgPT09IGNoaWxkcmVuTGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVuZ3RoOiAwLFxuICAgICAgICBub2RlOiBudWxsLFxuICAgICAgICBub2RlSW5kZXg6IGkgKyAxLFxuICAgICAgICBvZmZzZXQ6IGNoaWxkT2Zmc2V0ICsgMVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxlbmd0aDogMCxcbiAgICBub2RlOiBudWxsLFxuICAgIG5vZGVJbmRleDogMCxcbiAgICBvZmZzZXQ6IDBcbiAgfTtcbn1cbmZ1bmN0aW9uIGRvZXNTZWxlY3Rpb25OZWVkUmVjb3ZlcmluZyhzZWxlY3Rpb24pIHtcbiAgY29uc3QgYW5jaG9yID0gc2VsZWN0aW9uLmFuY2hvcjtcbiAgY29uc3QgZm9jdXMgPSBzZWxlY3Rpb24uZm9jdXM7XG4gIGxldCByZWNvdmVyeU5lZWRlZCA9IGZhbHNlO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgYW5jaG9yTm9kZSA9IGFuY2hvci5nZXROb2RlKCk7XG4gICAgY29uc3QgZm9jdXNOb2RlID0gZm9jdXMuZ2V0Tm9kZSgpO1xuXG4gICAgaWYgKCAvLyBXZSBtaWdodCBoYXZlIHJlbW92ZWQgYSBub2RlIHRoYXQgbm8gbG9uZ2VyIGV4aXN0c1xuICAgICFhbmNob3JOb2RlLmlzQXR0YWNoZWQoKSB8fCAhZm9jdXNOb2RlLmlzQXR0YWNoZWQoKSB8fCAvLyBJZiB3ZSd2ZSBzcGxpdCBhIG5vZGUsIHRoZW4gdGhlIG9mZnNldCBtaWdodCBub3QgYmUgcmlnaHRcbiAgICBsZXhpY2FsLiRpc1RleHROb2RlKGFuY2hvck5vZGUpICYmIGFuY2hvci5vZmZzZXQgPiBhbmNob3JOb2RlLmdldFRleHRDb250ZW50U2l6ZSgpIHx8IGxleGljYWwuJGlzVGV4dE5vZGUoZm9jdXNOb2RlKSAmJiBmb2N1cy5vZmZzZXQgPiBmb2N1c05vZGUuZ2V0VGV4dENvbnRlbnRTaXplKCkpIHtcbiAgICAgIHJlY292ZXJ5TmVlZGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBTb21ldGltZXMgY2hlY2tpbmcgbm9yIGEgbm9kZSB2aWEgZ2V0Tm9kZSBtaWdodCB0cmlnZ2VyXG4gICAgLy8gYW4gZXJyb3IsIHNvIHdlIG5lZWQgcmVjb3ZlcnkgdGhlbiB0b28uXG4gICAgcmVjb3ZlcnlOZWVkZWQgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlY292ZXJ5TmVlZGVkO1xufVxuZnVuY3Rpb24gc3luY1dpdGhUcmFuc2FjdGlvbihiaW5kaW5nLCBmbikge1xuICBiaW5kaW5nLmRvYy50cmFuc2FjdChmbiwgYmluZGluZyk7XG59XG5mdW5jdGlvbiBjcmVhdGVDaGlsZHJlbkFycmF5KGVsZW1lbnQsIG5vZGVNYXApIHtcbiAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgbGV0IG5vZGVLZXkgPSBlbGVtZW50Ll9fZmlyc3Q7XG5cbiAgd2hpbGUgKG5vZGVLZXkgIT09IG51bGwpIHtcbiAgICBjb25zdCBub2RlID0gbm9kZU1hcCA9PT0gbnVsbCA/IGxleGljYWwuJGdldE5vZGVCeUtleShub2RlS2V5KSA6IG5vZGVNYXAuZ2V0KG5vZGVLZXkpO1xuXG4gICAgaWYgKG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB7XG4gICAgICAgIHRocm93IEVycm9yKGBjcmVhdGVDaGlsZHJlbkFycmF5OiBub2RlIGRvZXMgbm90IGV4aXN0IGluIG5vZGVNYXBgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZHJlbi5wdXNoKG5vZGVLZXkpO1xuICAgIG5vZGVLZXkgPSBub2RlLl9fbmV4dDtcbiAgfVxuXG4gIHJldHVybiBjaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIHJlbW92ZUZyb21QYXJlbnQobm9kZSkge1xuICBjb25zdCBvbGRQYXJlbnQgPSBub2RlLmdldFBhcmVudCgpO1xuXG4gIGlmIChvbGRQYXJlbnQgIT09IG51bGwpIHtcbiAgICBjb25zdCB3cml0YWJsZU5vZGUgPSBub2RlLmdldFdyaXRhYmxlKCk7XG4gICAgY29uc3Qgd3JpdGFibGVQYXJlbnQgPSBvbGRQYXJlbnQuZ2V0V3JpdGFibGUoKTtcbiAgICBjb25zdCBwcmV2U2libGluZyA9IG5vZGUuZ2V0UHJldmlvdXNTaWJsaW5nKCk7XG4gICAgY29uc3QgbmV4dFNpYmxpbmcgPSBub2RlLmdldE5leHRTaWJsaW5nKCk7IC8vIFRPRE86IHRoaXMgZnVuY3Rpb24gZHVwbGljYXRlcyBhIGJ1bmNoIG9mIG9wZXJhdGlvbnMsIGNhbiBiZSBzaW1wbGlmaWVkLlxuXG4gICAgaWYgKHByZXZTaWJsaW5nID09PSBudWxsKSB7XG4gICAgICBpZiAobmV4dFNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3Qgd3JpdGFibGVOZXh0U2libGluZyA9IG5leHRTaWJsaW5nLmdldFdyaXRhYmxlKCk7XG4gICAgICAgIHdyaXRhYmxlUGFyZW50Ll9fZmlyc3QgPSBuZXh0U2libGluZy5fX2tleTtcbiAgICAgICAgd3JpdGFibGVOZXh0U2libGluZy5fX3ByZXYgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JpdGFibGVQYXJlbnQuX19maXJzdCA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHdyaXRhYmxlUHJldlNpYmxpbmcgPSBwcmV2U2libGluZy5nZXRXcml0YWJsZSgpO1xuXG4gICAgICBpZiAobmV4dFNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3Qgd3JpdGFibGVOZXh0U2libGluZyA9IG5leHRTaWJsaW5nLmdldFdyaXRhYmxlKCk7XG4gICAgICAgIHdyaXRhYmxlTmV4dFNpYmxpbmcuX19wcmV2ID0gd3JpdGFibGVQcmV2U2libGluZy5fX2tleTtcbiAgICAgICAgd3JpdGFibGVQcmV2U2libGluZy5fX25leHQgPSB3cml0YWJsZU5leHRTaWJsaW5nLl9fa2V5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JpdGFibGVQcmV2U2libGluZy5fX25leHQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB3cml0YWJsZU5vZGUuX19wcmV2ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAobmV4dFNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgIGlmIChwcmV2U2libGluZyAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCB3cml0YWJsZVByZXZTaWJsaW5nID0gcHJldlNpYmxpbmcuZ2V0V3JpdGFibGUoKTtcbiAgICAgICAgd3JpdGFibGVQYXJlbnQuX19sYXN0ID0gcHJldlNpYmxpbmcuX19rZXk7XG4gICAgICAgIHdyaXRhYmxlUHJldlNpYmxpbmcuX19uZXh0ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyaXRhYmxlUGFyZW50Ll9fbGFzdCA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHdyaXRhYmxlTmV4dFNpYmxpbmcgPSBuZXh0U2libGluZy5nZXRXcml0YWJsZSgpO1xuXG4gICAgICBpZiAocHJldlNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3Qgd3JpdGFibGVQcmV2U2libGluZyA9IHByZXZTaWJsaW5nLmdldFdyaXRhYmxlKCk7XG4gICAgICAgIHdyaXRhYmxlUHJldlNpYmxpbmcuX19uZXh0ID0gd3JpdGFibGVOZXh0U2libGluZy5fX2tleTtcbiAgICAgICAgd3JpdGFibGVOZXh0U2libGluZy5fX3ByZXYgPSB3cml0YWJsZVByZXZTaWJsaW5nLl9fa2V5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JpdGFibGVOZXh0U2libGluZy5fX3ByZXYgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB3cml0YWJsZU5vZGUuX19uZXh0ID0gbnVsbDtcbiAgICB9XG5cbiAgICB3cml0YWJsZVBhcmVudC5fX3NpemUtLTtcbiAgICB3cml0YWJsZU5vZGUuX19wYXJlbnQgPSBudWxsO1xuICB9XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbmNsYXNzIENvbGxhYkRlY29yYXRvck5vZGUge1xuICBjb25zdHJ1Y3Rvcih4bWxFbGVtLCBwYXJlbnQsIHR5cGUpIHtcbiAgICB0aGlzLl9rZXkgPSAnJztcbiAgICB0aGlzLl94bWxFbGVtID0geG1sRWxlbTtcbiAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgdGhpcy5fdW5vYnNlcnZlcnMgPSBuZXcgU2V0KCk7XG4gIH1cblxuICBnZXRQcmV2Tm9kZShub2RlTWFwKSB7XG4gICAgaWYgKG5vZGVNYXAgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IG5vZGUgPSBub2RlTWFwLmdldCh0aGlzLl9rZXkpO1xuICAgIHJldHVybiBsZXhpY2FsLiRpc0RlY29yYXRvck5vZGUobm9kZSkgPyBub2RlIDogbnVsbDtcbiAgfVxuXG4gIGdldE5vZGUoKSB7XG4gICAgY29uc3Qgbm9kZSA9IGxleGljYWwuJGdldE5vZGVCeUtleSh0aGlzLl9rZXkpO1xuICAgIHJldHVybiBsZXhpY2FsLiRpc0RlY29yYXRvck5vZGUobm9kZSkgPyBub2RlIDogbnVsbDtcbiAgfVxuXG4gIGdldFNoYXJlZFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3htbEVsZW07XG4gIH1cblxuICBnZXRUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgZ2V0S2V5KCkge1xuICAgIHJldHVybiB0aGlzLl9rZXk7XG4gIH1cblxuICBnZXRTaXplKCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgZ2V0T2Zmc2V0KCkge1xuICAgIGNvbnN0IGNvbGxhYkVsZW1lbnROb2RlID0gdGhpcy5fcGFyZW50O1xuICAgIHJldHVybiBjb2xsYWJFbGVtZW50Tm9kZS5nZXRDaGlsZE9mZnNldCh0aGlzKTtcbiAgfVxuXG4gIHN5bmNQcm9wZXJ0aWVzRnJvbUxleGljYWwoYmluZGluZywgbmV4dExleGljYWxOb2RlLCBwcmV2Tm9kZU1hcCkge1xuICAgIGNvbnN0IHByZXZMZXhpY2FsTm9kZSA9IHRoaXMuZ2V0UHJldk5vZGUocHJldk5vZGVNYXApO1xuICAgIGNvbnN0IHhtbEVsZW0gPSB0aGlzLl94bWxFbGVtO1xuICAgIHN5bmNQcm9wZXJ0aWVzRnJvbUxleGljYWwoYmluZGluZywgeG1sRWxlbSwgcHJldkxleGljYWxOb2RlLCBuZXh0TGV4aWNhbE5vZGUpO1xuICB9XG5cbiAgc3luY1Byb3BlcnRpZXNGcm9tWWpzKGJpbmRpbmcsIGtleXNDaGFuZ2VkKSB7XG4gICAgY29uc3QgbGV4aWNhbE5vZGUgPSB0aGlzLmdldE5vZGUoKTtcblxuICAgIGlmICghKGxleGljYWxOb2RlICE9PSBudWxsKSkge1xuICAgICAgdGhyb3cgRXJyb3IoYHN5bmNQcm9wZXJ0aWVzRnJvbVlqczogY291bmQgbm90IGZpbmQgZGVjb3JhdG9yIG5vZGVgKTtcbiAgICB9XG5cbiAgICBjb25zdCB4bWxFbGVtID0gdGhpcy5feG1sRWxlbTtcbiAgICBzeW5jUHJvcGVydGllc0Zyb21ZanMoYmluZGluZywgeG1sRWxlbSwgbGV4aWNhbE5vZGUsIGtleXNDaGFuZ2VkKTtcbiAgfVxuXG4gIGRlc3Ryb3koYmluZGluZykge1xuICAgIGNvbnN0IGNvbGxhYk5vZGVNYXAgPSBiaW5kaW5nLmNvbGxhYk5vZGVNYXA7XG4gICAgY29sbGFiTm9kZU1hcC5kZWxldGUodGhpcy5fa2V5KTtcblxuICAgIHRoaXMuX3Vub2JzZXJ2ZXJzLmZvckVhY2godW5vYnNlcnZlciA9PiB1bm9ic2VydmVyKCkpO1xuXG4gICAgdGhpcy5fdW5vYnNlcnZlcnMuY2xlYXIoKTtcbiAgfVxuXG59XG5mdW5jdGlvbiAkY3JlYXRlQ29sbGFiRGVjb3JhdG9yTm9kZSh4bWxFbGVtLCBwYXJlbnQsIHR5cGUpIHtcbiAgY29uc3QgY29sbGFiTm9kZSA9IG5ldyBDb2xsYWJEZWNvcmF0b3JOb2RlKHhtbEVsZW0sIHBhcmVudCwgdHlwZSk7IC8vIEB0cy1leHBlY3QtZXJyb3I6IGludGVybmFsIGZpZWxkXG5cbiAgeG1sRWxlbS5fY29sbGFiTm9kZSA9IGNvbGxhYk5vZGU7XG4gIHJldHVybiBjb2xsYWJOb2RlO1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5jbGFzcyBDb2xsYWJFbGVtZW50Tm9kZSB7XG4gIGNvbnN0cnVjdG9yKHhtbFRleHQsIHBhcmVudCwgdHlwZSkge1xuICAgIHRoaXMuX2tleSA9ICcnO1xuICAgIHRoaXMuX2NoaWxkcmVuID0gW107XG4gICAgdGhpcy5feG1sVGV4dCA9IHhtbFRleHQ7XG4gICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB9XG5cbiAgZ2V0UHJldk5vZGUobm9kZU1hcCkge1xuICAgIGlmIChub2RlTWFwID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBub2RlID0gbm9kZU1hcC5nZXQodGhpcy5fa2V5KTtcbiAgICByZXR1cm4gbGV4aWNhbC4kaXNFbGVtZW50Tm9kZShub2RlKSA/IG5vZGUgOiBudWxsO1xuICB9XG5cbiAgZ2V0Tm9kZSgpIHtcbiAgICBjb25zdCBub2RlID0gbGV4aWNhbC4kZ2V0Tm9kZUJ5S2V5KHRoaXMuX2tleSk7XG4gICAgcmV0dXJuIGxleGljYWwuJGlzRWxlbWVudE5vZGUobm9kZSkgPyBub2RlIDogbnVsbDtcbiAgfVxuXG4gIGdldFNoYXJlZFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3htbFRleHQ7XG4gIH1cblxuICBnZXRUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgZ2V0S2V5KCkge1xuICAgIHJldHVybiB0aGlzLl9rZXk7XG4gIH1cblxuICBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5sZW5ndGggPT09IDA7XG4gIH1cblxuICBnZXRTaXplKCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgZ2V0T2Zmc2V0KCkge1xuICAgIGNvbnN0IGNvbGxhYkVsZW1lbnROb2RlID0gdGhpcy5fcGFyZW50O1xuXG4gICAgaWYgKCEoY29sbGFiRWxlbWVudE5vZGUgIT09IG51bGwpKSB7XG4gICAgICB0aHJvdyBFcnJvcihgZ2V0T2Zmc2V0OiBjb3VuZCBub3QgZmluZCBjb2xsYWIgZWxlbWVudCBub2RlYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbGxhYkVsZW1lbnROb2RlLmdldENoaWxkT2Zmc2V0KHRoaXMpO1xuICB9XG5cbiAgc3luY1Byb3BlcnRpZXNGcm9tWWpzKGJpbmRpbmcsIGtleXNDaGFuZ2VkKSB7XG4gICAgY29uc3QgbGV4aWNhbE5vZGUgPSB0aGlzLmdldE5vZGUoKTtcblxuICAgIGlmICghKGxleGljYWxOb2RlICE9PSBudWxsKSkge1xuICAgICAgdGhyb3cgRXJyb3IoYHN5bmNQcm9wZXJ0aWVzRnJvbVlqczogY291bmQgbm90IGZpbmQgZWxlbWVudCBub2RlYCk7XG4gICAgfVxuXG4gICAgc3luY1Byb3BlcnRpZXNGcm9tWWpzKGJpbmRpbmcsIHRoaXMuX3htbFRleHQsIGxleGljYWxOb2RlLCBrZXlzQ2hhbmdlZCk7XG4gIH1cblxuICBhcHBseUNoaWxkcmVuWWpzRGVsdGEoYmluZGluZywgZGVsdGFzKSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLl9jaGlsZHJlbjtcbiAgICBsZXQgY3VyckluZGV4ID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVsdGFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkZWx0YSA9IGRlbHRhc1tpXTtcbiAgICAgIGNvbnN0IGluc2VydERlbHRhID0gZGVsdGEuaW5zZXJ0O1xuICAgICAgY29uc3QgZGVsZXRlRGVsdGEgPSBkZWx0YS5kZWxldGU7XG5cbiAgICAgIGlmIChkZWx0YS5yZXRhaW4gIT0gbnVsbCkge1xuICAgICAgICBjdXJySW5kZXggKz0gZGVsdGEucmV0YWluO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGVsZXRlRGVsdGEgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGxldCBkZWxldGlvblNpemUgPSBkZWxldGVEZWx0YTtcblxuICAgICAgICB3aGlsZSAoZGVsZXRpb25TaXplID4gMCkge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICBub2RlSW5kZXgsXG4gICAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgICBsZW5ndGhcbiAgICAgICAgICB9ID0gZ2V0UG9zaXRpb25Gcm9tRWxlbWVudEFuZE9mZnNldCh0aGlzLCBjdXJySW5kZXgsIGZhbHNlKTtcblxuICAgICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgQ29sbGFiRWxlbWVudE5vZGUgfHwgbm9kZSBpbnN0YW5jZW9mIENvbGxhYkxpbmVCcmVha05vZGUgfHwgbm9kZSBpbnN0YW5jZW9mIENvbGxhYkRlY29yYXRvck5vZGUpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuLnNwbGljZShub2RlSW5kZXgsIDEpO1xuICAgICAgICAgICAgZGVsZXRpb25TaXplIC09IDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgQ29sbGFiVGV4dE5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbENvdW50ID0gTWF0aC5taW4oZGVsZXRpb25TaXplLCBsZW5ndGgpO1xuICAgICAgICAgICAgY29uc3QgcHJldkNvbGxhYk5vZGUgPSBub2RlSW5kZXggIT09IDAgPyBjaGlsZHJlbltub2RlSW5kZXggLSAxXSA6IG51bGw7XG4gICAgICAgICAgICBjb25zdCBub2RlU2l6ZSA9IG5vZGUuZ2V0U2l6ZSgpO1xuXG4gICAgICAgICAgICBpZiAob2Zmc2V0ID09PSAwICYmIGRlbENvdW50ID09PSAxICYmIG5vZGVJbmRleCA+IDAgJiYgcHJldkNvbGxhYk5vZGUgaW5zdGFuY2VvZiBDb2xsYWJUZXh0Tm9kZSAmJiBsZW5ndGggPT09IG5vZGVTaXplICYmIC8vIElmIHRoZSBub2RlIGhhcyBubyBrZXlzLCBpdCdzIGJlZW4gZGVsZXRlZFxuICAgICAgICAgICAgQXJyYXkuZnJvbShub2RlLl9tYXAua2V5cygpKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgLy8gTWVyZ2UgdGhlIHRleHQgbm9kZSB3aXRoIHByZXZpb3VzLlxuICAgICAgICAgICAgICBwcmV2Q29sbGFiTm9kZS5fdGV4dCArPSBub2RlLl90ZXh0O1xuICAgICAgICAgICAgICBjaGlsZHJlbi5zcGxpY2Uobm9kZUluZGV4LCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2Zmc2V0ID09PSAwICYmIGRlbENvdW50ID09PSBub2RlU2l6ZSkge1xuICAgICAgICAgICAgICAvLyBUaGUgZW50aXJlIHRoaW5nIG5lZWRzIHJlbW92aW5nXG4gICAgICAgICAgICAgIGNoaWxkcmVuLnNwbGljZShub2RlSW5kZXgsIDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbm9kZS5fdGV4dCA9IHNwbGljZVN0cmluZyhub2RlLl90ZXh0LCBvZmZzZXQsIGRlbENvdW50LCAnJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0aW9uU2l6ZSAtPSBkZWxDb3VudDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQ2FuIG9jY3VyIGR1ZSB0byB0aGUgZGVsZXRpb24gZnJvbSB0aGUgZGFuZ2xpbmcgdGV4dCBoZXVyaXN0aWMgYmVsb3cuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5zZXJ0RGVsdGEgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGluc2VydERlbHRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICBvZmZzZXRcbiAgICAgICAgICB9ID0gZ2V0UG9zaXRpb25Gcm9tRWxlbWVudEFuZE9mZnNldCh0aGlzLCBjdXJySW5kZXgsIHRydWUpO1xuXG4gICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBDb2xsYWJUZXh0Tm9kZSkge1xuICAgICAgICAgICAgbm9kZS5fdGV4dCA9IHNwbGljZVN0cmluZyhub2RlLl90ZXh0LCBvZmZzZXQsIDAsIGluc2VydERlbHRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVE9ETzogbWF5YmUgd2UgY2FuIGltcHJvdmUgdGhpcyBieSBrZWVwaW5nIGFyb3VuZCBhIHJlZHVuZGFudFxuICAgICAgICAgICAgLy8gdGV4dCBub2RlIG1hcCwgcmF0aGVyIHRoYW4gcmVtb3ZpbmcgYWxsIHRoZSB0ZXh0IG5vZGVzLCBzbyB0aGVyZVxuICAgICAgICAgICAgLy8gbmV2ZXIgY2FuIGJlIGRhbmdsaW5nIHRleHQuXG4gICAgICAgICAgICAvLyBXZSBoYXZlIGEgY29uZmxpY3Qgd2hlcmUgdGhlcmUgd2FzIGxpa2VseSBhIENvbGxhYlRleHROb2RlIGFuZFxuICAgICAgICAgICAgLy8gYW4gTGV4aWNhbCBUZXh0Tm9kZSB0b28sIGJ1dCB0aGV5IHdlcmUgcmVtb3ZlZCBpbiBhIG1lcmdlLiBTb1xuICAgICAgICAgICAgLy8gbGV0J3MganVzdCBpZ25vcmUgdGhlIHRleHQgYW5kIHRyaWdnZXIgYSByZW1vdmFsIGZvciBpdCBmcm9tIG91clxuICAgICAgICAgICAgLy8gc2hhcmVkIHR5cGUuXG4gICAgICAgICAgICB0aGlzLl94bWxUZXh0LmRlbGV0ZShvZmZzZXQsIGluc2VydERlbHRhLmxlbmd0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VyckluZGV4ICs9IGluc2VydERlbHRhLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBzaGFyZWRUeXBlID0gaW5zZXJ0RGVsdGE7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgbm9kZUluZGV4XG4gICAgICAgICAgfSA9IGdldFBvc2l0aW9uRnJvbUVsZW1lbnRBbmRPZmZzZXQodGhpcywgY3VyckluZGV4LCBmYWxzZSk7XG4gICAgICAgICAgY29uc3QgY29sbGFiTm9kZSA9IGdldE9ySW5pdENvbGxhYk5vZGVGcm9tU2hhcmVkVHlwZShiaW5kaW5nLCBzaGFyZWRUeXBlLCB0aGlzKTtcbiAgICAgICAgICBjaGlsZHJlbi5zcGxpY2Uobm9kZUluZGV4LCAwLCBjb2xsYWJOb2RlKTtcbiAgICAgICAgICBjdXJySW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGRlbHRhIGZvcm1hdCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN5bmNDaGlsZHJlbkZyb21ZanMoYmluZGluZykge1xuICAgIC8vIE5vdyBkaWZmIHRoZSBjaGlsZHJlbiBvZiB0aGUgY29sbGFiIG5vZGUgd2l0aCB0aGF0IG9mIG91ciBleGlzdGluZyBMZXhpY2FsIG5vZGUuXG4gICAgY29uc3QgbGV4aWNhbE5vZGUgPSB0aGlzLmdldE5vZGUoKTtcblxuICAgIGlmICghKGxleGljYWxOb2RlICE9PSBudWxsKSkge1xuICAgICAgdGhyb3cgRXJyb3IoYHN5bmNDaGlsZHJlbkZyb21ZanM6IGNvdW5kIG5vdCBmaW5kIGVsZW1lbnQgbm9kZWApO1xuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IGxleGljYWxOb2RlLl9fa2V5O1xuICAgIGNvbnN0IHByZXZMZXhpY2FsQ2hpbGRyZW5LZXlzID0gY3JlYXRlQ2hpbGRyZW5BcnJheShsZXhpY2FsTm9kZSwgbnVsbCk7XG4gICAgY29uc3QgbGV4aWNhbENoaWxkcmVuS2V5c0xlbmd0aCA9IHByZXZMZXhpY2FsQ2hpbGRyZW5LZXlzLmxlbmd0aDtcbiAgICBjb25zdCBjb2xsYWJDaGlsZHJlbiA9IHRoaXMuX2NoaWxkcmVuO1xuICAgIGNvbnN0IGNvbGxhYkNoaWxkcmVuTGVuZ3RoID0gY29sbGFiQ2hpbGRyZW4ubGVuZ3RoO1xuICAgIGNvbnN0IGNvbGxhYk5vZGVNYXAgPSBiaW5kaW5nLmNvbGxhYk5vZGVNYXA7XG4gICAgY29uc3QgdmlzaXRlZEtleXMgPSBuZXcgU2V0KCk7XG4gICAgbGV0IGNvbGxhYktleXM7XG4gICAgbGV0IHdyaXRhYmxlTGV4aWNhbE5vZGU7XG4gICAgbGV0IHByZXZJbmRleCA9IDA7XG4gICAgbGV0IHByZXZDaGlsZE5vZGUgPSBudWxsO1xuXG4gICAgaWYgKGNvbGxhYkNoaWxkcmVuTGVuZ3RoICE9PSBsZXhpY2FsQ2hpbGRyZW5LZXlzTGVuZ3RoKSB7XG4gICAgICB3cml0YWJsZUxleGljYWxOb2RlID0gbGV4aWNhbE5vZGUuZ2V0V3JpdGFibGUoKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbGxhYkNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGxleGljYWxDaGlsZEtleSA9IHByZXZMZXhpY2FsQ2hpbGRyZW5LZXlzW3ByZXZJbmRleF07XG4gICAgICBjb25zdCBjaGlsZENvbGxhYk5vZGUgPSBjb2xsYWJDaGlsZHJlbltpXTtcbiAgICAgIGNvbnN0IGNvbGxhYkxleGljYWxDaGlsZE5vZGUgPSBjaGlsZENvbGxhYk5vZGUuZ2V0Tm9kZSgpO1xuICAgICAgY29uc3QgY29sbGFiS2V5ID0gY2hpbGRDb2xsYWJOb2RlLl9rZXk7XG5cbiAgICAgIGlmIChjb2xsYWJMZXhpY2FsQ2hpbGROb2RlICE9PSBudWxsICYmIGxleGljYWxDaGlsZEtleSA9PT0gY29sbGFiS2V5KSB7XG4gICAgICAgIGNvbnN0IGNoaWxkTmVlZHNVcGRhdGluZyA9IGxleGljYWwuJGlzVGV4dE5vZGUoY29sbGFiTGV4aWNhbENoaWxkTm9kZSk7IC8vIFVwZGF0ZVxuXG4gICAgICAgIHZpc2l0ZWRLZXlzLmFkZChsZXhpY2FsQ2hpbGRLZXkpO1xuXG4gICAgICAgIGlmIChjaGlsZE5lZWRzVXBkYXRpbmcpIHtcbiAgICAgICAgICBjaGlsZENvbGxhYk5vZGUuX2tleSA9IGxleGljYWxDaGlsZEtleTtcblxuICAgICAgICAgIGlmIChjaGlsZENvbGxhYk5vZGUgaW5zdGFuY2VvZiBDb2xsYWJFbGVtZW50Tm9kZSkge1xuICAgICAgICAgICAgY29uc3QgeG1sVGV4dCA9IGNoaWxkQ29sbGFiTm9kZS5feG1sVGV4dDtcbiAgICAgICAgICAgIGNoaWxkQ29sbGFiTm9kZS5zeW5jUHJvcGVydGllc0Zyb21ZanMoYmluZGluZywgbnVsbCk7XG4gICAgICAgICAgICBjaGlsZENvbGxhYk5vZGUuYXBwbHlDaGlsZHJlbllqc0RlbHRhKGJpbmRpbmcsIHhtbFRleHQudG9EZWx0YSgpKTtcbiAgICAgICAgICAgIGNoaWxkQ29sbGFiTm9kZS5zeW5jQ2hpbGRyZW5Gcm9tWWpzKGJpbmRpbmcpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRDb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiVGV4dE5vZGUpIHtcbiAgICAgICAgICAgIGNoaWxkQ29sbGFiTm9kZS5zeW5jUHJvcGVydGllc0FuZFRleHRGcm9tWWpzKGJpbmRpbmcsIG51bGwpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRDb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiRGVjb3JhdG9yTm9kZSkge1xuICAgICAgICAgICAgY2hpbGRDb2xsYWJOb2RlLnN5bmNQcm9wZXJ0aWVzRnJvbVlqcyhiaW5kaW5nLCBudWxsKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCEoY2hpbGRDb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiTGluZUJyZWFrTm9kZSkpIHtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYHN5bmNDaGlsZHJlbkZyb21ZanM6IGV4cGVjdGVkIHRleHQsIGVsZW1lbnQsIGRlY29yYXRvciwgb3IgbGluZWJyZWFrIGNvbGxhYiBub2RlYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByZXZDaGlsZE5vZGUgPSBjb2xsYWJMZXhpY2FsQ2hpbGROb2RlO1xuICAgICAgICBwcmV2SW5kZXgrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb2xsYWJLZXlzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb2xsYWJLZXlzID0gbmV3IFNldCgpO1xuXG4gICAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBjb2xsYWJDaGlsZHJlbkxlbmd0aDsgcysrKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNvbGxhYkNoaWxkcmVuW3NdO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRLZXkgPSBjaGlsZC5fa2V5O1xuXG4gICAgICAgICAgICBpZiAoY2hpbGRLZXkgIT09ICcnKSB7XG4gICAgICAgICAgICAgIGNvbGxhYktleXMuYWRkKGNoaWxkS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sbGFiTGV4aWNhbENoaWxkTm9kZSAhPT0gbnVsbCAmJiBsZXhpY2FsQ2hpbGRLZXkgIT09IHVuZGVmaW5lZCAmJiAhY29sbGFiS2V5cy5oYXMobGV4aWNhbENoaWxkS2V5KSkge1xuICAgICAgICAgIGNvbnN0IG5vZGVUb1JlbW92ZSA9ICRnZXROb2RlQnlLZXlPclRocm93KGxleGljYWxDaGlsZEtleSk7XG4gICAgICAgICAgcmVtb3ZlRnJvbVBhcmVudChub2RlVG9SZW1vdmUpO1xuICAgICAgICAgIGktLTtcbiAgICAgICAgICBwcmV2SW5kZXgrKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdyaXRhYmxlTGV4aWNhbE5vZGUgPSBsZXhpY2FsTm9kZS5nZXRXcml0YWJsZSgpOyAvLyBDcmVhdGUvUmVwbGFjZVxuXG4gICAgICAgIGNvbnN0IGxleGljYWxDaGlsZE5vZGUgPSBjcmVhdGVMZXhpY2FsTm9kZUZyb21Db2xsYWJOb2RlKGJpbmRpbmcsIGNoaWxkQ29sbGFiTm9kZSwga2V5KTtcbiAgICAgICAgY29uc3QgY2hpbGRLZXkgPSBsZXhpY2FsQ2hpbGROb2RlLl9fa2V5O1xuICAgICAgICBjb2xsYWJOb2RlTWFwLnNldChjaGlsZEtleSwgY2hpbGRDb2xsYWJOb2RlKTtcblxuICAgICAgICBpZiAocHJldkNoaWxkTm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgIGNvbnN0IG5leHRTaWJsaW5nID0gd3JpdGFibGVMZXhpY2FsTm9kZS5nZXRGaXJzdENoaWxkKCk7XG4gICAgICAgICAgd3JpdGFibGVMZXhpY2FsTm9kZS5fX2ZpcnN0ID0gY2hpbGRLZXk7XG5cbiAgICAgICAgICBpZiAobmV4dFNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHdyaXRhYmxlTmV4dFNpYmxpbmcgPSBuZXh0U2libGluZy5nZXRXcml0YWJsZSgpO1xuICAgICAgICAgICAgd3JpdGFibGVOZXh0U2libGluZy5fX3ByZXYgPSBjaGlsZEtleTtcbiAgICAgICAgICAgIGxleGljYWxDaGlsZE5vZGUuX19uZXh0ID0gd3JpdGFibGVOZXh0U2libGluZy5fX2tleTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgd3JpdGFibGVQcmV2Q2hpbGROb2RlID0gcHJldkNoaWxkTm9kZS5nZXRXcml0YWJsZSgpO1xuICAgICAgICAgIGNvbnN0IG5leHRTaWJsaW5nID0gcHJldkNoaWxkTm9kZS5nZXROZXh0U2libGluZygpO1xuICAgICAgICAgIHdyaXRhYmxlUHJldkNoaWxkTm9kZS5fX25leHQgPSBjaGlsZEtleTtcbiAgICAgICAgICBsZXhpY2FsQ2hpbGROb2RlLl9fcHJldiA9IHByZXZDaGlsZE5vZGUuX19rZXk7XG5cbiAgICAgICAgICBpZiAobmV4dFNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHdyaXRhYmxlTmV4dFNpYmxpbmcgPSBuZXh0U2libGluZy5nZXRXcml0YWJsZSgpO1xuICAgICAgICAgICAgd3JpdGFibGVOZXh0U2libGluZy5fX3ByZXYgPSBjaGlsZEtleTtcbiAgICAgICAgICAgIGxleGljYWxDaGlsZE5vZGUuX19uZXh0ID0gd3JpdGFibGVOZXh0U2libGluZy5fX2tleTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaSA9PT0gY29sbGFiQ2hpbGRyZW5MZW5ndGggLSAxKSB7XG4gICAgICAgICAgd3JpdGFibGVMZXhpY2FsTm9kZS5fX2xhc3QgPSBjaGlsZEtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdyaXRhYmxlTGV4aWNhbE5vZGUuX19zaXplKys7XG4gICAgICAgIHByZXZDaGlsZE5vZGUgPSBsZXhpY2FsQ2hpbGROb2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGV4aWNhbENoaWxkcmVuS2V5c0xlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsZXhpY2FsQ2hpbGRLZXkgPSBwcmV2TGV4aWNhbENoaWxkcmVuS2V5c1tpXTtcblxuICAgICAgaWYgKCF2aXNpdGVkS2V5cy5oYXMobGV4aWNhbENoaWxkS2V5KSkge1xuICAgICAgICAvLyBSZW1vdmVcbiAgICAgICAgY29uc3QgbGV4aWNhbENoaWxkTm9kZSA9ICRnZXROb2RlQnlLZXlPclRocm93KGxleGljYWxDaGlsZEtleSk7XG4gICAgICAgIGNvbnN0IGNvbGxhYk5vZGUgPSBiaW5kaW5nLmNvbGxhYk5vZGVNYXAuZ2V0KGxleGljYWxDaGlsZEtleSk7XG5cbiAgICAgICAgaWYgKGNvbGxhYk5vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbGxhYk5vZGUuZGVzdHJveShiaW5kaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbW92ZUZyb21QYXJlbnQobGV4aWNhbENoaWxkTm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3luY1Byb3BlcnRpZXNGcm9tTGV4aWNhbChiaW5kaW5nLCBuZXh0TGV4aWNhbE5vZGUsIHByZXZOb2RlTWFwKSB7XG4gICAgc3luY1Byb3BlcnRpZXNGcm9tTGV4aWNhbChiaW5kaW5nLCB0aGlzLl94bWxUZXh0LCB0aGlzLmdldFByZXZOb2RlKHByZXZOb2RlTWFwKSwgbmV4dExleGljYWxOb2RlKTtcbiAgfVxuXG4gIF9zeW5jQ2hpbGRGcm9tTGV4aWNhbChiaW5kaW5nLCBpbmRleCwga2V5LCBwcmV2Tm9kZU1hcCwgZGlydHlFbGVtZW50cywgZGlydHlMZWF2ZXMpIHtcbiAgICBjb25zdCBjaGlsZENvbGxhYk5vZGUgPSB0aGlzLl9jaGlsZHJlbltpbmRleF07IC8vIFVwZGF0ZVxuXG4gICAgY29uc3QgbmV4dENoaWxkTm9kZSA9ICRnZXROb2RlQnlLZXlPclRocm93KGtleSk7XG5cbiAgICBpZiAoY2hpbGRDb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiRWxlbWVudE5vZGUgJiYgbGV4aWNhbC4kaXNFbGVtZW50Tm9kZShuZXh0Q2hpbGROb2RlKSkge1xuICAgICAgY2hpbGRDb2xsYWJOb2RlLnN5bmNQcm9wZXJ0aWVzRnJvbUxleGljYWwoYmluZGluZywgbmV4dENoaWxkTm9kZSwgcHJldk5vZGVNYXApO1xuICAgICAgY2hpbGRDb2xsYWJOb2RlLnN5bmNDaGlsZHJlbkZyb21MZXhpY2FsKGJpbmRpbmcsIG5leHRDaGlsZE5vZGUsIHByZXZOb2RlTWFwLCBkaXJ0eUVsZW1lbnRzLCBkaXJ0eUxlYXZlcyk7XG4gICAgfSBlbHNlIGlmIChjaGlsZENvbGxhYk5vZGUgaW5zdGFuY2VvZiBDb2xsYWJUZXh0Tm9kZSAmJiBsZXhpY2FsLiRpc1RleHROb2RlKG5leHRDaGlsZE5vZGUpKSB7XG4gICAgICBjaGlsZENvbGxhYk5vZGUuc3luY1Byb3BlcnRpZXNBbmRUZXh0RnJvbUxleGljYWwoYmluZGluZywgbmV4dENoaWxkTm9kZSwgcHJldk5vZGVNYXApO1xuICAgIH0gZWxzZSBpZiAoY2hpbGRDb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiRGVjb3JhdG9yTm9kZSAmJiBsZXhpY2FsLiRpc0RlY29yYXRvck5vZGUobmV4dENoaWxkTm9kZSkpIHtcbiAgICAgIGNoaWxkQ29sbGFiTm9kZS5zeW5jUHJvcGVydGllc0Zyb21MZXhpY2FsKGJpbmRpbmcsIG5leHRDaGlsZE5vZGUsIHByZXZOb2RlTWFwKTtcbiAgICB9XG4gIH1cblxuICBzeW5jQ2hpbGRyZW5Gcm9tTGV4aWNhbChiaW5kaW5nLCBuZXh0TGV4aWNhbE5vZGUsIHByZXZOb2RlTWFwLCBkaXJ0eUVsZW1lbnRzLCBkaXJ0eUxlYXZlcykge1xuICAgIGNvbnN0IHByZXZMZXhpY2FsTm9kZSA9IHRoaXMuZ2V0UHJldk5vZGUocHJldk5vZGVNYXApO1xuICAgIGNvbnN0IHByZXZDaGlsZHJlbiA9IHByZXZMZXhpY2FsTm9kZSA9PT0gbnVsbCA/IFtdIDogY3JlYXRlQ2hpbGRyZW5BcnJheShwcmV2TGV4aWNhbE5vZGUsIHByZXZOb2RlTWFwKTtcbiAgICBjb25zdCBuZXh0Q2hpbGRyZW4gPSBjcmVhdGVDaGlsZHJlbkFycmF5KG5leHRMZXhpY2FsTm9kZSwgbnVsbCk7XG4gICAgY29uc3QgcHJldkVuZEluZGV4ID0gcHJldkNoaWxkcmVuLmxlbmd0aCAtIDE7XG4gICAgY29uc3QgbmV4dEVuZEluZGV4ID0gbmV4dENoaWxkcmVuLmxlbmd0aCAtIDE7XG4gICAgY29uc3QgY29sbGFiTm9kZU1hcCA9IGJpbmRpbmcuY29sbGFiTm9kZU1hcDtcbiAgICBsZXQgcHJldkNoaWxkcmVuU2V0O1xuICAgIGxldCBuZXh0Q2hpbGRyZW5TZXQ7XG4gICAgbGV0IHByZXZJbmRleCA9IDA7XG4gICAgbGV0IG5leHRJbmRleCA9IDA7XG5cbiAgICB3aGlsZSAocHJldkluZGV4IDw9IHByZXZFbmRJbmRleCAmJiBuZXh0SW5kZXggPD0gbmV4dEVuZEluZGV4KSB7XG4gICAgICBjb25zdCBwcmV2S2V5ID0gcHJldkNoaWxkcmVuW3ByZXZJbmRleF07XG4gICAgICBjb25zdCBuZXh0S2V5ID0gbmV4dENoaWxkcmVuW25leHRJbmRleF07XG5cbiAgICAgIGlmIChwcmV2S2V5ID09PSBuZXh0S2V5KSB7XG4gICAgICAgIC8vIE5vdmUgbW92ZSwgY3JlYXRlIG9yIHJlbW92ZVxuICAgICAgICB0aGlzLl9zeW5jQ2hpbGRGcm9tTGV4aWNhbChiaW5kaW5nLCBuZXh0SW5kZXgsIG5leHRLZXksIHByZXZOb2RlTWFwLCBkaXJ0eUVsZW1lbnRzLCBkaXJ0eUxlYXZlcyk7XG5cbiAgICAgICAgcHJldkluZGV4Kys7XG4gICAgICAgIG5leHRJbmRleCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlblNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcHJldkNoaWxkcmVuU2V0ID0gbmV3IFNldChwcmV2Q2hpbGRyZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRDaGlsZHJlblNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbmV4dENoaWxkcmVuU2V0ID0gbmV3IFNldChuZXh0Q2hpbGRyZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV4dEhhc1ByZXZLZXkgPSBuZXh0Q2hpbGRyZW5TZXQuaGFzKHByZXZLZXkpO1xuICAgICAgICBjb25zdCBwcmV2SGFzTmV4dEtleSA9IHByZXZDaGlsZHJlblNldC5oYXMobmV4dEtleSk7XG5cbiAgICAgICAgaWYgKCFuZXh0SGFzUHJldktleSkge1xuICAgICAgICAgIC8vIFJlbW92ZVxuICAgICAgICAgIHRoaXMuc3BsaWNlKGJpbmRpbmcsIG5leHRJbmRleCwgMSk7XG4gICAgICAgICAgcHJldkluZGV4Kys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQ3JlYXRlIG9yIHJlcGxhY2VcbiAgICAgICAgICBjb25zdCBuZXh0Q2hpbGROb2RlID0gJGdldE5vZGVCeUtleU9yVGhyb3cobmV4dEtleSk7XG4gICAgICAgICAgY29uc3QgY29sbGFiTm9kZSA9ICRjcmVhdGVDb2xsYWJOb2RlRnJvbUxleGljYWxOb2RlKGJpbmRpbmcsIG5leHRDaGlsZE5vZGUsIHRoaXMpO1xuICAgICAgICAgIGNvbGxhYk5vZGVNYXAuc2V0KG5leHRLZXksIGNvbGxhYk5vZGUpO1xuXG4gICAgICAgICAgaWYgKHByZXZIYXNOZXh0S2V5KSB7XG4gICAgICAgICAgICB0aGlzLnNwbGljZShiaW5kaW5nLCBuZXh0SW5kZXgsIDEsIGNvbGxhYk5vZGUpO1xuICAgICAgICAgICAgcHJldkluZGV4Kys7XG4gICAgICAgICAgICBuZXh0SW5kZXgrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zcGxpY2UoYmluZGluZywgbmV4dEluZGV4LCAwLCBjb2xsYWJOb2RlKTtcbiAgICAgICAgICAgIG5leHRJbmRleCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGFwcGVuZE5ld0NoaWxkcmVuID0gcHJldkluZGV4ID4gcHJldkVuZEluZGV4O1xuICAgIGNvbnN0IHJlbW92ZU9sZENoaWxkcmVuID0gbmV4dEluZGV4ID4gbmV4dEVuZEluZGV4O1xuXG4gICAgaWYgKGFwcGVuZE5ld0NoaWxkcmVuICYmICFyZW1vdmVPbGRDaGlsZHJlbikge1xuICAgICAgZm9yICg7IG5leHRJbmRleCA8PSBuZXh0RW5kSW5kZXg7ICsrbmV4dEluZGV4KSB7XG4gICAgICAgIGNvbnN0IGtleSA9IG5leHRDaGlsZHJlbltuZXh0SW5kZXhdO1xuICAgICAgICBjb25zdCBuZXh0Q2hpbGROb2RlID0gJGdldE5vZGVCeUtleU9yVGhyb3coa2V5KTtcbiAgICAgICAgY29uc3QgY29sbGFiTm9kZSA9ICRjcmVhdGVDb2xsYWJOb2RlRnJvbUxleGljYWxOb2RlKGJpbmRpbmcsIG5leHRDaGlsZE5vZGUsIHRoaXMpO1xuICAgICAgICB0aGlzLmFwcGVuZChjb2xsYWJOb2RlKTtcbiAgICAgICAgY29sbGFiTm9kZU1hcC5zZXQoa2V5LCBjb2xsYWJOb2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJlbW92ZU9sZENoaWxkcmVuICYmICFhcHBlbmROZXdDaGlsZHJlbikge1xuICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX2NoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gbmV4dEluZGV4OyBpLS0pIHtcbiAgICAgICAgdGhpcy5zcGxpY2UoYmluZGluZywgaSwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXBwZW5kKGNvbGxhYk5vZGUpIHtcbiAgICBjb25zdCB4bWxUZXh0ID0gdGhpcy5feG1sVGV4dDtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuX2NoaWxkcmVuO1xuICAgIGNvbnN0IGxhc3RDaGlsZCA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IG9mZnNldCA9IGxhc3RDaGlsZCAhPT0gdW5kZWZpbmVkID8gbGFzdENoaWxkLmdldE9mZnNldCgpICsgbGFzdENoaWxkLmdldFNpemUoKSA6IDA7XG5cbiAgICBpZiAoY29sbGFiTm9kZSBpbnN0YW5jZW9mIENvbGxhYkVsZW1lbnROb2RlKSB7XG4gICAgICB4bWxUZXh0Lmluc2VydEVtYmVkKG9mZnNldCwgY29sbGFiTm9kZS5feG1sVGV4dCk7XG4gICAgfSBlbHNlIGlmIChjb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiVGV4dE5vZGUpIHtcbiAgICAgIGNvbnN0IG1hcCA9IGNvbGxhYk5vZGUuX21hcDtcblxuICAgICAgaWYgKG1hcC5wYXJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgeG1sVGV4dC5pbnNlcnRFbWJlZChvZmZzZXQsIG1hcCk7XG4gICAgICB9XG5cbiAgICAgIHhtbFRleHQuaW5zZXJ0KG9mZnNldCArIDEsIGNvbGxhYk5vZGUuX3RleHQpO1xuICAgIH0gZWxzZSBpZiAoY29sbGFiTm9kZSBpbnN0YW5jZW9mIENvbGxhYkxpbmVCcmVha05vZGUpIHtcbiAgICAgIHhtbFRleHQuaW5zZXJ0RW1iZWQob2Zmc2V0LCBjb2xsYWJOb2RlLl9tYXApO1xuICAgIH0gZWxzZSBpZiAoY29sbGFiTm9kZSBpbnN0YW5jZW9mIENvbGxhYkRlY29yYXRvck5vZGUpIHtcbiAgICAgIHhtbFRleHQuaW5zZXJ0RW1iZWQob2Zmc2V0LCBjb2xsYWJOb2RlLl94bWxFbGVtKTtcbiAgICB9XG5cbiAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNvbGxhYk5vZGUpO1xuICB9XG5cbiAgc3BsaWNlKGJpbmRpbmcsIGluZGV4LCBkZWxDb3VudCwgY29sbGFiTm9kZSkge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG4gICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpbmRleF07XG5cbiAgICBpZiAoY2hpbGQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCEoY29sbGFiTm9kZSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICB0aHJvdyBFcnJvcihgc3BsaWNlOiBjb3VsZCBub3QgZmluZCBjb2xsYWIgZWxlbWVudCBub2RlYCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXBwZW5kKGNvbGxhYk5vZGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG9mZnNldCA9IGNoaWxkLmdldE9mZnNldCgpO1xuXG4gICAgaWYgKCEob2Zmc2V0ICE9PSAtMSkpIHtcbiAgICAgIHRocm93IEVycm9yKGBzcGxpY2U6IGV4cGVjdGVkIG9mZnNldCB0byBiZSBncmVhdGVyIHRoYW4gemVyb2ApO1xuICAgIH1cblxuICAgIGNvbnN0IHhtbFRleHQgPSB0aGlzLl94bWxUZXh0O1xuXG4gICAgaWYgKGRlbENvdW50ICE9PSAwKSB7XG4gICAgICAvLyBXaGF0IGlmIHdlIGRlbGV0ZSBtYW55IG5vZGVzLCBkb24ndCB3ZSBuZWVkIHRvIGdldCBhbGwgdGhlaXJcbiAgICAgIC8vIHNpemVzP1xuICAgICAgeG1sVGV4dC5kZWxldGUob2Zmc2V0LCBjaGlsZC5nZXRTaXplKCkpO1xuICAgIH1cblxuICAgIGlmIChjb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiRWxlbWVudE5vZGUpIHtcbiAgICAgIHhtbFRleHQuaW5zZXJ0RW1iZWQob2Zmc2V0LCBjb2xsYWJOb2RlLl94bWxUZXh0KTtcbiAgICB9IGVsc2UgaWYgKGNvbGxhYk5vZGUgaW5zdGFuY2VvZiBDb2xsYWJUZXh0Tm9kZSkge1xuICAgICAgY29uc3QgbWFwID0gY29sbGFiTm9kZS5fbWFwO1xuXG4gICAgICBpZiAobWFwLnBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgICB4bWxUZXh0Lmluc2VydEVtYmVkKG9mZnNldCwgbWFwKTtcbiAgICAgIH1cblxuICAgICAgeG1sVGV4dC5pbnNlcnQob2Zmc2V0ICsgMSwgY29sbGFiTm9kZS5fdGV4dCk7XG4gICAgfSBlbHNlIGlmIChjb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiTGluZUJyZWFrTm9kZSkge1xuICAgICAgeG1sVGV4dC5pbnNlcnRFbWJlZChvZmZzZXQsIGNvbGxhYk5vZGUuX21hcCk7XG4gICAgfSBlbHNlIGlmIChjb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiRGVjb3JhdG9yTm9kZSkge1xuICAgICAgeG1sVGV4dC5pbnNlcnRFbWJlZChvZmZzZXQsIGNvbGxhYk5vZGUuX3htbEVsZW0pO1xuICAgIH1cblxuICAgIGlmIChkZWxDb3VudCAhPT0gMCkge1xuICAgICAgY29uc3QgY2hpbGRyZW5Ub0RlbGV0ZSA9IGNoaWxkcmVuLnNsaWNlKGluZGV4LCBpbmRleCArIGRlbENvdW50KTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlblRvRGVsZXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoaWxkcmVuVG9EZWxldGVbaV0uZGVzdHJveShiaW5kaW5nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29sbGFiTm9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjaGlsZHJlbi5zcGxpY2UoaW5kZXgsIGRlbENvdW50LCBjb2xsYWJOb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGRyZW4uc3BsaWNlKGluZGV4LCBkZWxDb3VudCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q2hpbGRPZmZzZXQoY29sbGFiTm9kZSkge1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuXG4gICAgICBpZiAoY2hpbGQgPT09IGNvbGxhYk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICAgIH1cblxuICAgICAgb2Zmc2V0ICs9IGNoaWxkLmdldFNpemUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBkZXN0cm95KGJpbmRpbmcpIHtcbiAgICBjb25zdCBjb2xsYWJOb2RlTWFwID0gYmluZGluZy5jb2xsYWJOb2RlTWFwO1xuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW47XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZHJlbltpXS5kZXN0cm95KGJpbmRpbmcpO1xuICAgIH1cblxuICAgIGNvbGxhYk5vZGVNYXAuZGVsZXRlKHRoaXMuX2tleSk7XG4gIH1cblxufVxuZnVuY3Rpb24gJGNyZWF0ZUNvbGxhYkVsZW1lbnROb2RlKHhtbFRleHQsIHBhcmVudCwgdHlwZSkge1xuICBjb25zdCBjb2xsYWJOb2RlID0gbmV3IENvbGxhYkVsZW1lbnROb2RlKHhtbFRleHQsIHBhcmVudCwgdHlwZSk7IC8vIEB0cy1leHBlY3QtZXJyb3I6IGludGVybmFsIGZpZWxkXG5cbiAgeG1sVGV4dC5fY29sbGFiTm9kZSA9IGNvbGxhYk5vZGU7XG4gIHJldHVybiBjb2xsYWJOb2RlO1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5mdW5jdGlvbiBjcmVhdGVCaW5kaW5nKGVkaXRvciwgcHJvdmlkZXIsIGlkLCBkb2MsIGRvY01hcCkge1xuICBpZiAoIShkb2MgIT09IHVuZGVmaW5lZCAmJiBkb2MgIT09IG51bGwpKSB7XG4gICAgdGhyb3cgRXJyb3IoYGNyZWF0ZUJpbmRpbmc6IGRvYyBpcyBudWxsIG9yIHVuZGVmaW5lZGApO1xuICB9XG5cbiAgY29uc3Qgcm9vdFhtbFRleHQgPSBkb2MuZ2V0KCdyb290JywgeWpzLlhtbFRleHQpO1xuICBjb25zdCByb290ID0gJGNyZWF0ZUNvbGxhYkVsZW1lbnROb2RlKHJvb3RYbWxUZXh0LCBudWxsLCAncm9vdCcpO1xuICByb290Ll9rZXkgPSAncm9vdCc7XG4gIHJldHVybiB7XG4gICAgY2xpZW50SUQ6IGRvYy5jbGllbnRJRCxcbiAgICBjb2xsYWJOb2RlTWFwOiBuZXcgTWFwKCksXG4gICAgY3Vyc29yczogbmV3IE1hcCgpLFxuICAgIGN1cnNvcnNDb250YWluZXI6IG51bGwsXG4gICAgZG9jLFxuICAgIGRvY01hcCxcbiAgICBlZGl0b3IsXG4gICAgaWQsXG4gICAgbm9kZVByb3BlcnRpZXM6IG5ldyBNYXAoKSxcbiAgICByb290XG4gIH07XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUmVsYXRpdmVQb3NpdGlvbihwb2ludCwgYmluZGluZykge1xuICBjb25zdCBjb2xsYWJOb2RlTWFwID0gYmluZGluZy5jb2xsYWJOb2RlTWFwO1xuICBjb25zdCBjb2xsYWJOb2RlID0gY29sbGFiTm9kZU1hcC5nZXQocG9pbnQua2V5KTtcblxuICBpZiAoY29sbGFiTm9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgb2Zmc2V0ID0gcG9pbnQub2Zmc2V0O1xuICBsZXQgc2hhcmVkVHlwZSA9IGNvbGxhYk5vZGUuZ2V0U2hhcmVkVHlwZSgpO1xuXG4gIGlmIChjb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiVGV4dE5vZGUpIHtcbiAgICBzaGFyZWRUeXBlID0gY29sbGFiTm9kZS5fcGFyZW50Ll94bWxUZXh0O1xuICAgIGNvbnN0IGN1cnJlbnRPZmZzZXQgPSBjb2xsYWJOb2RlLmdldE9mZnNldCgpO1xuXG4gICAgaWYgKGN1cnJlbnRPZmZzZXQgPT09IC0xKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBvZmZzZXQgPSBjdXJyZW50T2Zmc2V0ICsgMSArIG9mZnNldDtcbiAgfSBlbHNlIGlmIChjb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiRWxlbWVudE5vZGUgJiYgcG9pbnQudHlwZSA9PT0gJ2VsZW1lbnQnKSB7XG4gICAgY29uc3QgcGFyZW50ID0gcG9pbnQuZ2V0Tm9kZSgpO1xuICAgIGxldCBhY2N1bXVsYXRlZE9mZnNldCA9IDA7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBub2RlID0gcGFyZW50LmdldEZpcnN0Q2hpbGQoKTtcblxuICAgIHdoaWxlIChub2RlICE9PSBudWxsICYmIGkrKyA8IG9mZnNldCkge1xuICAgICAgaWYgKGxleGljYWwuJGlzVGV4dE5vZGUobm9kZSkpIHtcbiAgICAgICAgYWNjdW11bGF0ZWRPZmZzZXQgKz0gbm9kZS5nZXRUZXh0Q29udGVudFNpemUoKSArIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY2N1bXVsYXRlZE9mZnNldCsrO1xuICAgICAgfVxuXG4gICAgICBub2RlID0gbm9kZS5nZXROZXh0U2libGluZygpO1xuICAgIH1cblxuICAgIG9mZnNldCA9IGFjY3VtdWxhdGVkT2Zmc2V0O1xuICB9XG5cbiAgcmV0dXJuIHlqcy5jcmVhdGVSZWxhdGl2ZVBvc2l0aW9uRnJvbVR5cGVJbmRleChzaGFyZWRUeXBlLCBvZmZzZXQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBYnNvbHV0ZVBvc2l0aW9uKHJlbGF0aXZlUG9zaXRpb24sIGJpbmRpbmcpIHtcbiAgcmV0dXJuIHlqcy5jcmVhdGVBYnNvbHV0ZVBvc2l0aW9uRnJvbVJlbGF0aXZlUG9zaXRpb24ocmVsYXRpdmVQb3NpdGlvbiwgYmluZGluZy5kb2MpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVQb3NpdGlvbihjdXJyZW50UG9zLCBwb3MpIHtcbiAgaWYgKGN1cnJlbnRQb3MgPT0gbnVsbCkge1xuICAgIGlmIChwb3MgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBvcyA9PSBudWxsIHx8ICF5anMuY29tcGFyZVJlbGF0aXZlUG9zaXRpb25zKGN1cnJlbnRQb3MsIHBvcykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ3Vyc29yKG5hbWUsIGNvbG9yKSB7XG4gIHJldHVybiB7XG4gICAgY29sb3I6IGNvbG9yLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgc2VsZWN0aW9uOiBudWxsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3lTZWxlY3Rpb24oYmluZGluZywgc2VsZWN0aW9uKSB7XG4gIGNvbnN0IGN1cnNvcnNDb250YWluZXIgPSBiaW5kaW5nLmN1cnNvcnNDb250YWluZXI7XG5cbiAgaWYgKGN1cnNvcnNDb250YWluZXIgIT09IG51bGwpIHtcbiAgICBjb25zdCBzZWxlY3Rpb25zID0gc2VsZWN0aW9uLnNlbGVjdGlvbnM7XG4gICAgY29uc3Qgc2VsZWN0aW9uc0xlbmd0aCA9IHNlbGVjdGlvbnMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Rpb25zTGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1cnNvcnNDb250YWluZXIucmVtb3ZlQ2hpbGQoc2VsZWN0aW9uc1tpXSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3lDdXJzb3IoYmluZGluZywgY3Vyc29yKSB7XG4gIGNvbnN0IHNlbGVjdGlvbiA9IGN1cnNvci5zZWxlY3Rpb247XG5cbiAgaWYgKHNlbGVjdGlvbiAhPT0gbnVsbCkge1xuICAgIGRlc3Ryb3lTZWxlY3Rpb24oYmluZGluZywgc2VsZWN0aW9uKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDdXJzb3JTZWxlY3Rpb24oY3Vyc29yLCBhbmNob3JLZXksIGFuY2hvck9mZnNldCwgZm9jdXNLZXksIGZvY3VzT2Zmc2V0KSB7XG4gIGNvbnN0IGNvbG9yID0gY3Vyc29yLmNvbG9yO1xuICBjb25zdCBjYXJldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgY2FyZXQuc3R5bGUuY3NzVGV4dCA9IGBwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtyaWdodDotMXB4O3dpZHRoOjFweDtiYWNrZ3JvdW5kLWNvbG9yOiR7Y29sb3J9O3otaW5kZXg6MTA7YDtcbiAgY29uc3QgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgbmFtZS50ZXh0Q29udGVudCA9IGN1cnNvci5uYW1lO1xuICBuYW1lLnN0eWxlLmNzc1RleHQgPSBgcG9zaXRpb246YWJzb2x1dGU7bGVmdDotMnB4O3RvcDotMTZweDtiYWNrZ3JvdW5kLWNvbG9yOiR7Y29sb3J9O2NvbG9yOiNmZmY7bGluZS1oZWlnaHQ6MTJweDtmb250LXNpemU6MTJweDtwYWRkaW5nOjJweDtmb250LWZhbWlseTpBcmlhbDtmb250LXdlaWdodDpib2xkO3doaXRlLXNwYWNlOm5vd3JhcDtgO1xuICBjYXJldC5hcHBlbmRDaGlsZChuYW1lKTtcbiAgcmV0dXJuIHtcbiAgICBhbmNob3I6IHtcbiAgICAgIGtleTogYW5jaG9yS2V5LFxuICAgICAgb2Zmc2V0OiBhbmNob3JPZmZzZXRcbiAgICB9LFxuICAgIGNhcmV0LFxuICAgIGNvbG9yLFxuICAgIGZvY3VzOiB7XG4gICAgICBrZXk6IGZvY3VzS2V5LFxuICAgICAgb2Zmc2V0OiBmb2N1c09mZnNldFxuICAgIH0sXG4gICAgbmFtZSxcbiAgICBzZWxlY3Rpb25zOiBbXVxuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDdXJzb3IoYmluZGluZywgY3Vyc29yLCBuZXh0U2VsZWN0aW9uLCBub2RlTWFwKSB7XG4gIGNvbnN0IGVkaXRvciA9IGJpbmRpbmcuZWRpdG9yO1xuICBjb25zdCByb290RWxlbWVudCA9IGVkaXRvci5nZXRSb290RWxlbWVudCgpO1xuICBjb25zdCBjdXJzb3JzQ29udGFpbmVyID0gYmluZGluZy5jdXJzb3JzQ29udGFpbmVyO1xuXG4gIGlmIChjdXJzb3JzQ29udGFpbmVyID09PSBudWxsIHx8IHJvb3RFbGVtZW50ID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgY3Vyc29yc0NvbnRhaW5lck9mZnNldFBhcmVudCA9IGN1cnNvcnNDb250YWluZXIub2Zmc2V0UGFyZW50O1xuXG4gIGlmIChjdXJzb3JzQ29udGFpbmVyT2Zmc2V0UGFyZW50ID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgY29udGFpbmVyUmVjdCA9IGN1cnNvcnNDb250YWluZXJPZmZzZXRQYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHByZXZTZWxlY3Rpb24gPSBjdXJzb3Iuc2VsZWN0aW9uO1xuXG4gIGlmIChuZXh0U2VsZWN0aW9uID09PSBudWxsKSB7XG4gICAgaWYgKHByZXZTZWxlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3Vyc29yLnNlbGVjdGlvbiA9IG51bGw7XG4gICAgICBkZXN0cm95U2VsZWN0aW9uKGJpbmRpbmcsIHByZXZTZWxlY3Rpb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjdXJzb3Iuc2VsZWN0aW9uID0gbmV4dFNlbGVjdGlvbjtcbiAgfVxuXG4gIGNvbnN0IGNhcmV0ID0gbmV4dFNlbGVjdGlvbi5jYXJldDtcbiAgY29uc3QgY29sb3IgPSBuZXh0U2VsZWN0aW9uLmNvbG9yO1xuICBjb25zdCBzZWxlY3Rpb25zID0gbmV4dFNlbGVjdGlvbi5zZWxlY3Rpb25zO1xuICBjb25zdCBhbmNob3IgPSBuZXh0U2VsZWN0aW9uLmFuY2hvcjtcbiAgY29uc3QgZm9jdXMgPSBuZXh0U2VsZWN0aW9uLmZvY3VzO1xuICBjb25zdCBhbmNob3JLZXkgPSBhbmNob3Iua2V5O1xuICBjb25zdCBmb2N1c0tleSA9IGZvY3VzLmtleTtcbiAgY29uc3QgYW5jaG9yTm9kZSA9IG5vZGVNYXAuZ2V0KGFuY2hvcktleSk7XG4gIGNvbnN0IGZvY3VzTm9kZSA9IG5vZGVNYXAuZ2V0KGZvY3VzS2V5KTtcblxuICBpZiAoYW5jaG9yTm9kZSA9PSBudWxsIHx8IGZvY3VzTm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHNlbGVjdGlvblJlY3RzOyAvLyBJbiB0aGUgY2FzZSBvZiBhIGNvbGxhcHNlZCBzZWxlY3Rpb24gb24gYSBsaW5lYnJlYWssIHdlIG5lZWRcbiAgLy8gdG8gaW1wcm92aXNlIGFzIHRoZSBicm93c2VyIHdpbGwgcmV0dXJuIG5vdGhpbmcgaGVyZSBhcyA8YnI+XG4gIC8vIGFwcGFyYW50bHkgdGFrZSB1cCBubyB2aXN1YWwgc3BhY2UgOi9cbiAgLy8gVGhpcyB3b24ndCB3b3JrIGluIGFsbCBjYXNlcywgYnV0IGl0J3MgYmV0dGVyIHRoYW4ganVzdCBzaG93aW5nXG4gIC8vIG5vdGhpbmcgYWxsIHRoZSB0aW1lLlxuXG4gIGlmIChhbmNob3JOb2RlID09PSBmb2N1c05vZGUgJiYgbGV4aWNhbC4kaXNMaW5lQnJlYWtOb2RlKGFuY2hvck5vZGUpKSB7XG4gICAgY29uc3QgYnJSZWN0ID0gZWRpdG9yLmdldEVsZW1lbnRCeUtleShhbmNob3JLZXkpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHNlbGVjdGlvblJlY3RzID0gW2JyUmVjdF07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcmFuZ2UgPSBzZWxlY3Rpb24uY3JlYXRlRE9NUmFuZ2UoZWRpdG9yLCBhbmNob3JOb2RlLCBhbmNob3Iub2Zmc2V0LCBmb2N1c05vZGUsIGZvY3VzLm9mZnNldCk7XG5cbiAgICBpZiAocmFuZ2UgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWxlY3Rpb25SZWN0cyA9IHNlbGVjdGlvbi5jcmVhdGVSZWN0c0Zyb21ET01SYW5nZShlZGl0b3IsIHJhbmdlKTtcbiAgfVxuXG4gIGNvbnN0IHNlbGVjdGlvbnNMZW5ndGggPSBzZWxlY3Rpb25zLmxlbmd0aDtcbiAgY29uc3Qgc2VsZWN0aW9uUmVjdHNMZW5ndGggPSBzZWxlY3Rpb25SZWN0cy5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Rpb25SZWN0c0xlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2VsZWN0aW9uUmVjdCA9IHNlbGVjdGlvblJlY3RzW2ldO1xuICAgIGxldCBzZWxlY3Rpb24gPSBzZWxlY3Rpb25zW2ldO1xuXG4gICAgaWYgKHNlbGVjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZWxlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICBzZWxlY3Rpb25zW2ldID0gc2VsZWN0aW9uO1xuICAgICAgY29uc3Qgc2VsZWN0aW9uQmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICBzZWxlY3Rpb24uYXBwZW5kQ2hpbGQoc2VsZWN0aW9uQmcpO1xuICAgICAgY3Vyc29yc0NvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxlY3Rpb24pO1xuICAgIH1cblxuICAgIGNvbnN0IHRvcCA9IHNlbGVjdGlvblJlY3QudG9wIC0gY29udGFpbmVyUmVjdC50b3A7XG4gICAgY29uc3QgbGVmdCA9IHNlbGVjdGlvblJlY3QubGVmdCAtIGNvbnRhaW5lclJlY3QubGVmdDtcbiAgICBjb25zdCBzdHlsZSA9IGBwb3NpdGlvbjphYnNvbHV0ZTt0b3A6JHt0b3B9cHg7bGVmdDoke2xlZnR9cHg7aGVpZ2h0OiR7c2VsZWN0aW9uUmVjdC5oZWlnaHR9cHg7d2lkdGg6JHtzZWxlY3Rpb25SZWN0LndpZHRofXB4O3BvaW50ZXItZXZlbnRzOm5vbmU7ei1pbmRleDo1O2A7XG4gICAgc2VsZWN0aW9uLnN0eWxlLmNzc1RleHQgPSBzdHlsZTtcbiAgICBzZWxlY3Rpb24uZmlyc3RDaGlsZC5zdHlsZS5jc3NUZXh0ID0gYCR7c3R5bGV9bGVmdDowO3RvcDowO2JhY2tncm91bmQtY29sb3I6JHtjb2xvcn07b3BhY2l0eTowLjM7YDtcblxuICAgIGlmIChpID09PSBzZWxlY3Rpb25SZWN0c0xlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChjYXJldC5wYXJlbnROb2RlICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgICAgc2VsZWN0aW9uLmFwcGVuZENoaWxkKGNhcmV0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gc2VsZWN0aW9uc0xlbmd0aCAtIDE7IGkgPj0gc2VsZWN0aW9uUmVjdHNMZW5ndGg7IGktLSkge1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9IHNlbGVjdGlvbnNbaV07XG4gICAgY3Vyc29yc0NvbnRhaW5lci5yZW1vdmVDaGlsZChzZWxlY3Rpb24pO1xuICAgIHNlbGVjdGlvbnMucG9wKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3luY0xvY2FsQ3Vyc29yUG9zaXRpb24oYmluZGluZywgcHJvdmlkZXIpIHtcbiAgY29uc3QgYXdhcmVuZXNzID0gcHJvdmlkZXIuYXdhcmVuZXNzO1xuICBjb25zdCBsb2NhbFN0YXRlID0gYXdhcmVuZXNzLmdldExvY2FsU3RhdGUoKTtcblxuICBpZiAobG9jYWxTdGF0ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGFuY2hvclBvcyA9IGxvY2FsU3RhdGUuYW5jaG9yUG9zO1xuICBjb25zdCBmb2N1c1BvcyA9IGxvY2FsU3RhdGUuZm9jdXNQb3M7XG5cbiAgaWYgKGFuY2hvclBvcyAhPT0gbnVsbCAmJiBmb2N1c1BvcyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IGFuY2hvckFic1BvcyA9IGNyZWF0ZUFic29sdXRlUG9zaXRpb24oYW5jaG9yUG9zLCBiaW5kaW5nKTtcbiAgICBjb25zdCBmb2N1c0Fic1BvcyA9IGNyZWF0ZUFic29sdXRlUG9zaXRpb24oZm9jdXNQb3MsIGJpbmRpbmcpO1xuXG4gICAgaWYgKGFuY2hvckFic1BvcyAhPT0gbnVsbCAmJiBmb2N1c0Fic1BvcyAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgW2FuY2hvckNvbGxhYk5vZGUsIGFuY2hvck9mZnNldF0gPSBnZXRDb2xsYWJOb2RlQW5kT2Zmc2V0KGFuY2hvckFic1Bvcy50eXBlLCBhbmNob3JBYnNQb3MuaW5kZXgpO1xuICAgICAgY29uc3QgW2ZvY3VzQ29sbGFiTm9kZSwgZm9jdXNPZmZzZXRdID0gZ2V0Q29sbGFiTm9kZUFuZE9mZnNldChmb2N1c0Fic1Bvcy50eXBlLCBmb2N1c0Fic1Bvcy5pbmRleCk7XG5cbiAgICAgIGlmIChhbmNob3JDb2xsYWJOb2RlICE9PSBudWxsICYmIGZvY3VzQ29sbGFiTm9kZSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBhbmNob3JLZXkgPSBhbmNob3JDb2xsYWJOb2RlLmdldEtleSgpO1xuICAgICAgICBjb25zdCBmb2N1c0tleSA9IGZvY3VzQ29sbGFiTm9kZS5nZXRLZXkoKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gbGV4aWNhbC4kZ2V0U2VsZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKCFsZXhpY2FsLiRpc1JhbmdlU2VsZWN0aW9uKHNlbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhbmNob3IgPSBzZWxlY3Rpb24uYW5jaG9yO1xuICAgICAgICBjb25zdCBmb2N1cyA9IHNlbGVjdGlvbi5mb2N1cztcbiAgICAgICAgc2V0UG9pbnQoYW5jaG9yLCBhbmNob3JLZXksIGFuY2hvck9mZnNldCk7XG4gICAgICAgIHNldFBvaW50KGZvY3VzLCBmb2N1c0tleSwgZm9jdXNPZmZzZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRQb2ludChwb2ludCwga2V5LCBvZmZzZXQpIHtcbiAgaWYgKHBvaW50LmtleSAhPT0ga2V5IHx8IHBvaW50Lm9mZnNldCAhPT0gb2Zmc2V0KSB7XG4gICAgbGV0IGFuY2hvck5vZGUgPSBsZXhpY2FsLiRnZXROb2RlQnlLZXkoa2V5KTtcblxuICAgIGlmIChhbmNob3JOb2RlICE9PSBudWxsICYmICFsZXhpY2FsLiRpc0VsZW1lbnROb2RlKGFuY2hvck5vZGUpICYmICFsZXhpY2FsLiRpc1RleHROb2RlKGFuY2hvck5vZGUpKSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBhbmNob3JOb2RlLmdldFBhcmVudE9yVGhyb3coKTtcbiAgICAgIGtleSA9IHBhcmVudC5nZXRLZXkoKTtcbiAgICAgIG9mZnNldCA9IGFuY2hvck5vZGUuZ2V0SW5kZXhXaXRoaW5QYXJlbnQoKTtcbiAgICAgIGFuY2hvck5vZGUgPSBwYXJlbnQ7XG4gICAgfVxuXG4gICAgcG9pbnQuc2V0KGtleSwgb2Zmc2V0LCBsZXhpY2FsLiRpc0VsZW1lbnROb2RlKGFuY2hvck5vZGUpID8gJ2VsZW1lbnQnIDogJ3RleHQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDb2xsYWJOb2RlQW5kT2Zmc2V0KCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuc2hhcmVkVHlwZSwgb2Zmc2V0KSB7XG4gIGNvbnN0IGNvbGxhYk5vZGUgPSBzaGFyZWRUeXBlLl9jb2xsYWJOb2RlO1xuXG4gIGlmIChjb2xsYWJOb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gW251bGwsIDBdO1xuICB9XG5cbiAgaWYgKGNvbGxhYk5vZGUgaW5zdGFuY2VvZiBDb2xsYWJFbGVtZW50Tm9kZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIG5vZGUsXG4gICAgICBvZmZzZXQ6IGNvbGxhYk5vZGVPZmZzZXRcbiAgICB9ID0gZ2V0UG9zaXRpb25Gcm9tRWxlbWVudEFuZE9mZnNldChjb2xsYWJOb2RlLCBvZmZzZXQsIHRydWUpO1xuXG4gICAgaWYgKG5vZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBbY29sbGFiTm9kZSwgMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbbm9kZSwgY29sbGFiTm9kZU9mZnNldF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtudWxsLCAwXTtcbn1cblxuZnVuY3Rpb24gc3luY0N1cnNvclBvc2l0aW9ucyhiaW5kaW5nLCBwcm92aWRlcikge1xuICBjb25zdCBhd2FyZW5lc3NTdGF0ZXMgPSBBcnJheS5mcm9tKHByb3ZpZGVyLmF3YXJlbmVzcy5nZXRTdGF0ZXMoKSk7XG4gIGNvbnN0IGxvY2FsQ2xpZW50SUQgPSBiaW5kaW5nLmNsaWVudElEO1xuICBjb25zdCBjdXJzb3JzID0gYmluZGluZy5jdXJzb3JzO1xuICBjb25zdCBlZGl0b3IgPSBiaW5kaW5nLmVkaXRvcjtcbiAgY29uc3Qgbm9kZU1hcCA9IGVkaXRvci5fZWRpdG9yU3RhdGUuX25vZGVNYXA7XG4gIGNvbnN0IHZpc2l0ZWRDbGllbnRJRHMgPSBuZXcgU2V0KCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhd2FyZW5lc3NTdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhd2FyZW5lc3NTdGF0ZSA9IGF3YXJlbmVzc1N0YXRlc1tpXTtcbiAgICBjb25zdCBbY2xpZW50SUQsIGF3YXJlbmVzc10gPSBhd2FyZW5lc3NTdGF0ZTtcblxuICAgIGlmIChjbGllbnRJRCAhPT0gbG9jYWxDbGllbnRJRCkge1xuICAgICAgdmlzaXRlZENsaWVudElEcy5hZGQoY2xpZW50SUQpO1xuICAgICAgY29uc3Qge1xuICAgICAgICBhbmNob3JQb3MsXG4gICAgICAgIGZvY3VzUG9zLFxuICAgICAgICBuYW1lLFxuICAgICAgICBjb2xvcixcbiAgICAgICAgZm9jdXNpbmdcbiAgICAgIH0gPSBhd2FyZW5lc3M7XG4gICAgICBsZXQgc2VsZWN0aW9uID0gbnVsbDtcbiAgICAgIGxldCBjdXJzb3IgPSBjdXJzb3JzLmdldChjbGllbnRJRCk7XG5cbiAgICAgIGlmIChjdXJzb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdXJzb3IgPSBjcmVhdGVDdXJzb3IobmFtZSwgY29sb3IpO1xuICAgICAgICBjdXJzb3JzLnNldChjbGllbnRJRCwgY3Vyc29yKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuY2hvclBvcyAhPT0gbnVsbCAmJiBmb2N1c1BvcyAhPT0gbnVsbCAmJiBmb2N1c2luZykge1xuICAgICAgICBjb25zdCBhbmNob3JBYnNQb3MgPSBjcmVhdGVBYnNvbHV0ZVBvc2l0aW9uKGFuY2hvclBvcywgYmluZGluZyk7XG4gICAgICAgIGNvbnN0IGZvY3VzQWJzUG9zID0gY3JlYXRlQWJzb2x1dGVQb3NpdGlvbihmb2N1c1BvcywgYmluZGluZyk7XG5cbiAgICAgICAgaWYgKGFuY2hvckFic1BvcyAhPT0gbnVsbCAmJiBmb2N1c0Fic1BvcyAhPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnN0IFthbmNob3JDb2xsYWJOb2RlLCBhbmNob3JPZmZzZXRdID0gZ2V0Q29sbGFiTm9kZUFuZE9mZnNldChhbmNob3JBYnNQb3MudHlwZSwgYW5jaG9yQWJzUG9zLmluZGV4KTtcbiAgICAgICAgICBjb25zdCBbZm9jdXNDb2xsYWJOb2RlLCBmb2N1c09mZnNldF0gPSBnZXRDb2xsYWJOb2RlQW5kT2Zmc2V0KGZvY3VzQWJzUG9zLnR5cGUsIGZvY3VzQWJzUG9zLmluZGV4KTtcblxuICAgICAgICAgIGlmIChhbmNob3JDb2xsYWJOb2RlICE9PSBudWxsICYmIGZvY3VzQ29sbGFiTm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgYW5jaG9yS2V5ID0gYW5jaG9yQ29sbGFiTm9kZS5nZXRLZXkoKTtcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzS2V5ID0gZm9jdXNDb2xsYWJOb2RlLmdldEtleSgpO1xuICAgICAgICAgICAgc2VsZWN0aW9uID0gY3Vyc29yLnNlbGVjdGlvbjtcblxuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICBzZWxlY3Rpb24gPSBjcmVhdGVDdXJzb3JTZWxlY3Rpb24oY3Vyc29yLCBhbmNob3JLZXksIGFuY2hvck9mZnNldCwgZm9jdXNLZXksIGZvY3VzT2Zmc2V0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IHNlbGVjdGlvbi5hbmNob3I7XG4gICAgICAgICAgICAgIGNvbnN0IGZvY3VzID0gc2VsZWN0aW9uLmZvY3VzO1xuICAgICAgICAgICAgICBhbmNob3Iua2V5ID0gYW5jaG9yS2V5O1xuICAgICAgICAgICAgICBhbmNob3Iub2Zmc2V0ID0gYW5jaG9yT2Zmc2V0O1xuICAgICAgICAgICAgICBmb2N1cy5rZXkgPSBmb2N1c0tleTtcbiAgICAgICAgICAgICAgZm9jdXMub2Zmc2V0ID0gZm9jdXNPZmZzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZUN1cnNvcihiaW5kaW5nLCBjdXJzb3IsIHNlbGVjdGlvbiwgbm9kZU1hcCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgYWxsQ2xpZW50SURzID0gQXJyYXkuZnJvbShjdXJzb3JzLmtleXMoKSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxDbGllbnRJRHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjbGllbnRJRCA9IGFsbENsaWVudElEc1tpXTtcblxuICAgIGlmICghdmlzaXRlZENsaWVudElEcy5oYXMoY2xpZW50SUQpKSB7XG4gICAgICBjb25zdCBjdXJzb3IgPSBjdXJzb3JzLmdldChjbGllbnRJRCk7XG5cbiAgICAgIGlmIChjdXJzb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZXN0cm95Q3Vyc29yKGJpbmRpbmcsIGN1cnNvcik7XG4gICAgICAgIGN1cnNvcnMuZGVsZXRlKGNsaWVudElEKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHN5bmNMZXhpY2FsU2VsZWN0aW9uVG9ZanMoYmluZGluZywgcHJvdmlkZXIsIHByZXZTZWxlY3Rpb24sIG5leHRTZWxlY3Rpb24pIHtcbiAgY29uc3QgYXdhcmVuZXNzID0gcHJvdmlkZXIuYXdhcmVuZXNzO1xuICBjb25zdCBsb2NhbFN0YXRlID0gYXdhcmVuZXNzLmdldExvY2FsU3RhdGUoKTtcblxuICBpZiAobG9jYWxTdGF0ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBhbmNob3JQb3M6IGN1cnJlbnRBbmNob3JQb3MsXG4gICAgZm9jdXNQb3M6IGN1cnJlbnRGb2N1c1BvcyxcbiAgICBuYW1lLFxuICAgIGNvbG9yLFxuICAgIGZvY3VzaW5nXG4gIH0gPSBsb2NhbFN0YXRlO1xuICBsZXQgYW5jaG9yUG9zID0gbnVsbDtcbiAgbGV0IGZvY3VzUG9zID0gbnVsbDtcblxuICBpZiAobmV4dFNlbGVjdGlvbiA9PT0gbnVsbCB8fCBjdXJyZW50QW5jaG9yUG9zICE9PSBudWxsICYmICFuZXh0U2VsZWN0aW9uLmlzKHByZXZTZWxlY3Rpb24pKSB7XG4gICAgaWYgKHByZXZTZWxlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAobGV4aWNhbC4kaXNSYW5nZVNlbGVjdGlvbihuZXh0U2VsZWN0aW9uKSkge1xuICAgIGFuY2hvclBvcyA9IGNyZWF0ZVJlbGF0aXZlUG9zaXRpb24obmV4dFNlbGVjdGlvbi5hbmNob3IsIGJpbmRpbmcpO1xuICAgIGZvY3VzUG9zID0gY3JlYXRlUmVsYXRpdmVQb3NpdGlvbihuZXh0U2VsZWN0aW9uLmZvY3VzLCBiaW5kaW5nKTtcbiAgfVxuXG4gIGlmIChzaG91bGRVcGRhdGVQb3NpdGlvbihjdXJyZW50QW5jaG9yUG9zLCBhbmNob3JQb3MpIHx8IHNob3VsZFVwZGF0ZVBvc2l0aW9uKGN1cnJlbnRGb2N1c1BvcywgZm9jdXNQb3MpKSB7XG4gICAgYXdhcmVuZXNzLnNldExvY2FsU3RhdGUoe1xuICAgICAgYW5jaG9yUG9zLFxuICAgICAgY29sb3IsXG4gICAgICBmb2N1c1BvcyxcbiAgICAgIGZvY3VzaW5nLFxuICAgICAgbmFtZVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gc3luY0V2ZW50KGJpbmRpbmcsIGV2ZW50KSB7XG4gIGNvbnN0IHtcbiAgICB0YXJnZXRcbiAgfSA9IGV2ZW50O1xuICBjb25zdCBjb2xsYWJOb2RlID0gZ2V0T3JJbml0Q29sbGFiTm9kZUZyb21TaGFyZWRUeXBlKGJpbmRpbmcsIHRhcmdldCk7XG5cbiAgaWYgKGNvbGxhYk5vZGUgaW5zdGFuY2VvZiBDb2xsYWJFbGVtZW50Tm9kZSAmJiBldmVudCBpbnN0YW5jZW9mIHlqcy5ZVGV4dEV2ZW50KSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBuZWVkIHRvIGFjY2VzcyB0aGUgcHJpdmF0ZSBwcm9wZXJ0eSBvZiB0aGUgY2xhc3NcbiAgICBjb25zdCB7XG4gICAgICBrZXlzQ2hhbmdlZCxcbiAgICAgIGNoaWxkTGlzdENoYW5nZWQsXG4gICAgICBkZWx0YVxuICAgIH0gPSBldmVudDsgLy8gVXBkYXRlXG5cbiAgICBpZiAoa2V5c0NoYW5nZWQuc2l6ZSA+IDApIHtcbiAgICAgIGNvbGxhYk5vZGUuc3luY1Byb3BlcnRpZXNGcm9tWWpzKGJpbmRpbmcsIGtleXNDaGFuZ2VkKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGRMaXN0Q2hhbmdlZCkge1xuICAgICAgY29sbGFiTm9kZS5hcHBseUNoaWxkcmVuWWpzRGVsdGEoYmluZGluZywgZGVsdGEpO1xuICAgICAgY29sbGFiTm9kZS5zeW5jQ2hpbGRyZW5Gcm9tWWpzKGJpbmRpbmcpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiVGV4dE5vZGUgJiYgZXZlbnQgaW5zdGFuY2VvZiB5anMuWU1hcEV2ZW50KSB7XG4gICAgY29uc3Qge1xuICAgICAga2V5c0NoYW5nZWRcbiAgICB9ID0gZXZlbnQ7IC8vIFVwZGF0ZVxuXG4gICAgaWYgKGtleXNDaGFuZ2VkLnNpemUgPiAwKSB7XG4gICAgICBjb2xsYWJOb2RlLnN5bmNQcm9wZXJ0aWVzQW5kVGV4dEZyb21ZanMoYmluZGluZywga2V5c0NoYW5nZWQpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiRGVjb3JhdG9yTm9kZSAmJiBldmVudCBpbnN0YW5jZW9mIHlqcy5ZWG1sRXZlbnQpIHtcbiAgICBjb25zdCB7XG4gICAgICBhdHRyaWJ1dGVzQ2hhbmdlZFxuICAgIH0gPSBldmVudDsgLy8gVXBkYXRlXG5cbiAgICBpZiAoYXR0cmlidXRlc0NoYW5nZWQuc2l6ZSA+IDApIHtcbiAgICAgIGNvbGxhYk5vZGUuc3luY1Byb3BlcnRpZXNGcm9tWWpzKGJpbmRpbmcsIGF0dHJpYnV0ZXNDaGFuZ2VkKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAge1xuICAgICAgdGhyb3cgRXJyb3IoYEV4cGVjdGVkIHRleHQsIGVsZW1lbnQsIG9yIGRlY29yYXRvciBldmVudGApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzeW5jWWpzQ2hhbmdlc1RvTGV4aWNhbChiaW5kaW5nLCBwcm92aWRlciwgZXZlbnRzLCBpc0Zyb21VbmRvTWFuZ2VyKSB7XG4gIGNvbnN0IGVkaXRvciA9IGJpbmRpbmcuZWRpdG9yO1xuICBjb25zdCBjdXJyZW50RWRpdG9yU3RhdGUgPSBlZGl0b3IuX2VkaXRvclN0YXRlO1xuICBlZGl0b3IudXBkYXRlKCgpID0+IHtcbiAgICBjb25zdCBwZW5kaW5nRWRpdG9yU3RhdGUgPSBlZGl0b3IuX3BlbmRpbmdFZGl0b3JTdGF0ZTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBldmVudCA9IGV2ZW50c1tpXTtcbiAgICAgIHN5bmNFdmVudChiaW5kaW5nLCBldmVudCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VsZWN0aW9uID0gbGV4aWNhbC4kZ2V0U2VsZWN0aW9uKCk7XG5cbiAgICBpZiAobGV4aWNhbC4kaXNSYW5nZVNlbGVjdGlvbihzZWxlY3Rpb24pKSB7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgWWpzJ3MgY3Vyc29yIHBvc2l0aW9uIGhlcmUsIGFzIGl0IGRvZXNuJ3QgYWx3YXlzXG4gICAgICAvLyBoYW5kbGUgc2VsZWN0aW9uIHJlY292ZXJ5IGNvcnJlY3RseSDigJMgZXNwZWNpYWxseSBvbiBlbGVtZW50cyB0aGF0XG4gICAgICAvLyBnZXQgbW92ZWQgYXJvdW5kIG9yIHNwbGl0LiBTbyBpbnN0ZWFkLCB3ZSByb2xsIG91ciBvd24gc29sdXRpb24uXG4gICAgICBpZiAoZG9lc1NlbGVjdGlvbk5lZWRSZWNvdmVyaW5nKHNlbGVjdGlvbikpIHtcbiAgICAgICAgY29uc3QgcHJldlNlbGVjdGlvbiA9IGN1cnJlbnRFZGl0b3JTdGF0ZS5fc2VsZWN0aW9uO1xuXG4gICAgICAgIGlmIChsZXhpY2FsLiRpc1JhbmdlU2VsZWN0aW9uKHByZXZTZWxlY3Rpb24pKSB7XG4gICAgICAgICAgY29uc3QgcHJldk9mZnNldFZpZXcgPSBvZmZzZXQuJGNyZWF0ZU9mZnNldFZpZXcoZWRpdG9yLCAwLCBjdXJyZW50RWRpdG9yU3RhdGUpO1xuICAgICAgICAgIGNvbnN0IG5leHRPZmZzZXRWaWV3ID0gb2Zmc2V0LiRjcmVhdGVPZmZzZXRWaWV3KGVkaXRvciwgMCwgcGVuZGluZ0VkaXRvclN0YXRlKTtcbiAgICAgICAgICBjb25zdCBbc3RhcnQsIGVuZF0gPSBwcmV2T2Zmc2V0Vmlldy5nZXRPZmZzZXRzRnJvbVNlbGVjdGlvbihwcmV2U2VsZWN0aW9uKTtcbiAgICAgICAgICBjb25zdCBuZXh0U2VsZWN0aW9uID0gbmV4dE9mZnNldFZpZXcuY3JlYXRlU2VsZWN0aW9uRnJvbU9mZnNldHMoc3RhcnQsIGVuZCwgcHJldk9mZnNldFZpZXcpO1xuXG4gICAgICAgICAgaWYgKG5leHRTZWxlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxleGljYWwuJHNldFNlbGVjdGlvbihuZXh0U2VsZWN0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2sgaXMgdG8gdXNlIHRoZSBZanMgY3Vyc29yIHBvc2l0aW9uXG4gICAgICAgICAgICBzeW5jTG9jYWxDdXJzb3JQb3NpdGlvbihiaW5kaW5nLCBwcm92aWRlcik7XG5cbiAgICAgICAgICAgIGlmIChkb2VzU2VsZWN0aW9uTmVlZFJlY292ZXJpbmcoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgICBjb25zdCByb290ID0gbGV4aWNhbC4kZ2V0Um9vdCgpOyAvLyBJZiB0aGVyZSB3YXMgYSBjb2xsaXNpb24gb24gdGhlIHRvcCBsZXZlbCBwYXJhZ3JhcGhcbiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byByZS1hZGQgYSBwYXJhZ3JhcGhcblxuICAgICAgICAgICAgICBpZiAocm9vdC5nZXRDaGlsZHJlblNpemUoKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJvb3QuYXBwZW5kKGxleGljYWwuJGNyZWF0ZVBhcmFncmFwaE5vZGUoKSk7XG4gICAgICAgICAgICAgIH0gLy8gRmFsbGJhY2tcblxuXG4gICAgICAgICAgICAgIGxleGljYWwuJGdldFJvb3QoKS5zZWxlY3RFbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzeW5jTGV4aWNhbFNlbGVjdGlvblRvWWpzKGJpbmRpbmcsIHByb3ZpZGVyLCBwcmV2U2VsZWN0aW9uLCBsZXhpY2FsLiRnZXRTZWxlY3Rpb24oKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzeW5jTG9jYWxDdXJzb3JQb3NpdGlvbihiaW5kaW5nLCBwcm92aWRlcik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgb25VcGRhdGU6ICgpID0+IHtcbiAgICAgIHN5bmNDdXJzb3JQb3NpdGlvbnMoYmluZGluZywgcHJvdmlkZXIpO1xuICAgIH0sXG4gICAgc2tpcFRyYW5zZm9ybXM6IHRydWUsXG4gICAgdGFnOiBpc0Zyb21VbmRvTWFuZ2VyID8gJ2hpc3RvcmljJyA6ICdjb2xsYWJvcmF0aW9uJ1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTm9ybWFsaXphdGlvbk1lcmdlQ29uZmxpY3RzKGJpbmRpbmcsIG5vcm1hbGl6ZWROb2Rlcykge1xuICAvLyBXZSBoYW5kbGUgdGhlIG1lcmdlIG9wZXJhdGlvbnMgaGVyZVxuICBjb25zdCBub3JtYWxpemVkTm9kZXNLZXlzID0gQXJyYXkuZnJvbShub3JtYWxpemVkTm9kZXMpO1xuICBjb25zdCBjb2xsYWJOb2RlTWFwID0gYmluZGluZy5jb2xsYWJOb2RlTWFwO1xuICBjb25zdCBtZXJnZWROb2RlcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9ybWFsaXplZE5vZGVzS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG5vZGVLZXkgPSBub3JtYWxpemVkTm9kZXNLZXlzW2ldO1xuICAgIGNvbnN0IGxleGljYWxOb2RlID0gbGV4aWNhbC4kZ2V0Tm9kZUJ5S2V5KG5vZGVLZXkpO1xuICAgIGNvbnN0IGNvbGxhYk5vZGUgPSBjb2xsYWJOb2RlTWFwLmdldChub2RlS2V5KTtcblxuICAgIGlmIChjb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiVGV4dE5vZGUpIHtcbiAgICAgIGlmIChsZXhpY2FsLiRpc1RleHROb2RlKGxleGljYWxOb2RlKSkge1xuICAgICAgICAvLyBXZSBtdXRhdGUgdGhlIHRleHQgY29sbGFiIG5vZGVzIGFmdGVyIHJlbW92aW5nXG4gICAgICAgIC8vIGFsbCB0aGUgZGVhZCBub2RlcyBmaXJzdCwgb3RoZXJ3aXNlIG9mZnNldHMgYnJlYWsuXG4gICAgICAgIG1lcmdlZE5vZGVzLnB1c2goW2NvbGxhYk5vZGUsIGxleGljYWxOb2RlLl9fdGV4dF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gY29sbGFiTm9kZS5nZXRPZmZzZXQoKTtcblxuICAgICAgICBpZiAob2Zmc2V0ID09PSAtMSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyZW50ID0gY29sbGFiTm9kZS5fcGFyZW50O1xuICAgICAgICBjb2xsYWJOb2RlLl9ub3JtYWxpemVkID0gdHJ1ZTtcblxuICAgICAgICBwYXJlbnQuX3htbFRleHQuZGVsZXRlKG9mZnNldCwgMSk7XG5cbiAgICAgICAgY29sbGFiTm9kZU1hcC5kZWxldGUobm9kZUtleSk7XG4gICAgICAgIGNvbnN0IHBhcmVudENoaWxkcmVuID0gcGFyZW50Ll9jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJlbnRDaGlsZHJlbi5pbmRleE9mKGNvbGxhYk5vZGUpO1xuICAgICAgICBwYXJlbnRDaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWVyZ2VkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBbY29sbGFiTm9kZSwgdGV4dF0gPSBtZXJnZWROb2Rlc1tpXTtcblxuICAgIGlmIChjb2xsYWJOb2RlIGluc3RhbmNlb2YgQ29sbGFiVGV4dE5vZGUgJiYgdHlwZW9mIHRleHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb2xsYWJOb2RlLl90ZXh0ID0gdGV4dDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3luY0xleGljYWxVcGRhdGVUb1lqcyhiaW5kaW5nLCBwcm92aWRlciwgcHJldkVkaXRvclN0YXRlLCBjdXJyRWRpdG9yU3RhdGUsIGRpcnR5RWxlbWVudHMsIGRpcnR5TGVhdmVzLCBub3JtYWxpemVkTm9kZXMsIHRhZ3MpIHtcbiAgc3luY1dpdGhUcmFuc2FjdGlvbihiaW5kaW5nLCAoKSA9PiB7XG4gICAgY3VyckVkaXRvclN0YXRlLnJlYWQoKCkgPT4ge1xuICAgICAgLy8gV2UgY2hlY2sgaWYgdGhlIHVwZGF0ZSBoYXMgY29tZSBmcm9tIGEgb3JpZ2luIHdoZXJlIHRoZSBvcmlnaW5cbiAgICAgIC8vIHdhcyB0aGUgY29sbGFib3JhdGlvbiBiaW5kaW5nIHByZXZpb3VzbHkuIFRoaXMgY2FuIGhlbHAgdXNcbiAgICAgIC8vIHByZXZlbnQgdW5uZWNlc3NhcmlseSByZS1kaWZmaW5nIGFuZCBwb3NzaWJsZSByZS1hcHBseWluZ1xuICAgICAgLy8gdGhlIHNhbWUgY2hhbmdlIGVkaXRvciBzdGF0ZSBhZ2Fpbi4gRm9yIGV4YW1wbGUsIGlmIGEgdXNlclxuICAgICAgLy8gdHlwZXMgYSBjaGFyYWN0ZXIgYW5kIHdlIGdldCBpdCwgd2UgZG9uJ3Qgd2FudCB0byB0aGVuIGluc2VydFxuICAgICAgLy8gdGhlIHNhbWUgY2hhcmFjdGVyIGFnYWluLiBUaGUgZXhjZXB0aW9uIHRvIHRoaXMgaGV1cmlzdGljIGlzXG4gICAgICAvLyB3aGVuIHdlIG5lZWQgdG8gaGFuZGxlIG5vcm1hbGl6YXRpb24gbWVyZ2UgY29uZmxpY3RzLlxuICAgICAgaWYgKHRhZ3MuaGFzKCdjb2xsYWJvcmF0aW9uJykgfHwgdGFncy5oYXMoJ2hpc3RvcmljJykpIHtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWROb2Rlcy5zaXplID4gMCkge1xuICAgICAgICAgIGhhbmRsZU5vcm1hbGl6YXRpb25NZXJnZUNvbmZsaWN0cyhiaW5kaW5nLCBub3JtYWxpemVkTm9kZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlydHlFbGVtZW50cy5oYXMoJ3Jvb3QnKSkge1xuICAgICAgICBjb25zdCBwcmV2Tm9kZU1hcCA9IHByZXZFZGl0b3JTdGF0ZS5fbm9kZU1hcDtcbiAgICAgICAgY29uc3QgbmV4dExleGljYWxSb290ID0gbGV4aWNhbC4kZ2V0Um9vdCgpO1xuICAgICAgICBjb25zdCBjb2xsYWJSb290ID0gYmluZGluZy5yb290O1xuICAgICAgICBjb2xsYWJSb290LnN5bmNQcm9wZXJ0aWVzRnJvbUxleGljYWwoYmluZGluZywgbmV4dExleGljYWxSb290LCBwcmV2Tm9kZU1hcCk7XG4gICAgICAgIGNvbGxhYlJvb3Quc3luY0NoaWxkcmVuRnJvbUxleGljYWwoYmluZGluZywgbmV4dExleGljYWxSb290LCBwcmV2Tm9kZU1hcCwgZGlydHlFbGVtZW50cywgZGlydHlMZWF2ZXMpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzZWxlY3Rpb24gPSBsZXhpY2FsLiRnZXRTZWxlY3Rpb24oKTtcbiAgICAgIGNvbnN0IHByZXZTZWxlY3Rpb24gPSBwcmV2RWRpdG9yU3RhdGUuX3NlbGVjdGlvbjtcbiAgICAgIHN5bmNMZXhpY2FsU2VsZWN0aW9uVG9ZanMoYmluZGluZywgcHJvdmlkZXIsIHByZXZTZWxlY3Rpb24sIHNlbGVjdGlvbik7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vKiogQG1vZHVsZSBAbGV4aWNhbC95anMgKi9cbmNvbnN0IENPTk5FQ1RFRF9DT01NQU5EID0gbGV4aWNhbC5jcmVhdGVDb21tYW5kKCdDT05ORUNURURfQ09NTUFORCcpO1xuY29uc3QgVE9HR0xFX0NPTk5FQ1RfQ09NTUFORCA9IGxleGljYWwuY3JlYXRlQ29tbWFuZCgnVE9HR0xFX0NPTk5FQ1RfQ09NTUFORCcpO1xuZnVuY3Rpb24gY3JlYXRlVW5kb01hbmFnZXIoYmluZGluZywgcm9vdCkge1xuICByZXR1cm4gbmV3IHlqcy5VbmRvTWFuYWdlcihyb290LCB7XG4gICAgdHJhY2tlZE9yaWdpbnM6IG5ldyBTZXQoW2JpbmRpbmcsIG51bGxdKVxuICB9KTtcbn1cbmZ1bmN0aW9uIGluaXRMb2NhbFN0YXRlKHByb3ZpZGVyLCBuYW1lLCBjb2xvciwgZm9jdXNpbmcpIHtcbiAgcHJvdmlkZXIuYXdhcmVuZXNzLnNldExvY2FsU3RhdGUoe1xuICAgIGFuY2hvclBvczogbnVsbCxcbiAgICBjb2xvcixcbiAgICBmb2N1c1BvczogbnVsbCxcbiAgICBmb2N1c2luZzogZm9jdXNpbmcsXG4gICAgbmFtZVxuICB9KTtcbn1cbmZ1bmN0aW9uIHNldExvY2FsU3RhdGVGb2N1cyhwcm92aWRlciwgbmFtZSwgY29sb3IsIGZvY3VzaW5nKSB7XG4gIGNvbnN0IHtcbiAgICBhd2FyZW5lc3NcbiAgfSA9IHByb3ZpZGVyO1xuICBsZXQgbG9jYWxTdGF0ZSA9IGF3YXJlbmVzcy5nZXRMb2NhbFN0YXRlKCk7XG5cbiAgaWYgKGxvY2FsU3RhdGUgPT09IG51bGwpIHtcbiAgICBsb2NhbFN0YXRlID0ge1xuICAgICAgYW5jaG9yUG9zOiBudWxsLFxuICAgICAgY29sb3IsXG4gICAgICBmb2N1c1BvczogbnVsbCxcbiAgICAgIGZvY3VzaW5nOiBmb2N1c2luZyxcbiAgICAgIG5hbWVcbiAgICB9O1xuICB9XG5cbiAgbG9jYWxTdGF0ZS5mb2N1c2luZyA9IGZvY3VzaW5nO1xuICBhd2FyZW5lc3Muc2V0TG9jYWxTdGF0ZShsb2NhbFN0YXRlKTtcbn1cblxuZXhwb3J0cy5DT05ORUNURURfQ09NTUFORCA9IENPTk5FQ1RFRF9DT01NQU5EO1xuZXhwb3J0cy5UT0dHTEVfQ09OTkVDVF9DT01NQU5EID0gVE9HR0xFX0NPTk5FQ1RfQ09NTUFORDtcbmV4cG9ydHMuY3JlYXRlQmluZGluZyA9IGNyZWF0ZUJpbmRpbmc7XG5leHBvcnRzLmNyZWF0ZVVuZG9NYW5hZ2VyID0gY3JlYXRlVW5kb01hbmFnZXI7XG5leHBvcnRzLmluaXRMb2NhbFN0YXRlID0gaW5pdExvY2FsU3RhdGU7XG5leHBvcnRzLnNldExvY2FsU3RhdGVGb2N1cyA9IHNldExvY2FsU3RhdGVGb2N1cztcbmV4cG9ydHMuc3luY0N1cnNvclBvc2l0aW9ucyA9IHN5bmNDdXJzb3JQb3NpdGlvbnM7XG5leHBvcnRzLnN5bmNMZXhpY2FsVXBkYXRlVG9ZanMgPSBzeW5jTGV4aWNhbFVwZGF0ZVRvWWpzO1xuZXhwb3J0cy5zeW5jWWpzQ2hhbmdlc1RvTGV4aWNhbCA9IHN5bmNZanNDaGFuZ2VzVG9MZXhpY2FsO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/yjs/LexicalYjs.dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lexical/yjs/LexicalYjs.js":
/*!*************************************************!*\
  !*** ./node_modules/@lexical/yjs/LexicalYjs.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst LexicalYjs =  true ? __webpack_require__(/*! ./LexicalYjs.dev.js */ \"(ssr)/./node_modules/@lexical/yjs/LexicalYjs.dev.js\") : 0\nmodule.exports = LexicalYjs;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxleGljYWwveWpzL0xleGljYWxZanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1k7QUFDWixtQkFBbUIsS0FBc0MsR0FBRyxtQkFBTyxDQUFDLGdGQUFxQixJQUFJLENBQStCO0FBQzVIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY21zX2NyZWF0b3IvLi9ub2RlX21vZHVsZXMvQGxleGljYWwveWpzL0xleGljYWxZanMuanM/YTdiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0J1xuY29uc3QgTGV4aWNhbFlqcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gcmVxdWlyZSgnLi9MZXhpY2FsWWpzLmRldi5qcycpIDogcmVxdWlyZSgnLi9MZXhpY2FsWWpzLnByb2QuanMnKVxubW9kdWxlLmV4cG9ydHMgPSBMZXhpY2FsWWpzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lexical/yjs/LexicalYjs.js\n");

/***/ })

};
;